/* tslint:disable */
/* eslint-disable */
/**
 * Dinero API
 * Welcome to our endpoint documentation. Please try to carefully read our general documentation found on <a href=\"https://developer.dinero.dk/\">developer.dinero.dk</a> for information regarding the authorization proces, status and errorcodes, FAQ, Postman tutorial etc. <br><br>Once authorized, you simply add \'Authorization: Bearer <access-token>\' to the header of your requests. On the page below, you\'ll find all our endpoints documented as well as possible, but if you have any questions regarding an endpoint, or an error in the description, please contact us on <a href=\"mailto:api@dinero.dk\">api@dinero.dk.</a> 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AccountingYearReadModel } from '../model';
/**
 * AccountingYearsApi - axios parameter creator
 * @export
 */
export const AccountingYearsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a list of an organizations accounting years. You can create a new accouting year, by simply booking a voucher in the next possible accounting year. For instance, if 2023 is the most recent accouting year, 2024 can be created by booking a voucher in this year.
         * @summary List Accounting years
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdAccountingyearsGet: async (organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdAccountingyearsGet', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/accountingyears`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountingYearsApi - functional programming interface
 * @export
 */
export const AccountingYearsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountingYearsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get a list of an organizations accounting years. You can create a new accouting year, by simply booking a voucher in the next possible accounting year. For instance, if 2023 is the most recent accouting year, 2024 can be created by booking a voucher in this year.
         * @summary List Accounting years
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdAccountingyearsGet(organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccountingYearReadModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdAccountingyearsGet(organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountingYearsApi.v1OrganizationIdAccountingyearsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AccountingYearsApi - factory interface
 * @export
 */
export const AccountingYearsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountingYearsApiFp(configuration)
    return {
        /**
         * Get a list of an organizations accounting years. You can create a new accouting year, by simply booking a voucher in the next possible accounting year. For instance, if 2023 is the most recent accouting year, 2024 can be created by booking a voucher in this year.
         * @summary List Accounting years
         * @param {AccountingYearsApiV1OrganizationIdAccountingyearsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdAccountingyearsGet(requestParameters: AccountingYearsApiV1OrganizationIdAccountingyearsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<AccountingYearReadModel>> {
            return localVarFp.v1OrganizationIdAccountingyearsGet(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for v1OrganizationIdAccountingyearsGet operation in AccountingYearsApi.
 * @export
 * @interface AccountingYearsApiV1OrganizationIdAccountingyearsGetRequest
 */
export interface AccountingYearsApiV1OrganizationIdAccountingyearsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AccountingYearsApiV1OrganizationIdAccountingyearsGet
     */
    readonly organizationId: string
}

/**
 * AccountingYearsApi - object-oriented interface
 * @export
 * @class AccountingYearsApi
 * @extends {BaseAPI}
 */
export class AccountingYearsApi extends BaseAPI {
    /**
     * Get a list of an organizations accounting years. You can create a new accouting year, by simply booking a voucher in the next possible accounting year. For instance, if 2023 is the most recent accouting year, 2024 can be created by booking a voucher in this year.
     * @summary List Accounting years
     * @param {AccountingYearsApiV1OrganizationIdAccountingyearsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountingYearsApi
     */
    public v1OrganizationIdAccountingyearsGet(requestParameters: AccountingYearsApiV1OrganizationIdAccountingyearsGetRequest, options?: RawAxiosRequestConfig) {
        return AccountingYearsApiFp(this.configuration).v1OrganizationIdAccountingyearsGet(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }
}


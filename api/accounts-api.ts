/* tslint:disable */
/* eslint-disable */
/**
 * Dinero API
 * Welcome to our endpoint documentation. Please try to carefully read our general documentation found on <a href=\"https://developer.dinero.dk/\">developer.dinero.dk</a> for information regarding the authorization proces, status and errorcodes, FAQ, Postman tutorial etc. <br><br>Once authorized, you simply add \'Authorization: Bearer <access-token>\' to the header of your requests. On the page below, you\'ll find all our endpoints documented as well as possible, but if you have any questions regarding an endpoint, or an error in the description, please contact us on <a href=\"mailto:api@dinero.dk\">api@dinero.dk.</a> 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AccountCreateModel } from '../model';
// @ts-ignore
import type { DepositAccountReadModel } from '../model';
// @ts-ignore
import type { DepositCreateModel } from '../model';
// @ts-ignore
import type { EntryAccountReadModel } from '../model';
/**
 * AccountsApi - axios parameter creator
 * @export
 */
export const AccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the list of deposit accounts for the organization. For more elaborate information, look at the create deposit account endpoint.
         * @summary List deposit accounts
         * @param {string} organizationId 
         * @param {string} [fields] A comma separated list of fields to include in the response.              Possible values are Name, AccountNumber, IsDefault, IsHidden.              Notice that it\&#39;s not case sensitive, the property name will be returned the way you request it.              If left empty it defaults to AccountNumber and Name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdAccountsDepositGet: async (organizationId: string, fields?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdAccountsDepositGet', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/accounts/deposit`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new deposit account. Deposit accounts have some special properties over entry accounts. They can hold information about the registration and account number for the bankaccount in question. They can also be used for other types of deposits, such as Paypal, Zettle, Stripe etc. They will usually exist in the 55000-55999 range.
         * @summary Create deposit account
         * @param {string} organizationId 
         * @param {DepositCreateModel} [depositCreateModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdAccountsDepositPost: async (organizationId: string, depositCreateModel?: DepositCreateModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdAccountsDepositPost', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/accounts/deposit`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(depositCreateModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the list of entry accounts for the organization. Entry accounts are simply all accounts, and can exist in any range.
         * @summary List entry accounts
         * @param {string} organizationId 
         * @param {string} [fields] A comma separated list of fields to include in the response.              Possible values are Name, AccountNumber, VatCode and Category. Notice that it\&#39;s not case sensitive, the property name will be returned the way you request it.              If left empty it defaults to AccountNumber and Name.
         * @param {string} [categoryFilter] Filters the accounts, so only accounts with the selected category are returned.  Possible categories: Turnover, Variable Expenses, Salary, Sales Expenses, Property Expenses, Administration Expenses,  Travel Expenses, Depreciation, Interest Income, Interest Expenses, Property, Turnover Assets, Financial Assets, Receivables,  Liquid Assets, Equity, Long Term Debt, Short Term Debt, Vat Due, Salary Due, Analysis, Not Set, Tax, Charge, IntangibleProperty
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdAccountsEntryGet: async (organizationId: string, fields?: string, categoryFilter?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdAccountsEntryGet', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/accounts/entry`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (categoryFilter !== undefined) {
                localVarQueryParameter['categoryFilter'] = categoryFilter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new entry account. Entry accounts are used for most common cases except deposits, and can exist in any range.
         * @summary Create entry account
         * @param {string} organizationId 
         * @param {AccountCreateModel} [accountCreateModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdAccountsEntryPost: async (organizationId: string, accountCreateModel?: AccountCreateModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdAccountsEntryPost', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/accounts/entry`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accountCreateModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the list of purchase accounts for the organization. Purchase accounts are simply entry accounts, in the range from 2000 to 9399, which constitutes the expense before tax range. These accounts can be used while booking purchase vouchers.
         * @summary List purchase accounts
         * @param {string} organizationId 
         * @param {string} [fields] A comma separated list of fields to include in the response.              Possible values are Name, AccountNumber, VatCode, Category and CategoryName. Notice that it\&#39;s not case sensitive, the property name will be returned the way you request it.              If left empty it defaults to include all fields.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdAccountsPurchaseGet: async (organizationId: string, fields?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdAccountsPurchaseGet', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/accounts/purchase`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountsApi - functional programming interface
 * @export
 */
export const AccountsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get the list of deposit accounts for the organization. For more elaborate information, look at the create deposit account endpoint.
         * @summary List deposit accounts
         * @param {string} organizationId 
         * @param {string} [fields] A comma separated list of fields to include in the response.              Possible values are Name, AccountNumber, IsDefault, IsHidden.              Notice that it\&#39;s not case sensitive, the property name will be returned the way you request it.              If left empty it defaults to AccountNumber and Name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdAccountsDepositGet(organizationId: string, fields?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DepositAccountReadModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdAccountsDepositGet(organizationId, fields, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.v1OrganizationIdAccountsDepositGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new deposit account. Deposit accounts have some special properties over entry accounts. They can hold information about the registration and account number for the bankaccount in question. They can also be used for other types of deposits, such as Paypal, Zettle, Stripe etc. They will usually exist in the 55000-55999 range.
         * @summary Create deposit account
         * @param {string} organizationId 
         * @param {DepositCreateModel} [depositCreateModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdAccountsDepositPost(organizationId: string, depositCreateModel?: DepositCreateModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdAccountsDepositPost(organizationId, depositCreateModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.v1OrganizationIdAccountsDepositPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the list of entry accounts for the organization. Entry accounts are simply all accounts, and can exist in any range.
         * @summary List entry accounts
         * @param {string} organizationId 
         * @param {string} [fields] A comma separated list of fields to include in the response.              Possible values are Name, AccountNumber, VatCode and Category. Notice that it\&#39;s not case sensitive, the property name will be returned the way you request it.              If left empty it defaults to AccountNumber and Name.
         * @param {string} [categoryFilter] Filters the accounts, so only accounts with the selected category are returned.  Possible categories: Turnover, Variable Expenses, Salary, Sales Expenses, Property Expenses, Administration Expenses,  Travel Expenses, Depreciation, Interest Income, Interest Expenses, Property, Turnover Assets, Financial Assets, Receivables,  Liquid Assets, Equity, Long Term Debt, Short Term Debt, Vat Due, Salary Due, Analysis, Not Set, Tax, Charge, IntangibleProperty
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdAccountsEntryGet(organizationId: string, fields?: string, categoryFilter?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EntryAccountReadModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdAccountsEntryGet(organizationId, fields, categoryFilter, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.v1OrganizationIdAccountsEntryGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new entry account. Entry accounts are used for most common cases except deposits, and can exist in any range.
         * @summary Create entry account
         * @param {string} organizationId 
         * @param {AccountCreateModel} [accountCreateModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdAccountsEntryPost(organizationId: string, accountCreateModel?: AccountCreateModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdAccountsEntryPost(organizationId, accountCreateModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.v1OrganizationIdAccountsEntryPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the list of purchase accounts for the organization. Purchase accounts are simply entry accounts, in the range from 2000 to 9399, which constitutes the expense before tax range. These accounts can be used while booking purchase vouchers.
         * @summary List purchase accounts
         * @param {string} organizationId 
         * @param {string} [fields] A comma separated list of fields to include in the response.              Possible values are Name, AccountNumber, VatCode, Category and CategoryName. Notice that it\&#39;s not case sensitive, the property name will be returned the way you request it.              If left empty it defaults to include all fields.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdAccountsPurchaseGet(organizationId: string, fields?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EntryAccountReadModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdAccountsPurchaseGet(organizationId, fields, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.v1OrganizationIdAccountsPurchaseGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AccountsApi - factory interface
 * @export
 */
export const AccountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountsApiFp(configuration)
    return {
        /**
         * Get the list of deposit accounts for the organization. For more elaborate information, look at the create deposit account endpoint.
         * @summary List deposit accounts
         * @param {AccountsApiV1OrganizationIdAccountsDepositGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdAccountsDepositGet(requestParameters: AccountsApiV1OrganizationIdAccountsDepositGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<DepositAccountReadModel>> {
            return localVarFp.v1OrganizationIdAccountsDepositGet(requestParameters.organizationId, requestParameters.fields, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new deposit account. Deposit accounts have some special properties over entry accounts. They can hold information about the registration and account number for the bankaccount in question. They can also be used for other types of deposits, such as Paypal, Zettle, Stripe etc. They will usually exist in the 55000-55999 range.
         * @summary Create deposit account
         * @param {AccountsApiV1OrganizationIdAccountsDepositPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdAccountsDepositPost(requestParameters: AccountsApiV1OrganizationIdAccountsDepositPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1OrganizationIdAccountsDepositPost(requestParameters.organizationId, requestParameters.depositCreateModel, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the list of entry accounts for the organization. Entry accounts are simply all accounts, and can exist in any range.
         * @summary List entry accounts
         * @param {AccountsApiV1OrganizationIdAccountsEntryGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdAccountsEntryGet(requestParameters: AccountsApiV1OrganizationIdAccountsEntryGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<EntryAccountReadModel>> {
            return localVarFp.v1OrganizationIdAccountsEntryGet(requestParameters.organizationId, requestParameters.fields, requestParameters.categoryFilter, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new entry account. Entry accounts are used for most common cases except deposits, and can exist in any range.
         * @summary Create entry account
         * @param {AccountsApiV1OrganizationIdAccountsEntryPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdAccountsEntryPost(requestParameters: AccountsApiV1OrganizationIdAccountsEntryPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1OrganizationIdAccountsEntryPost(requestParameters.organizationId, requestParameters.accountCreateModel, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the list of purchase accounts for the organization. Purchase accounts are simply entry accounts, in the range from 2000 to 9399, which constitutes the expense before tax range. These accounts can be used while booking purchase vouchers.
         * @summary List purchase accounts
         * @param {AccountsApiV1OrganizationIdAccountsPurchaseGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdAccountsPurchaseGet(requestParameters: AccountsApiV1OrganizationIdAccountsPurchaseGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<EntryAccountReadModel>> {
            return localVarFp.v1OrganizationIdAccountsPurchaseGet(requestParameters.organizationId, requestParameters.fields, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for v1OrganizationIdAccountsDepositGet operation in AccountsApi.
 * @export
 * @interface AccountsApiV1OrganizationIdAccountsDepositGetRequest
 */
export interface AccountsApiV1OrganizationIdAccountsDepositGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AccountsApiV1OrganizationIdAccountsDepositGet
     */
    readonly organizationId: string

    /**
     * A comma separated list of fields to include in the response.              Possible values are Name, AccountNumber, IsDefault, IsHidden.              Notice that it\&#39;s not case sensitive, the property name will be returned the way you request it.              If left empty it defaults to AccountNumber and Name.
     * @type {string}
     * @memberof AccountsApiV1OrganizationIdAccountsDepositGet
     */
    readonly fields?: string
}

/**
 * Request parameters for v1OrganizationIdAccountsDepositPost operation in AccountsApi.
 * @export
 * @interface AccountsApiV1OrganizationIdAccountsDepositPostRequest
 */
export interface AccountsApiV1OrganizationIdAccountsDepositPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AccountsApiV1OrganizationIdAccountsDepositPost
     */
    readonly organizationId: string

    /**
     * 
     * @type {DepositCreateModel}
     * @memberof AccountsApiV1OrganizationIdAccountsDepositPost
     */
    readonly depositCreateModel?: DepositCreateModel
}

/**
 * Request parameters for v1OrganizationIdAccountsEntryGet operation in AccountsApi.
 * @export
 * @interface AccountsApiV1OrganizationIdAccountsEntryGetRequest
 */
export interface AccountsApiV1OrganizationIdAccountsEntryGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AccountsApiV1OrganizationIdAccountsEntryGet
     */
    readonly organizationId: string

    /**
     * A comma separated list of fields to include in the response.              Possible values are Name, AccountNumber, VatCode and Category. Notice that it\&#39;s not case sensitive, the property name will be returned the way you request it.              If left empty it defaults to AccountNumber and Name.
     * @type {string}
     * @memberof AccountsApiV1OrganizationIdAccountsEntryGet
     */
    readonly fields?: string

    /**
     * Filters the accounts, so only accounts with the selected category are returned.  Possible categories: Turnover, Variable Expenses, Salary, Sales Expenses, Property Expenses, Administration Expenses,  Travel Expenses, Depreciation, Interest Income, Interest Expenses, Property, Turnover Assets, Financial Assets, Receivables,  Liquid Assets, Equity, Long Term Debt, Short Term Debt, Vat Due, Salary Due, Analysis, Not Set, Tax, Charge, IntangibleProperty
     * @type {string}
     * @memberof AccountsApiV1OrganizationIdAccountsEntryGet
     */
    readonly categoryFilter?: string
}

/**
 * Request parameters for v1OrganizationIdAccountsEntryPost operation in AccountsApi.
 * @export
 * @interface AccountsApiV1OrganizationIdAccountsEntryPostRequest
 */
export interface AccountsApiV1OrganizationIdAccountsEntryPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AccountsApiV1OrganizationIdAccountsEntryPost
     */
    readonly organizationId: string

    /**
     * 
     * @type {AccountCreateModel}
     * @memberof AccountsApiV1OrganizationIdAccountsEntryPost
     */
    readonly accountCreateModel?: AccountCreateModel
}

/**
 * Request parameters for v1OrganizationIdAccountsPurchaseGet operation in AccountsApi.
 * @export
 * @interface AccountsApiV1OrganizationIdAccountsPurchaseGetRequest
 */
export interface AccountsApiV1OrganizationIdAccountsPurchaseGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AccountsApiV1OrganizationIdAccountsPurchaseGet
     */
    readonly organizationId: string

    /**
     * A comma separated list of fields to include in the response.              Possible values are Name, AccountNumber, VatCode, Category and CategoryName. Notice that it\&#39;s not case sensitive, the property name will be returned the way you request it.              If left empty it defaults to include all fields.
     * @type {string}
     * @memberof AccountsApiV1OrganizationIdAccountsPurchaseGet
     */
    readonly fields?: string
}

/**
 * AccountsApi - object-oriented interface
 * @export
 * @class AccountsApi
 * @extends {BaseAPI}
 */
export class AccountsApi extends BaseAPI {
    /**
     * Get the list of deposit accounts for the organization. For more elaborate information, look at the create deposit account endpoint.
     * @summary List deposit accounts
     * @param {AccountsApiV1OrganizationIdAccountsDepositGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public v1OrganizationIdAccountsDepositGet(requestParameters: AccountsApiV1OrganizationIdAccountsDepositGetRequest, options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).v1OrganizationIdAccountsDepositGet(requestParameters.organizationId, requestParameters.fields, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new deposit account. Deposit accounts have some special properties over entry accounts. They can hold information about the registration and account number for the bankaccount in question. They can also be used for other types of deposits, such as Paypal, Zettle, Stripe etc. They will usually exist in the 55000-55999 range.
     * @summary Create deposit account
     * @param {AccountsApiV1OrganizationIdAccountsDepositPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public v1OrganizationIdAccountsDepositPost(requestParameters: AccountsApiV1OrganizationIdAccountsDepositPostRequest, options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).v1OrganizationIdAccountsDepositPost(requestParameters.organizationId, requestParameters.depositCreateModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the list of entry accounts for the organization. Entry accounts are simply all accounts, and can exist in any range.
     * @summary List entry accounts
     * @param {AccountsApiV1OrganizationIdAccountsEntryGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public v1OrganizationIdAccountsEntryGet(requestParameters: AccountsApiV1OrganizationIdAccountsEntryGetRequest, options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).v1OrganizationIdAccountsEntryGet(requestParameters.organizationId, requestParameters.fields, requestParameters.categoryFilter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new entry account. Entry accounts are used for most common cases except deposits, and can exist in any range.
     * @summary Create entry account
     * @param {AccountsApiV1OrganizationIdAccountsEntryPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public v1OrganizationIdAccountsEntryPost(requestParameters: AccountsApiV1OrganizationIdAccountsEntryPostRequest, options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).v1OrganizationIdAccountsEntryPost(requestParameters.organizationId, requestParameters.accountCreateModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the list of purchase accounts for the organization. Purchase accounts are simply entry accounts, in the range from 2000 to 9399, which constitutes the expense before tax range. These accounts can be used while booking purchase vouchers.
     * @summary List purchase accounts
     * @param {AccountsApiV1OrganizationIdAccountsPurchaseGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public v1OrganizationIdAccountsPurchaseGet(requestParameters: AccountsApiV1OrganizationIdAccountsPurchaseGetRequest, options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).v1OrganizationIdAccountsPurchaseGet(requestParameters.organizationId, requestParameters.fields, options).then((request) => request(this.axios, this.basePath));
    }
}


/* tslint:disable */
/* eslint-disable */
/**
 * Dinero API
 * Welcome to our endpoint documentation. Please try to carefully read our general documentation found on <a href=\"https://developer.dinero.dk/\">developer.dinero.dk</a> for information regarding the authorization proces, status and errorcodes, FAQ, Postman tutorial etc. <br><br>Once authorized, you simply add \'Authorization: Bearer <access-token>\' to the header of your requests. On the page below, you\'ll find all our endpoints documented as well as possible, but if you have any questions regarding an endpoint, or an error in the description, please contact us on <a href=\"mailto:api@dinero.dk\">api@dinero.dk.</a> 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ContactStateOfAccount } from '../model';
// @ts-ignore
import type { ContactStateOfAccountMailoutModel } from '../model';
/**
 * ContactStateOfAccountApi - axios parameter creator
 * @export
 */
export const ContactStateOfAccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * You can send a contacts state of account to the contact in question by using this endpoint. It will default to the standard email of the contact if no other is specified.
         * @summary Send the contacts state of account as an email
         * @param {string} guid Unique identifier for the contact
         * @param {string} organizationId 
         * @param {ContactStateOfAccountMailoutModel} [contactStateOfAccountMailoutModel] The mail out data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdStateOfAccountGuidEmailPost: async (guid: string, organizationId: string, contactStateOfAccountMailoutModel?: ContactStateOfAccountMailoutModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('v1OrganizationIdStateOfAccountGuidEmailPost', 'guid', guid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdStateOfAccountGuidEmailPost', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/state-of-account/{guid}/email`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(contactStateOfAccountMailoutModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the income, expenses and related entries for a contact in the given period (or all time if no period is defined).
         * @summary Get contacts state of account
         * @param {string} guid Unique identifier for the contact
         * @param {string} organizationId 
         * @param {string} [from] Include entries after this date
         * @param {string} [to] Include entries before this date
         * @param {boolean} [hideClosed] Whether to exclude closed entries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdStateOfAccountGuidGet: async (guid: string, organizationId: string, from?: string, to?: string, hideClosed?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('v1OrganizationIdStateOfAccountGuidGet', 'guid', guid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdStateOfAccountGuidGet', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/state-of-account/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString() :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString() :
                    to;
            }

            if (hideClosed !== undefined) {
                localVarQueryParameter['hideClosed'] = hideClosed;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * The same as the above endpoint, but as a PDF file.
         * @summary Get contacts state of account as PDF
         * @param {string} guid Unique identifier for the contact
         * @param {string} organizationId 
         * @param {string} [from] Include entries after this date
         * @param {string} [to] Include entries before this date
         * @param {boolean} [hideClosed] Whether to exclude closed entries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdStateOfAccountGuidPdfGet: async (guid: string, organizationId: string, from?: string, to?: string, hideClosed?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('v1OrganizationIdStateOfAccountGuidPdfGet', 'guid', guid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdStateOfAccountGuidPdfGet', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/state-of-account/{guid}/pdf`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString() :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString() :
                    to;
            }

            if (hideClosed !== undefined) {
                localVarQueryParameter['hideClosed'] = hideClosed;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContactStateOfAccountApi - functional programming interface
 * @export
 */
export const ContactStateOfAccountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContactStateOfAccountApiAxiosParamCreator(configuration)
    return {
        /**
         * You can send a contacts state of account to the contact in question by using this endpoint. It will default to the standard email of the contact if no other is specified.
         * @summary Send the contacts state of account as an email
         * @param {string} guid Unique identifier for the contact
         * @param {string} organizationId 
         * @param {ContactStateOfAccountMailoutModel} [contactStateOfAccountMailoutModel] The mail out data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdStateOfAccountGuidEmailPost(guid: string, organizationId: string, contactStateOfAccountMailoutModel?: ContactStateOfAccountMailoutModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdStateOfAccountGuidEmailPost(guid, organizationId, contactStateOfAccountMailoutModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContactStateOfAccountApi.v1OrganizationIdStateOfAccountGuidEmailPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns the income, expenses and related entries for a contact in the given period (or all time if no period is defined).
         * @summary Get contacts state of account
         * @param {string} guid Unique identifier for the contact
         * @param {string} organizationId 
         * @param {string} [from] Include entries after this date
         * @param {string} [to] Include entries before this date
         * @param {boolean} [hideClosed] Whether to exclude closed entries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdStateOfAccountGuidGet(guid: string, organizationId: string, from?: string, to?: string, hideClosed?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContactStateOfAccount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdStateOfAccountGuidGet(guid, organizationId, from, to, hideClosed, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContactStateOfAccountApi.v1OrganizationIdStateOfAccountGuidGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * The same as the above endpoint, but as a PDF file.
         * @summary Get contacts state of account as PDF
         * @param {string} guid Unique identifier for the contact
         * @param {string} organizationId 
         * @param {string} [from] Include entries after this date
         * @param {string} [to] Include entries before this date
         * @param {boolean} [hideClosed] Whether to exclude closed entries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdStateOfAccountGuidPdfGet(guid: string, organizationId: string, from?: string, to?: string, hideClosed?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdStateOfAccountGuidPdfGet(guid, organizationId, from, to, hideClosed, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContactStateOfAccountApi.v1OrganizationIdStateOfAccountGuidPdfGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ContactStateOfAccountApi - factory interface
 * @export
 */
export const ContactStateOfAccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContactStateOfAccountApiFp(configuration)
    return {
        /**
         * You can send a contacts state of account to the contact in question by using this endpoint. It will default to the standard email of the contact if no other is specified.
         * @summary Send the contacts state of account as an email
         * @param {ContactStateOfAccountApiV1OrganizationIdStateOfAccountGuidEmailPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdStateOfAccountGuidEmailPost(requestParameters: ContactStateOfAccountApiV1OrganizationIdStateOfAccountGuidEmailPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1OrganizationIdStateOfAccountGuidEmailPost(requestParameters.guid, requestParameters.organizationId, requestParameters.contactStateOfAccountMailoutModel, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the income, expenses and related entries for a contact in the given period (or all time if no period is defined).
         * @summary Get contacts state of account
         * @param {ContactStateOfAccountApiV1OrganizationIdStateOfAccountGuidGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdStateOfAccountGuidGet(requestParameters: ContactStateOfAccountApiV1OrganizationIdStateOfAccountGuidGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ContactStateOfAccount> {
            return localVarFp.v1OrganizationIdStateOfAccountGuidGet(requestParameters.guid, requestParameters.organizationId, requestParameters.from, requestParameters.to, requestParameters.hideClosed, options).then((request) => request(axios, basePath));
        },
        /**
         * The same as the above endpoint, but as a PDF file.
         * @summary Get contacts state of account as PDF
         * @param {ContactStateOfAccountApiV1OrganizationIdStateOfAccountGuidPdfGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdStateOfAccountGuidPdfGet(requestParameters: ContactStateOfAccountApiV1OrganizationIdStateOfAccountGuidPdfGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1OrganizationIdStateOfAccountGuidPdfGet(requestParameters.guid, requestParameters.organizationId, requestParameters.from, requestParameters.to, requestParameters.hideClosed, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for v1OrganizationIdStateOfAccountGuidEmailPost operation in ContactStateOfAccountApi.
 * @export
 * @interface ContactStateOfAccountApiV1OrganizationIdStateOfAccountGuidEmailPostRequest
 */
export interface ContactStateOfAccountApiV1OrganizationIdStateOfAccountGuidEmailPostRequest {
    /**
     * Unique identifier for the contact
     * @type {string}
     * @memberof ContactStateOfAccountApiV1OrganizationIdStateOfAccountGuidEmailPost
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof ContactStateOfAccountApiV1OrganizationIdStateOfAccountGuidEmailPost
     */
    readonly organizationId: string

    /**
     * The mail out data
     * @type {ContactStateOfAccountMailoutModel}
     * @memberof ContactStateOfAccountApiV1OrganizationIdStateOfAccountGuidEmailPost
     */
    readonly contactStateOfAccountMailoutModel?: ContactStateOfAccountMailoutModel
}

/**
 * Request parameters for v1OrganizationIdStateOfAccountGuidGet operation in ContactStateOfAccountApi.
 * @export
 * @interface ContactStateOfAccountApiV1OrganizationIdStateOfAccountGuidGetRequest
 */
export interface ContactStateOfAccountApiV1OrganizationIdStateOfAccountGuidGetRequest {
    /**
     * Unique identifier for the contact
     * @type {string}
     * @memberof ContactStateOfAccountApiV1OrganizationIdStateOfAccountGuidGet
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof ContactStateOfAccountApiV1OrganizationIdStateOfAccountGuidGet
     */
    readonly organizationId: string

    /**
     * Include entries after this date
     * @type {string}
     * @memberof ContactStateOfAccountApiV1OrganizationIdStateOfAccountGuidGet
     */
    readonly from?: string

    /**
     * Include entries before this date
     * @type {string}
     * @memberof ContactStateOfAccountApiV1OrganizationIdStateOfAccountGuidGet
     */
    readonly to?: string

    /**
     * Whether to exclude closed entries
     * @type {boolean}
     * @memberof ContactStateOfAccountApiV1OrganizationIdStateOfAccountGuidGet
     */
    readonly hideClosed?: boolean
}

/**
 * Request parameters for v1OrganizationIdStateOfAccountGuidPdfGet operation in ContactStateOfAccountApi.
 * @export
 * @interface ContactStateOfAccountApiV1OrganizationIdStateOfAccountGuidPdfGetRequest
 */
export interface ContactStateOfAccountApiV1OrganizationIdStateOfAccountGuidPdfGetRequest {
    /**
     * Unique identifier for the contact
     * @type {string}
     * @memberof ContactStateOfAccountApiV1OrganizationIdStateOfAccountGuidPdfGet
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof ContactStateOfAccountApiV1OrganizationIdStateOfAccountGuidPdfGet
     */
    readonly organizationId: string

    /**
     * Include entries after this date
     * @type {string}
     * @memberof ContactStateOfAccountApiV1OrganizationIdStateOfAccountGuidPdfGet
     */
    readonly from?: string

    /**
     * Include entries before this date
     * @type {string}
     * @memberof ContactStateOfAccountApiV1OrganizationIdStateOfAccountGuidPdfGet
     */
    readonly to?: string

    /**
     * Whether to exclude closed entries
     * @type {boolean}
     * @memberof ContactStateOfAccountApiV1OrganizationIdStateOfAccountGuidPdfGet
     */
    readonly hideClosed?: boolean
}

/**
 * ContactStateOfAccountApi - object-oriented interface
 * @export
 * @class ContactStateOfAccountApi
 * @extends {BaseAPI}
 */
export class ContactStateOfAccountApi extends BaseAPI {
    /**
     * You can send a contacts state of account to the contact in question by using this endpoint. It will default to the standard email of the contact if no other is specified.
     * @summary Send the contacts state of account as an email
     * @param {ContactStateOfAccountApiV1OrganizationIdStateOfAccountGuidEmailPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactStateOfAccountApi
     */
    public v1OrganizationIdStateOfAccountGuidEmailPost(requestParameters: ContactStateOfAccountApiV1OrganizationIdStateOfAccountGuidEmailPostRequest, options?: RawAxiosRequestConfig) {
        return ContactStateOfAccountApiFp(this.configuration).v1OrganizationIdStateOfAccountGuidEmailPost(requestParameters.guid, requestParameters.organizationId, requestParameters.contactStateOfAccountMailoutModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the income, expenses and related entries for a contact in the given period (or all time if no period is defined).
     * @summary Get contacts state of account
     * @param {ContactStateOfAccountApiV1OrganizationIdStateOfAccountGuidGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactStateOfAccountApi
     */
    public v1OrganizationIdStateOfAccountGuidGet(requestParameters: ContactStateOfAccountApiV1OrganizationIdStateOfAccountGuidGetRequest, options?: RawAxiosRequestConfig) {
        return ContactStateOfAccountApiFp(this.configuration).v1OrganizationIdStateOfAccountGuidGet(requestParameters.guid, requestParameters.organizationId, requestParameters.from, requestParameters.to, requestParameters.hideClosed, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * The same as the above endpoint, but as a PDF file.
     * @summary Get contacts state of account as PDF
     * @param {ContactStateOfAccountApiV1OrganizationIdStateOfAccountGuidPdfGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactStateOfAccountApi
     */
    public v1OrganizationIdStateOfAccountGuidPdfGet(requestParameters: ContactStateOfAccountApiV1OrganizationIdStateOfAccountGuidPdfGetRequest, options?: RawAxiosRequestConfig) {
        return ContactStateOfAccountApiFp(this.configuration).v1OrganizationIdStateOfAccountGuidPdfGet(requestParameters.guid, requestParameters.organizationId, requestParameters.from, requestParameters.to, requestParameters.hideClosed, options).then((request) => request(this.axios, this.basePath));
    }
}


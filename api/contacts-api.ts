/* tslint:disable */
/* eslint-disable */
/**
 * Dinero API
 * Welcome to our endpoint documentation. Please try to carefully read our general documentation found on <a href=\"https://developer.dinero.dk/\">developer.dinero.dk</a> for information regarding the authorization proces, status and errorcodes, FAQ, Postman tutorial etc. <br><br>Once authorized, you simply add \'Authorization: Bearer <access-token>\' to the header of your requests. On the page below, you\'ll find all our endpoints documented as well as possible, but if you have any questions regarding an endpoint, or an error in the description, please contact us on <a href=\"mailto:api@dinero.dk\">api@dinero.dk.</a> 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ContactCreateModel } from '../model';
// @ts-ignore
import type { ContactCreatedResult } from '../model';
// @ts-ignore
import type { ContactNoteCreateModel } from '../model';
// @ts-ignore
import type { ContactNoteReadModel } from '../model';
// @ts-ignore
import type { ContactNoteReadModelDineroCollection } from '../model';
// @ts-ignore
import type { ContactNoteUpdateModel } from '../model';
// @ts-ignore
import type { ContactReadModel } from '../model';
// @ts-ignore
import type { ContactReadModelDineroCollection } from '../model';
// @ts-ignore
import type { ContactUpdateModel } from '../model';
/**
 * ContactsApi - axios parameter creator
 * @export
 */
export const ContactsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve a list of notes for the contact ordered by NoteDate.
         * @summary List contact notes
         * @param {string} contactGuid Guid of the contact
         * @param {string} organizationId 
         * @param {string} [fields] A comma separated list of fields to include in the response.              Possible values are Id, NoteDate, Text, AuthorName, AuthorEmail, CreatedAt, UpdatedAt and DeletedAt.              Notice that it\&#39;s not case sensitive, the property name will be returned the way you request it.              If left empty it defaults to Id, NoteDate and Text.
         * @param {boolean} [deletedOnly] [Generic Filter Option] Only select deleted notes. If left empty, will default to false.
         * @param {number} [page] The 0-based page number
         * @param {number} [pageSize] The maximum number of items to include in a page. Maximum 1000.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdContactsContactGuidNotesGet: async (contactGuid: string, organizationId: string, fields?: string, deletedOnly?: boolean, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactGuid' is not null or undefined
            assertParamExists('v1OrganizationIdContactsContactGuidNotesGet', 'contactGuid', contactGuid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdContactsContactGuidNotesGet', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/contacts/{contactGuid}/notes`
                .replace(`{${"contactGuid"}}`, encodeURIComponent(String(contactGuid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (deletedOnly !== undefined) {
                localVarQueryParameter['deletedOnly'] = deletedOnly;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a note from the contact.
         * @summary Delete contact note
         * @param {string} contactGuid Guid of the contact
         * @param {string} noteGuid Guid of the note
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdContactsContactGuidNotesNoteGuidDelete: async (contactGuid: string, noteGuid: string, organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactGuid' is not null or undefined
            assertParamExists('v1OrganizationIdContactsContactGuidNotesNoteGuidDelete', 'contactGuid', contactGuid)
            // verify required parameter 'noteGuid' is not null or undefined
            assertParamExists('v1OrganizationIdContactsContactGuidNotesNoteGuidDelete', 'noteGuid', noteGuid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdContactsContactGuidNotesNoteGuidDelete', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/contacts/{contactGuid}/notes/{noteGuid}`
                .replace(`{${"contactGuid"}}`, encodeURIComponent(String(contactGuid)))
                .replace(`{${"noteGuid"}}`, encodeURIComponent(String(noteGuid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a specific note for a contact.
         * @summary Get contact note
         * @param {string} contactGuid Guid of the contact
         * @param {string} noteGuid Guid of the note
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdContactsContactGuidNotesNoteGuidGet: async (contactGuid: string, noteGuid: string, organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactGuid' is not null or undefined
            assertParamExists('v1OrganizationIdContactsContactGuidNotesNoteGuidGet', 'contactGuid', contactGuid)
            // verify required parameter 'noteGuid' is not null or undefined
            assertParamExists('v1OrganizationIdContactsContactGuidNotesNoteGuidGet', 'noteGuid', noteGuid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdContactsContactGuidNotesNoteGuidGet', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/contacts/{contactGuid}/notes/{noteGuid}`
                .replace(`{${"contactGuid"}}`, encodeURIComponent(String(contactGuid)))
                .replace(`{${"noteGuid"}}`, encodeURIComponent(String(noteGuid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing note. The new note will replace the old note, so incase you want to append something you must first fetch the original note and append the new message to it.
         * @summary Update contact note
         * @param {string} contactGuid Guid of the contact
         * @param {string} noteGuid Guid of the note
         * @param {string} organizationId 
         * @param {ContactNoteUpdateModel} [contactNoteUpdateModel] Content of the note to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdContactsContactGuidNotesNoteGuidPut: async (contactGuid: string, noteGuid: string, organizationId: string, contactNoteUpdateModel?: ContactNoteUpdateModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactGuid' is not null or undefined
            assertParamExists('v1OrganizationIdContactsContactGuidNotesNoteGuidPut', 'contactGuid', contactGuid)
            // verify required parameter 'noteGuid' is not null or undefined
            assertParamExists('v1OrganizationIdContactsContactGuidNotesNoteGuidPut', 'noteGuid', noteGuid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdContactsContactGuidNotesNoteGuidPut', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/contacts/{contactGuid}/notes/{noteGuid}`
                .replace(`{${"contactGuid"}}`, encodeURIComponent(String(contactGuid)))
                .replace(`{${"noteGuid"}}`, encodeURIComponent(String(noteGuid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(contactNoteUpdateModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a new note for the contact. A note is an internal tool for the user to add information about the customer for their own memory.
         * @summary Create contact note
         * @param {string} contactGuid 
         * @param {string} organizationId 
         * @param {ContactNoteCreateModel} [contactNoteCreateModel] Content of the new note
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdContactsContactGuidNotesPost: async (contactGuid: string, organizationId: string, contactNoteCreateModel?: ContactNoteCreateModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contactGuid' is not null or undefined
            assertParamExists('v1OrganizationIdContactsContactGuidNotesPost', 'contactGuid', contactGuid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdContactsContactGuidNotesPost', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/contacts/{contactGuid}/notes`
                .replace(`{${"contactGuid"}}`, encodeURIComponent(String(contactGuid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(contactNoteCreateModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of contacts for the organization. Take note of your different options here. You can filter what fields you want and you can query for specific contacts. When you want to create a new contact, it\'s a good idea to query to see if something similar already exists and use that instead.
         * @summary List contacts
         * @param {string} organizationId 
         * @param {string} [fields] A comma separated list of fields to include in the response.              Possible values are Name, ContactGuid, ExternalReference, IsPerson, Street, ZipCode, City, CountryKey, Phone, Email, Webpage, AttPerson,              VatNumber, EanNumber, PaymentConditionType, PaymentConditionNumberOfDays, IsMember, MemberNumber, CompanyStatus, VatRegionKey, CreatedAt, UpdatedAt and DeletedAt.              Notice that it\&#39;s not case sensitive, the property name will be returned the way you request it. If left empty it defaults to name and contactGuid (notice small start letter).
         * @param {string} [queryFilter] Filter specific for contacts. Filtering can be applied to following fields:              ExternalReference,Name, Email, VatNumber, EanNumber, IsPerson. See API documentation for filtering format. If left empty no filtering is applied.
         * @param {string} [changesSince] [Generic Filter Option] Only return contacts that was created, deleted or updated at or after given time.              If left empty, this filter will not be applied, and contacts will be returned regardless of change history.              The time must be UTC and in the format \&#39;YYYY-MM-DDTHH:mm:ssZ\&#39; example: \&#39;2015-08-18T06:36:22Z\&#39;.
         * @param {boolean} [deletedOnly] [Generic Filter Option] Only select deleted contacts. If left empty, will default to false.
         * @param {number} [page] The 0-based page number
         * @param {number} [pageSize] The maximum number of items to include in a page. Maximum 1000.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdContactsGet: async (organizationId: string, fields?: string, queryFilter?: string, changesSince?: string, deletedOnly?: boolean, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdContactsGet', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/contacts`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (queryFilter !== undefined) {
                localVarQueryParameter['queryFilter'] = queryFilter;
            }

            if (changesSince !== undefined) {
                localVarQueryParameter['changesSince'] = changesSince;
            }

            if (deletedOnly !== undefined) {
                localVarQueryParameter['deletedOnly'] = deletedOnly;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a contact from the given organization.
         * @summary Delete contact
         * @param {string} guid Unique identifier for the contact information
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdContactsGuidDelete: async (guid: string, organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('v1OrganizationIdContactsGuidDelete', 'guid', guid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdContactsGuidDelete', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/contacts/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves contact information for the specific contact with the given id. Here you will get more information than from the list. Useful in certain situations when the list doesn\'t provide enough information.
         * @summary Get Contact
         * @param {string} guid Unique identifier for the contact information
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdContactsGuidGet: async (guid: string, organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('v1OrganizationIdContactsGuidGet', 'guid', guid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdContactsGuidGet', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/contacts/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing contact. Do note that PUT requests will replace the original content as per REST standard, so include all information. If you want to add to existing data then first get the specific contact and the append and PUT the data all together.
         * @summary Update contact
         * @param {string} guid Unique identifier for the contact information
         * @param {string} organizationId 
         * @param {ContactUpdateModel} [contactUpdateModel] Content of the contact to update
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        v1OrganizationIdContactsGuidPut: async (guid: string, organizationId: string, contactUpdateModel?: ContactUpdateModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('v1OrganizationIdContactsGuidPut', 'guid', guid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdContactsGuidPut', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/contacts/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(contactUpdateModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Restore a deleted contact from the given organization. You can see if a contact is deleted by using the Get Contact endpoint. A deleted contact will have a deletedAt value.
         * @summary Restore deleted contact
         * @param {string} guid Unique identifier for the contact information
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdContactsGuidRestorePost: async (guid: string, organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('v1OrganizationIdContactsGuidRestorePost', 'guid', guid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdContactsGuidRestorePost', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/contacts/{guid}/restore`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a new contact to the organization. It\'s a good idea to query for a similar contact before creating a new one, by using the List contacts endpoint above. In the case of a company you can query to see if a similar company already exists as a contact, by using the queryFilter for VATnumber. For a privat contact you could check for instance name and/or email.
         * @summary Create contact
         * @param {string} organizationId 
         * @param {ContactCreateModel} [contactCreateModel] Content of the new contact
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdContactsPost: async (organizationId: string, contactCreateModel?: ContactCreateModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdContactsPost', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/contacts`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(contactCreateModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of contacts for the organization. Take note of your different options here. You can filter what fields you want and you can query for specific contacts. When you want to create a new contact, it\'s a good idea to query to see if something similar already exists and use that instead.
         * @summary List contacts v2
         * @param {string} organizationId 
         * @param {string} [fields] A comma separated list of fields to include in the response.              Possible values are Name, ContactGuid, ExternalReference, IsPerson, Street, ZipCode, City, CountryKey, Phone, Email, Webpage, AttPerson,              VatNumber, EanNumber, PaymentConditionType, PaymentConditionNumberOfDays, IsMember, MemberNumber, CompanyStatus, VatRegionKey, CreatedAt, UpdatedAt and DeletedAt.              Notice that it\&#39;s not case sensitive, the property name will be returned the way you request it. If left empty it defaults to name and contactGuid (notice small start letter).
         * @param {string} [queryFilter] Filter specific for contacts. Filtering can be applied to following fields:              ExternalReference,Name, Email, VatNumber, EanNumber, IsPerson. See API documentation for filtering format. If left empty no filtering is applied.
         * @param {string} [changesSince] [Generic Filter Option] Only return contacts that was created, deleted or updated at or after given time.              If left empty, this filter will not be applied, and contacts will be returned regardless of change history.              The time must be UTC and in the format \&#39;YYYY-MM-DDTHH:mm:ssZ\&#39; example: \&#39;2015-08-18T06:36:22Z\&#39;.
         * @param {boolean} [deletedOnly] [Generic Filter Option] Only select deleted contacts. If left empty, will fetch deleted and not deleted contacts
         * @param {number} [page] The 0-based page number
         * @param {number} [pageSize] The maximum number of items to include in a page. Maximum 1000.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2OrganizationIdContactsGet: async (organizationId: string, fields?: string, queryFilter?: string, changesSince?: string, deletedOnly?: boolean, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v2OrganizationIdContactsGet', 'organizationId', organizationId)
            const localVarPath = `/v2/{organizationId}/contacts`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (queryFilter !== undefined) {
                localVarQueryParameter['queryFilter'] = queryFilter;
            }

            if (changesSince !== undefined) {
                localVarQueryParameter['changesSince'] = changesSince;
            }

            if (deletedOnly !== undefined) {
                localVarQueryParameter['deletedOnly'] = deletedOnly;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing contact. Do note that PUT requests will replace the original content as per REST standard, so include all information. If you want to add to existing data then first get the specific contact and the append and PUT the data all together.
         * @summary Update contact
         * @param {string} guid Unique identifier for the contact information
         * @param {string} organizationId 
         * @param {ContactUpdateModel} [contactUpdateModel] Content of the contact to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2OrganizationIdContactsGuidPut: async (guid: string, organizationId: string, contactUpdateModel?: ContactUpdateModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('v2OrganizationIdContactsGuidPut', 'guid', guid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v2OrganizationIdContactsGuidPut', 'organizationId', organizationId)
            const localVarPath = `/v2/{organizationId}/contacts/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(contactUpdateModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContactsApi - functional programming interface
 * @export
 */
export const ContactsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContactsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve a list of notes for the contact ordered by NoteDate.
         * @summary List contact notes
         * @param {string} contactGuid Guid of the contact
         * @param {string} organizationId 
         * @param {string} [fields] A comma separated list of fields to include in the response.              Possible values are Id, NoteDate, Text, AuthorName, AuthorEmail, CreatedAt, UpdatedAt and DeletedAt.              Notice that it\&#39;s not case sensitive, the property name will be returned the way you request it.              If left empty it defaults to Id, NoteDate and Text.
         * @param {boolean} [deletedOnly] [Generic Filter Option] Only select deleted notes. If left empty, will default to false.
         * @param {number} [page] The 0-based page number
         * @param {number} [pageSize] The maximum number of items to include in a page. Maximum 1000.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdContactsContactGuidNotesGet(contactGuid: string, organizationId: string, fields?: string, deletedOnly?: boolean, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContactNoteReadModelDineroCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdContactsContactGuidNotesGet(contactGuid, organizationId, fields, deletedOnly, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContactsApi.v1OrganizationIdContactsContactGuidNotesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a note from the contact.
         * @summary Delete contact note
         * @param {string} contactGuid Guid of the contact
         * @param {string} noteGuid Guid of the note
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdContactsContactGuidNotesNoteGuidDelete(contactGuid: string, noteGuid: string, organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdContactsContactGuidNotesNoteGuidDelete(contactGuid, noteGuid, organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContactsApi.v1OrganizationIdContactsContactGuidNotesNoteGuidDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a specific note for a contact.
         * @summary Get contact note
         * @param {string} contactGuid Guid of the contact
         * @param {string} noteGuid Guid of the note
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdContactsContactGuidNotesNoteGuidGet(contactGuid: string, noteGuid: string, organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContactNoteReadModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdContactsContactGuidNotesNoteGuidGet(contactGuid, noteGuid, organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContactsApi.v1OrganizationIdContactsContactGuidNotesNoteGuidGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update an existing note. The new note will replace the old note, so incase you want to append something you must first fetch the original note and append the new message to it.
         * @summary Update contact note
         * @param {string} contactGuid Guid of the contact
         * @param {string} noteGuid Guid of the note
         * @param {string} organizationId 
         * @param {ContactNoteUpdateModel} [contactNoteUpdateModel] Content of the note to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdContactsContactGuidNotesNoteGuidPut(contactGuid: string, noteGuid: string, organizationId: string, contactNoteUpdateModel?: ContactNoteUpdateModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdContactsContactGuidNotesNoteGuidPut(contactGuid, noteGuid, organizationId, contactNoteUpdateModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContactsApi.v1OrganizationIdContactsContactGuidNotesNoteGuidPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Add a new note for the contact. A note is an internal tool for the user to add information about the customer for their own memory.
         * @summary Create contact note
         * @param {string} contactGuid 
         * @param {string} organizationId 
         * @param {ContactNoteCreateModel} [contactNoteCreateModel] Content of the new note
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdContactsContactGuidNotesPost(contactGuid: string, organizationId: string, contactNoteCreateModel?: ContactNoteCreateModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContactCreatedResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdContactsContactGuidNotesPost(contactGuid, organizationId, contactNoteCreateModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContactsApi.v1OrganizationIdContactsContactGuidNotesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a list of contacts for the organization. Take note of your different options here. You can filter what fields you want and you can query for specific contacts. When you want to create a new contact, it\'s a good idea to query to see if something similar already exists and use that instead.
         * @summary List contacts
         * @param {string} organizationId 
         * @param {string} [fields] A comma separated list of fields to include in the response.              Possible values are Name, ContactGuid, ExternalReference, IsPerson, Street, ZipCode, City, CountryKey, Phone, Email, Webpage, AttPerson,              VatNumber, EanNumber, PaymentConditionType, PaymentConditionNumberOfDays, IsMember, MemberNumber, CompanyStatus, VatRegionKey, CreatedAt, UpdatedAt and DeletedAt.              Notice that it\&#39;s not case sensitive, the property name will be returned the way you request it. If left empty it defaults to name and contactGuid (notice small start letter).
         * @param {string} [queryFilter] Filter specific for contacts. Filtering can be applied to following fields:              ExternalReference,Name, Email, VatNumber, EanNumber, IsPerson. See API documentation for filtering format. If left empty no filtering is applied.
         * @param {string} [changesSince] [Generic Filter Option] Only return contacts that was created, deleted or updated at or after given time.              If left empty, this filter will not be applied, and contacts will be returned regardless of change history.              The time must be UTC and in the format \&#39;YYYY-MM-DDTHH:mm:ssZ\&#39; example: \&#39;2015-08-18T06:36:22Z\&#39;.
         * @param {boolean} [deletedOnly] [Generic Filter Option] Only select deleted contacts. If left empty, will default to false.
         * @param {number} [page] The 0-based page number
         * @param {number} [pageSize] The maximum number of items to include in a page. Maximum 1000.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdContactsGet(organizationId: string, fields?: string, queryFilter?: string, changesSince?: string, deletedOnly?: boolean, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContactReadModelDineroCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdContactsGet(organizationId, fields, queryFilter, changesSince, deletedOnly, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContactsApi.v1OrganizationIdContactsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a contact from the given organization.
         * @summary Delete contact
         * @param {string} guid Unique identifier for the contact information
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdContactsGuidDelete(guid: string, organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdContactsGuidDelete(guid, organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContactsApi.v1OrganizationIdContactsGuidDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves contact information for the specific contact with the given id. Here you will get more information than from the list. Useful in certain situations when the list doesn\'t provide enough information.
         * @summary Get Contact
         * @param {string} guid Unique identifier for the contact information
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdContactsGuidGet(guid: string, organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContactReadModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdContactsGuidGet(guid, organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContactsApi.v1OrganizationIdContactsGuidGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update an existing contact. Do note that PUT requests will replace the original content as per REST standard, so include all information. If you want to add to existing data then first get the specific contact and the append and PUT the data all together.
         * @summary Update contact
         * @param {string} guid Unique identifier for the contact information
         * @param {string} organizationId 
         * @param {ContactUpdateModel} [contactUpdateModel] Content of the contact to update
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async v1OrganizationIdContactsGuidPut(guid: string, organizationId: string, contactUpdateModel?: ContactUpdateModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdContactsGuidPut(guid, organizationId, contactUpdateModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContactsApi.v1OrganizationIdContactsGuidPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Restore a deleted contact from the given organization. You can see if a contact is deleted by using the Get Contact endpoint. A deleted contact will have a deletedAt value.
         * @summary Restore deleted contact
         * @param {string} guid Unique identifier for the contact information
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdContactsGuidRestorePost(guid: string, organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdContactsGuidRestorePost(guid, organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContactsApi.v1OrganizationIdContactsGuidRestorePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Add a new contact to the organization. It\'s a good idea to query for a similar contact before creating a new one, by using the List contacts endpoint above. In the case of a company you can query to see if a similar company already exists as a contact, by using the queryFilter for VATnumber. For a privat contact you could check for instance name and/or email.
         * @summary Create contact
         * @param {string} organizationId 
         * @param {ContactCreateModel} [contactCreateModel] Content of the new contact
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdContactsPost(organizationId: string, contactCreateModel?: ContactCreateModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContactCreatedResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdContactsPost(organizationId, contactCreateModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContactsApi.v1OrganizationIdContactsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a list of contacts for the organization. Take note of your different options here. You can filter what fields you want and you can query for specific contacts. When you want to create a new contact, it\'s a good idea to query to see if something similar already exists and use that instead.
         * @summary List contacts v2
         * @param {string} organizationId 
         * @param {string} [fields] A comma separated list of fields to include in the response.              Possible values are Name, ContactGuid, ExternalReference, IsPerson, Street, ZipCode, City, CountryKey, Phone, Email, Webpage, AttPerson,              VatNumber, EanNumber, PaymentConditionType, PaymentConditionNumberOfDays, IsMember, MemberNumber, CompanyStatus, VatRegionKey, CreatedAt, UpdatedAt and DeletedAt.              Notice that it\&#39;s not case sensitive, the property name will be returned the way you request it. If left empty it defaults to name and contactGuid (notice small start letter).
         * @param {string} [queryFilter] Filter specific for contacts. Filtering can be applied to following fields:              ExternalReference,Name, Email, VatNumber, EanNumber, IsPerson. See API documentation for filtering format. If left empty no filtering is applied.
         * @param {string} [changesSince] [Generic Filter Option] Only return contacts that was created, deleted or updated at or after given time.              If left empty, this filter will not be applied, and contacts will be returned regardless of change history.              The time must be UTC and in the format \&#39;YYYY-MM-DDTHH:mm:ssZ\&#39; example: \&#39;2015-08-18T06:36:22Z\&#39;.
         * @param {boolean} [deletedOnly] [Generic Filter Option] Only select deleted contacts. If left empty, will fetch deleted and not deleted contacts
         * @param {number} [page] The 0-based page number
         * @param {number} [pageSize] The maximum number of items to include in a page. Maximum 1000.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2OrganizationIdContactsGet(organizationId: string, fields?: string, queryFilter?: string, changesSince?: string, deletedOnly?: boolean, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContactReadModelDineroCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2OrganizationIdContactsGet(organizationId, fields, queryFilter, changesSince, deletedOnly, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContactsApi.v2OrganizationIdContactsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update an existing contact. Do note that PUT requests will replace the original content as per REST standard, so include all information. If you want to add to existing data then first get the specific contact and the append and PUT the data all together.
         * @summary Update contact
         * @param {string} guid Unique identifier for the contact information
         * @param {string} organizationId 
         * @param {ContactUpdateModel} [contactUpdateModel] Content of the contact to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v2OrganizationIdContactsGuidPut(guid: string, organizationId: string, contactUpdateModel?: ContactUpdateModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v2OrganizationIdContactsGuidPut(guid, organizationId, contactUpdateModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ContactsApi.v2OrganizationIdContactsGuidPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ContactsApi - factory interface
 * @export
 */
export const ContactsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContactsApiFp(configuration)
    return {
        /**
         * Retrieve a list of notes for the contact ordered by NoteDate.
         * @summary List contact notes
         * @param {ContactsApiV1OrganizationIdContactsContactGuidNotesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdContactsContactGuidNotesGet(requestParameters: ContactsApiV1OrganizationIdContactsContactGuidNotesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ContactNoteReadModelDineroCollection> {
            return localVarFp.v1OrganizationIdContactsContactGuidNotesGet(requestParameters.contactGuid, requestParameters.organizationId, requestParameters.fields, requestParameters.deletedOnly, requestParameters.page, requestParameters.pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a note from the contact.
         * @summary Delete contact note
         * @param {ContactsApiV1OrganizationIdContactsContactGuidNotesNoteGuidDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdContactsContactGuidNotesNoteGuidDelete(requestParameters: ContactsApiV1OrganizationIdContactsContactGuidNotesNoteGuidDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1OrganizationIdContactsContactGuidNotesNoteGuidDelete(requestParameters.contactGuid, requestParameters.noteGuid, requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a specific note for a contact.
         * @summary Get contact note
         * @param {ContactsApiV1OrganizationIdContactsContactGuidNotesNoteGuidGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdContactsContactGuidNotesNoteGuidGet(requestParameters: ContactsApiV1OrganizationIdContactsContactGuidNotesNoteGuidGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ContactNoteReadModel> {
            return localVarFp.v1OrganizationIdContactsContactGuidNotesNoteGuidGet(requestParameters.contactGuid, requestParameters.noteGuid, requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing note. The new note will replace the old note, so incase you want to append something you must first fetch the original note and append the new message to it.
         * @summary Update contact note
         * @param {ContactsApiV1OrganizationIdContactsContactGuidNotesNoteGuidPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdContactsContactGuidNotesNoteGuidPut(requestParameters: ContactsApiV1OrganizationIdContactsContactGuidNotesNoteGuidPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1OrganizationIdContactsContactGuidNotesNoteGuidPut(requestParameters.contactGuid, requestParameters.noteGuid, requestParameters.organizationId, requestParameters.contactNoteUpdateModel, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a new note for the contact. A note is an internal tool for the user to add information about the customer for their own memory.
         * @summary Create contact note
         * @param {ContactsApiV1OrganizationIdContactsContactGuidNotesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdContactsContactGuidNotesPost(requestParameters: ContactsApiV1OrganizationIdContactsContactGuidNotesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ContactCreatedResult> {
            return localVarFp.v1OrganizationIdContactsContactGuidNotesPost(requestParameters.contactGuid, requestParameters.organizationId, requestParameters.contactNoteCreateModel, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of contacts for the organization. Take note of your different options here. You can filter what fields you want and you can query for specific contacts. When you want to create a new contact, it\'s a good idea to query to see if something similar already exists and use that instead.
         * @summary List contacts
         * @param {ContactsApiV1OrganizationIdContactsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdContactsGet(requestParameters: ContactsApiV1OrganizationIdContactsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ContactReadModelDineroCollection> {
            return localVarFp.v1OrganizationIdContactsGet(requestParameters.organizationId, requestParameters.fields, requestParameters.queryFilter, requestParameters.changesSince, requestParameters.deletedOnly, requestParameters.page, requestParameters.pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a contact from the given organization.
         * @summary Delete contact
         * @param {ContactsApiV1OrganizationIdContactsGuidDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdContactsGuidDelete(requestParameters: ContactsApiV1OrganizationIdContactsGuidDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1OrganizationIdContactsGuidDelete(requestParameters.guid, requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves contact information for the specific contact with the given id. Here you will get more information than from the list. Useful in certain situations when the list doesn\'t provide enough information.
         * @summary Get Contact
         * @param {ContactsApiV1OrganizationIdContactsGuidGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdContactsGuidGet(requestParameters: ContactsApiV1OrganizationIdContactsGuidGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ContactReadModel> {
            return localVarFp.v1OrganizationIdContactsGuidGet(requestParameters.guid, requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing contact. Do note that PUT requests will replace the original content as per REST standard, so include all information. If you want to add to existing data then first get the specific contact and the append and PUT the data all together.
         * @summary Update contact
         * @param {ContactsApiV1OrganizationIdContactsGuidPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        v1OrganizationIdContactsGuidPut(requestParameters: ContactsApiV1OrganizationIdContactsGuidPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1OrganizationIdContactsGuidPut(requestParameters.guid, requestParameters.organizationId, requestParameters.contactUpdateModel, options).then((request) => request(axios, basePath));
        },
        /**
         * Restore a deleted contact from the given organization. You can see if a contact is deleted by using the Get Contact endpoint. A deleted contact will have a deletedAt value.
         * @summary Restore deleted contact
         * @param {ContactsApiV1OrganizationIdContactsGuidRestorePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdContactsGuidRestorePost(requestParameters: ContactsApiV1OrganizationIdContactsGuidRestorePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1OrganizationIdContactsGuidRestorePost(requestParameters.guid, requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a new contact to the organization. It\'s a good idea to query for a similar contact before creating a new one, by using the List contacts endpoint above. In the case of a company you can query to see if a similar company already exists as a contact, by using the queryFilter for VATnumber. For a privat contact you could check for instance name and/or email.
         * @summary Create contact
         * @param {ContactsApiV1OrganizationIdContactsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdContactsPost(requestParameters: ContactsApiV1OrganizationIdContactsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ContactCreatedResult> {
            return localVarFp.v1OrganizationIdContactsPost(requestParameters.organizationId, requestParameters.contactCreateModel, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of contacts for the organization. Take note of your different options here. You can filter what fields you want and you can query for specific contacts. When you want to create a new contact, it\'s a good idea to query to see if something similar already exists and use that instead.
         * @summary List contacts v2
         * @param {ContactsApiV2OrganizationIdContactsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2OrganizationIdContactsGet(requestParameters: ContactsApiV2OrganizationIdContactsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ContactReadModelDineroCollection> {
            return localVarFp.v2OrganizationIdContactsGet(requestParameters.organizationId, requestParameters.fields, requestParameters.queryFilter, requestParameters.changesSince, requestParameters.deletedOnly, requestParameters.page, requestParameters.pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing contact. Do note that PUT requests will replace the original content as per REST standard, so include all information. If you want to add to existing data then first get the specific contact and the append and PUT the data all together.
         * @summary Update contact
         * @param {ContactsApiV2OrganizationIdContactsGuidPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v2OrganizationIdContactsGuidPut(requestParameters: ContactsApiV2OrganizationIdContactsGuidPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v2OrganizationIdContactsGuidPut(requestParameters.guid, requestParameters.organizationId, requestParameters.contactUpdateModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for v1OrganizationIdContactsContactGuidNotesGet operation in ContactsApi.
 * @export
 * @interface ContactsApiV1OrganizationIdContactsContactGuidNotesGetRequest
 */
export interface ContactsApiV1OrganizationIdContactsContactGuidNotesGetRequest {
    /**
     * Guid of the contact
     * @type {string}
     * @memberof ContactsApiV1OrganizationIdContactsContactGuidNotesGet
     */
    readonly contactGuid: string

    /**
     * 
     * @type {string}
     * @memberof ContactsApiV1OrganizationIdContactsContactGuidNotesGet
     */
    readonly organizationId: string

    /**
     * A comma separated list of fields to include in the response.              Possible values are Id, NoteDate, Text, AuthorName, AuthorEmail, CreatedAt, UpdatedAt and DeletedAt.              Notice that it\&#39;s not case sensitive, the property name will be returned the way you request it.              If left empty it defaults to Id, NoteDate and Text.
     * @type {string}
     * @memberof ContactsApiV1OrganizationIdContactsContactGuidNotesGet
     */
    readonly fields?: string

    /**
     * [Generic Filter Option] Only select deleted notes. If left empty, will default to false.
     * @type {boolean}
     * @memberof ContactsApiV1OrganizationIdContactsContactGuidNotesGet
     */
    readonly deletedOnly?: boolean

    /**
     * The 0-based page number
     * @type {number}
     * @memberof ContactsApiV1OrganizationIdContactsContactGuidNotesGet
     */
    readonly page?: number

    /**
     * The maximum number of items to include in a page. Maximum 1000.
     * @type {number}
     * @memberof ContactsApiV1OrganizationIdContactsContactGuidNotesGet
     */
    readonly pageSize?: number
}

/**
 * Request parameters for v1OrganizationIdContactsContactGuidNotesNoteGuidDelete operation in ContactsApi.
 * @export
 * @interface ContactsApiV1OrganizationIdContactsContactGuidNotesNoteGuidDeleteRequest
 */
export interface ContactsApiV1OrganizationIdContactsContactGuidNotesNoteGuidDeleteRequest {
    /**
     * Guid of the contact
     * @type {string}
     * @memberof ContactsApiV1OrganizationIdContactsContactGuidNotesNoteGuidDelete
     */
    readonly contactGuid: string

    /**
     * Guid of the note
     * @type {string}
     * @memberof ContactsApiV1OrganizationIdContactsContactGuidNotesNoteGuidDelete
     */
    readonly noteGuid: string

    /**
     * 
     * @type {string}
     * @memberof ContactsApiV1OrganizationIdContactsContactGuidNotesNoteGuidDelete
     */
    readonly organizationId: string
}

/**
 * Request parameters for v1OrganizationIdContactsContactGuidNotesNoteGuidGet operation in ContactsApi.
 * @export
 * @interface ContactsApiV1OrganizationIdContactsContactGuidNotesNoteGuidGetRequest
 */
export interface ContactsApiV1OrganizationIdContactsContactGuidNotesNoteGuidGetRequest {
    /**
     * Guid of the contact
     * @type {string}
     * @memberof ContactsApiV1OrganizationIdContactsContactGuidNotesNoteGuidGet
     */
    readonly contactGuid: string

    /**
     * Guid of the note
     * @type {string}
     * @memberof ContactsApiV1OrganizationIdContactsContactGuidNotesNoteGuidGet
     */
    readonly noteGuid: string

    /**
     * 
     * @type {string}
     * @memberof ContactsApiV1OrganizationIdContactsContactGuidNotesNoteGuidGet
     */
    readonly organizationId: string
}

/**
 * Request parameters for v1OrganizationIdContactsContactGuidNotesNoteGuidPut operation in ContactsApi.
 * @export
 * @interface ContactsApiV1OrganizationIdContactsContactGuidNotesNoteGuidPutRequest
 */
export interface ContactsApiV1OrganizationIdContactsContactGuidNotesNoteGuidPutRequest {
    /**
     * Guid of the contact
     * @type {string}
     * @memberof ContactsApiV1OrganizationIdContactsContactGuidNotesNoteGuidPut
     */
    readonly contactGuid: string

    /**
     * Guid of the note
     * @type {string}
     * @memberof ContactsApiV1OrganizationIdContactsContactGuidNotesNoteGuidPut
     */
    readonly noteGuid: string

    /**
     * 
     * @type {string}
     * @memberof ContactsApiV1OrganizationIdContactsContactGuidNotesNoteGuidPut
     */
    readonly organizationId: string

    /**
     * Content of the note to update
     * @type {ContactNoteUpdateModel}
     * @memberof ContactsApiV1OrganizationIdContactsContactGuidNotesNoteGuidPut
     */
    readonly contactNoteUpdateModel?: ContactNoteUpdateModel
}

/**
 * Request parameters for v1OrganizationIdContactsContactGuidNotesPost operation in ContactsApi.
 * @export
 * @interface ContactsApiV1OrganizationIdContactsContactGuidNotesPostRequest
 */
export interface ContactsApiV1OrganizationIdContactsContactGuidNotesPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ContactsApiV1OrganizationIdContactsContactGuidNotesPost
     */
    readonly contactGuid: string

    /**
     * 
     * @type {string}
     * @memberof ContactsApiV1OrganizationIdContactsContactGuidNotesPost
     */
    readonly organizationId: string

    /**
     * Content of the new note
     * @type {ContactNoteCreateModel}
     * @memberof ContactsApiV1OrganizationIdContactsContactGuidNotesPost
     */
    readonly contactNoteCreateModel?: ContactNoteCreateModel
}

/**
 * Request parameters for v1OrganizationIdContactsGet operation in ContactsApi.
 * @export
 * @interface ContactsApiV1OrganizationIdContactsGetRequest
 */
export interface ContactsApiV1OrganizationIdContactsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ContactsApiV1OrganizationIdContactsGet
     */
    readonly organizationId: string

    /**
     * A comma separated list of fields to include in the response.              Possible values are Name, ContactGuid, ExternalReference, IsPerson, Street, ZipCode, City, CountryKey, Phone, Email, Webpage, AttPerson,              VatNumber, EanNumber, PaymentConditionType, PaymentConditionNumberOfDays, IsMember, MemberNumber, CompanyStatus, VatRegionKey, CreatedAt, UpdatedAt and DeletedAt.              Notice that it\&#39;s not case sensitive, the property name will be returned the way you request it. If left empty it defaults to name and contactGuid (notice small start letter).
     * @type {string}
     * @memberof ContactsApiV1OrganizationIdContactsGet
     */
    readonly fields?: string

    /**
     * Filter specific for contacts. Filtering can be applied to following fields:              ExternalReference,Name, Email, VatNumber, EanNumber, IsPerson. See API documentation for filtering format. If left empty no filtering is applied.
     * @type {string}
     * @memberof ContactsApiV1OrganizationIdContactsGet
     */
    readonly queryFilter?: string

    /**
     * [Generic Filter Option] Only return contacts that was created, deleted or updated at or after given time.              If left empty, this filter will not be applied, and contacts will be returned regardless of change history.              The time must be UTC and in the format \&#39;YYYY-MM-DDTHH:mm:ssZ\&#39; example: \&#39;2015-08-18T06:36:22Z\&#39;.
     * @type {string}
     * @memberof ContactsApiV1OrganizationIdContactsGet
     */
    readonly changesSince?: string

    /**
     * [Generic Filter Option] Only select deleted contacts. If left empty, will default to false.
     * @type {boolean}
     * @memberof ContactsApiV1OrganizationIdContactsGet
     */
    readonly deletedOnly?: boolean

    /**
     * The 0-based page number
     * @type {number}
     * @memberof ContactsApiV1OrganizationIdContactsGet
     */
    readonly page?: number

    /**
     * The maximum number of items to include in a page. Maximum 1000.
     * @type {number}
     * @memberof ContactsApiV1OrganizationIdContactsGet
     */
    readonly pageSize?: number
}

/**
 * Request parameters for v1OrganizationIdContactsGuidDelete operation in ContactsApi.
 * @export
 * @interface ContactsApiV1OrganizationIdContactsGuidDeleteRequest
 */
export interface ContactsApiV1OrganizationIdContactsGuidDeleteRequest {
    /**
     * Unique identifier for the contact information
     * @type {string}
     * @memberof ContactsApiV1OrganizationIdContactsGuidDelete
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof ContactsApiV1OrganizationIdContactsGuidDelete
     */
    readonly organizationId: string
}

/**
 * Request parameters for v1OrganizationIdContactsGuidGet operation in ContactsApi.
 * @export
 * @interface ContactsApiV1OrganizationIdContactsGuidGetRequest
 */
export interface ContactsApiV1OrganizationIdContactsGuidGetRequest {
    /**
     * Unique identifier for the contact information
     * @type {string}
     * @memberof ContactsApiV1OrganizationIdContactsGuidGet
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof ContactsApiV1OrganizationIdContactsGuidGet
     */
    readonly organizationId: string
}

/**
 * Request parameters for v1OrganizationIdContactsGuidPut operation in ContactsApi.
 * @export
 * @interface ContactsApiV1OrganizationIdContactsGuidPutRequest
 */
export interface ContactsApiV1OrganizationIdContactsGuidPutRequest {
    /**
     * Unique identifier for the contact information
     * @type {string}
     * @memberof ContactsApiV1OrganizationIdContactsGuidPut
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof ContactsApiV1OrganizationIdContactsGuidPut
     */
    readonly organizationId: string

    /**
     * Content of the contact to update
     * @type {ContactUpdateModel}
     * @memberof ContactsApiV1OrganizationIdContactsGuidPut
     */
    readonly contactUpdateModel?: ContactUpdateModel
}

/**
 * Request parameters for v1OrganizationIdContactsGuidRestorePost operation in ContactsApi.
 * @export
 * @interface ContactsApiV1OrganizationIdContactsGuidRestorePostRequest
 */
export interface ContactsApiV1OrganizationIdContactsGuidRestorePostRequest {
    /**
     * Unique identifier for the contact information
     * @type {string}
     * @memberof ContactsApiV1OrganizationIdContactsGuidRestorePost
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof ContactsApiV1OrganizationIdContactsGuidRestorePost
     */
    readonly organizationId: string
}

/**
 * Request parameters for v1OrganizationIdContactsPost operation in ContactsApi.
 * @export
 * @interface ContactsApiV1OrganizationIdContactsPostRequest
 */
export interface ContactsApiV1OrganizationIdContactsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ContactsApiV1OrganizationIdContactsPost
     */
    readonly organizationId: string

    /**
     * Content of the new contact
     * @type {ContactCreateModel}
     * @memberof ContactsApiV1OrganizationIdContactsPost
     */
    readonly contactCreateModel?: ContactCreateModel
}

/**
 * Request parameters for v2OrganizationIdContactsGet operation in ContactsApi.
 * @export
 * @interface ContactsApiV2OrganizationIdContactsGetRequest
 */
export interface ContactsApiV2OrganizationIdContactsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ContactsApiV2OrganizationIdContactsGet
     */
    readonly organizationId: string

    /**
     * A comma separated list of fields to include in the response.              Possible values are Name, ContactGuid, ExternalReference, IsPerson, Street, ZipCode, City, CountryKey, Phone, Email, Webpage, AttPerson,              VatNumber, EanNumber, PaymentConditionType, PaymentConditionNumberOfDays, IsMember, MemberNumber, CompanyStatus, VatRegionKey, CreatedAt, UpdatedAt and DeletedAt.              Notice that it\&#39;s not case sensitive, the property name will be returned the way you request it. If left empty it defaults to name and contactGuid (notice small start letter).
     * @type {string}
     * @memberof ContactsApiV2OrganizationIdContactsGet
     */
    readonly fields?: string

    /**
     * Filter specific for contacts. Filtering can be applied to following fields:              ExternalReference,Name, Email, VatNumber, EanNumber, IsPerson. See API documentation for filtering format. If left empty no filtering is applied.
     * @type {string}
     * @memberof ContactsApiV2OrganizationIdContactsGet
     */
    readonly queryFilter?: string

    /**
     * [Generic Filter Option] Only return contacts that was created, deleted or updated at or after given time.              If left empty, this filter will not be applied, and contacts will be returned regardless of change history.              The time must be UTC and in the format \&#39;YYYY-MM-DDTHH:mm:ssZ\&#39; example: \&#39;2015-08-18T06:36:22Z\&#39;.
     * @type {string}
     * @memberof ContactsApiV2OrganizationIdContactsGet
     */
    readonly changesSince?: string

    /**
     * [Generic Filter Option] Only select deleted contacts. If left empty, will fetch deleted and not deleted contacts
     * @type {boolean}
     * @memberof ContactsApiV2OrganizationIdContactsGet
     */
    readonly deletedOnly?: boolean

    /**
     * The 0-based page number
     * @type {number}
     * @memberof ContactsApiV2OrganizationIdContactsGet
     */
    readonly page?: number

    /**
     * The maximum number of items to include in a page. Maximum 1000.
     * @type {number}
     * @memberof ContactsApiV2OrganizationIdContactsGet
     */
    readonly pageSize?: number
}

/**
 * Request parameters for v2OrganizationIdContactsGuidPut operation in ContactsApi.
 * @export
 * @interface ContactsApiV2OrganizationIdContactsGuidPutRequest
 */
export interface ContactsApiV2OrganizationIdContactsGuidPutRequest {
    /**
     * Unique identifier for the contact information
     * @type {string}
     * @memberof ContactsApiV2OrganizationIdContactsGuidPut
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof ContactsApiV2OrganizationIdContactsGuidPut
     */
    readonly organizationId: string

    /**
     * Content of the contact to update
     * @type {ContactUpdateModel}
     * @memberof ContactsApiV2OrganizationIdContactsGuidPut
     */
    readonly contactUpdateModel?: ContactUpdateModel
}

/**
 * ContactsApi - object-oriented interface
 * @export
 * @class ContactsApi
 * @extends {BaseAPI}
 */
export class ContactsApi extends BaseAPI {
    /**
     * Retrieve a list of notes for the contact ordered by NoteDate.
     * @summary List contact notes
     * @param {ContactsApiV1OrganizationIdContactsContactGuidNotesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApi
     */
    public v1OrganizationIdContactsContactGuidNotesGet(requestParameters: ContactsApiV1OrganizationIdContactsContactGuidNotesGetRequest, options?: RawAxiosRequestConfig) {
        return ContactsApiFp(this.configuration).v1OrganizationIdContactsContactGuidNotesGet(requestParameters.contactGuid, requestParameters.organizationId, requestParameters.fields, requestParameters.deletedOnly, requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a note from the contact.
     * @summary Delete contact note
     * @param {ContactsApiV1OrganizationIdContactsContactGuidNotesNoteGuidDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApi
     */
    public v1OrganizationIdContactsContactGuidNotesNoteGuidDelete(requestParameters: ContactsApiV1OrganizationIdContactsContactGuidNotesNoteGuidDeleteRequest, options?: RawAxiosRequestConfig) {
        return ContactsApiFp(this.configuration).v1OrganizationIdContactsContactGuidNotesNoteGuidDelete(requestParameters.contactGuid, requestParameters.noteGuid, requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a specific note for a contact.
     * @summary Get contact note
     * @param {ContactsApiV1OrganizationIdContactsContactGuidNotesNoteGuidGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApi
     */
    public v1OrganizationIdContactsContactGuidNotesNoteGuidGet(requestParameters: ContactsApiV1OrganizationIdContactsContactGuidNotesNoteGuidGetRequest, options?: RawAxiosRequestConfig) {
        return ContactsApiFp(this.configuration).v1OrganizationIdContactsContactGuidNotesNoteGuidGet(requestParameters.contactGuid, requestParameters.noteGuid, requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an existing note. The new note will replace the old note, so incase you want to append something you must first fetch the original note and append the new message to it.
     * @summary Update contact note
     * @param {ContactsApiV1OrganizationIdContactsContactGuidNotesNoteGuidPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApi
     */
    public v1OrganizationIdContactsContactGuidNotesNoteGuidPut(requestParameters: ContactsApiV1OrganizationIdContactsContactGuidNotesNoteGuidPutRequest, options?: RawAxiosRequestConfig) {
        return ContactsApiFp(this.configuration).v1OrganizationIdContactsContactGuidNotesNoteGuidPut(requestParameters.contactGuid, requestParameters.noteGuid, requestParameters.organizationId, requestParameters.contactNoteUpdateModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a new note for the contact. A note is an internal tool for the user to add information about the customer for their own memory.
     * @summary Create contact note
     * @param {ContactsApiV1OrganizationIdContactsContactGuidNotesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApi
     */
    public v1OrganizationIdContactsContactGuidNotesPost(requestParameters: ContactsApiV1OrganizationIdContactsContactGuidNotesPostRequest, options?: RawAxiosRequestConfig) {
        return ContactsApiFp(this.configuration).v1OrganizationIdContactsContactGuidNotesPost(requestParameters.contactGuid, requestParameters.organizationId, requestParameters.contactNoteCreateModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of contacts for the organization. Take note of your different options here. You can filter what fields you want and you can query for specific contacts. When you want to create a new contact, it\'s a good idea to query to see if something similar already exists and use that instead.
     * @summary List contacts
     * @param {ContactsApiV1OrganizationIdContactsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApi
     */
    public v1OrganizationIdContactsGet(requestParameters: ContactsApiV1OrganizationIdContactsGetRequest, options?: RawAxiosRequestConfig) {
        return ContactsApiFp(this.configuration).v1OrganizationIdContactsGet(requestParameters.organizationId, requestParameters.fields, requestParameters.queryFilter, requestParameters.changesSince, requestParameters.deletedOnly, requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a contact from the given organization.
     * @summary Delete contact
     * @param {ContactsApiV1OrganizationIdContactsGuidDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApi
     */
    public v1OrganizationIdContactsGuidDelete(requestParameters: ContactsApiV1OrganizationIdContactsGuidDeleteRequest, options?: RawAxiosRequestConfig) {
        return ContactsApiFp(this.configuration).v1OrganizationIdContactsGuidDelete(requestParameters.guid, requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves contact information for the specific contact with the given id. Here you will get more information than from the list. Useful in certain situations when the list doesn\'t provide enough information.
     * @summary Get Contact
     * @param {ContactsApiV1OrganizationIdContactsGuidGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApi
     */
    public v1OrganizationIdContactsGuidGet(requestParameters: ContactsApiV1OrganizationIdContactsGuidGetRequest, options?: RawAxiosRequestConfig) {
        return ContactsApiFp(this.configuration).v1OrganizationIdContactsGuidGet(requestParameters.guid, requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an existing contact. Do note that PUT requests will replace the original content as per REST standard, so include all information. If you want to add to existing data then first get the specific contact and the append and PUT the data all together.
     * @summary Update contact
     * @param {ContactsApiV1OrganizationIdContactsGuidPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ContactsApi
     */
    public v1OrganizationIdContactsGuidPut(requestParameters: ContactsApiV1OrganizationIdContactsGuidPutRequest, options?: RawAxiosRequestConfig) {
        return ContactsApiFp(this.configuration).v1OrganizationIdContactsGuidPut(requestParameters.guid, requestParameters.organizationId, requestParameters.contactUpdateModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Restore a deleted contact from the given organization. You can see if a contact is deleted by using the Get Contact endpoint. A deleted contact will have a deletedAt value.
     * @summary Restore deleted contact
     * @param {ContactsApiV1OrganizationIdContactsGuidRestorePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApi
     */
    public v1OrganizationIdContactsGuidRestorePost(requestParameters: ContactsApiV1OrganizationIdContactsGuidRestorePostRequest, options?: RawAxiosRequestConfig) {
        return ContactsApiFp(this.configuration).v1OrganizationIdContactsGuidRestorePost(requestParameters.guid, requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a new contact to the organization. It\'s a good idea to query for a similar contact before creating a new one, by using the List contacts endpoint above. In the case of a company you can query to see if a similar company already exists as a contact, by using the queryFilter for VATnumber. For a privat contact you could check for instance name and/or email.
     * @summary Create contact
     * @param {ContactsApiV1OrganizationIdContactsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApi
     */
    public v1OrganizationIdContactsPost(requestParameters: ContactsApiV1OrganizationIdContactsPostRequest, options?: RawAxiosRequestConfig) {
        return ContactsApiFp(this.configuration).v1OrganizationIdContactsPost(requestParameters.organizationId, requestParameters.contactCreateModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of contacts for the organization. Take note of your different options here. You can filter what fields you want and you can query for specific contacts. When you want to create a new contact, it\'s a good idea to query to see if something similar already exists and use that instead.
     * @summary List contacts v2
     * @param {ContactsApiV2OrganizationIdContactsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApi
     */
    public v2OrganizationIdContactsGet(requestParameters: ContactsApiV2OrganizationIdContactsGetRequest, options?: RawAxiosRequestConfig) {
        return ContactsApiFp(this.configuration).v2OrganizationIdContactsGet(requestParameters.organizationId, requestParameters.fields, requestParameters.queryFilter, requestParameters.changesSince, requestParameters.deletedOnly, requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an existing contact. Do note that PUT requests will replace the original content as per REST standard, so include all information. If you want to add to existing data then first get the specific contact and the append and PUT the data all together.
     * @summary Update contact
     * @param {ContactsApiV2OrganizationIdContactsGuidPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApi
     */
    public v2OrganizationIdContactsGuidPut(requestParameters: ContactsApiV2OrganizationIdContactsGuidPutRequest, options?: RawAxiosRequestConfig) {
        return ContactsApiFp(this.configuration).v2OrganizationIdContactsGuidPut(requestParameters.guid, requestParameters.organizationId, requestParameters.contactUpdateModel, options).then((request) => request(this.axios, this.basePath));
    }
}


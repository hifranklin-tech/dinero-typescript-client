/* tslint:disable */
/* eslint-disable */
/**
 * Dinero API
 * Welcome to our endpoint documentation. Please try to carefully read our general documentation found on <a href=\"https://developer.dinero.dk/\">developer.dinero.dk</a> for information regarding the authorization proces, status and errorcodes, FAQ, Postman tutorial etc. <br><br>Once authorized, you simply add \'Authorization: Bearer <access-token>\' to the header of your requests. On the page below, you\'ll find all our endpoints documented as well as possible, but if you have any questions regarding an endpoint, or an error in the description, please contact us on <a href=\"mailto:api@dinero.dk\">api@dinero.dk.</a> 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { EntryReadModel } from '../model';
/**
 * EntryApi - axios parameter creator
 * @export
 */
export const EntryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a list of all Entries added in a given time range, the time range cannot be longer than 31 days.                Primo entries will be returned if they have been updated in the time range. The value of the primo entry will be the current total for that account and accounting year, not the changes made in the time range.  The guid of a primo entry will be the same for an accounting year, but the value might be updated.
         * @summary List changes
         * @param {string} organizationId 
         * @param {string} [changesFrom] 
         * @param {string} [changesTo] 
         * @param {boolean} [includePrimo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdEntriesChangesGet: async (organizationId: string, changesFrom?: string, changesTo?: string, includePrimo?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdEntriesChangesGet', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/entries/changes`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (changesFrom !== undefined) {
                localVarQueryParameter['changesFrom'] = (changesFrom as any instanceof Date) ?
                    (changesFrom as any).toISOString() :
                    changesFrom;
            }

            if (changesTo !== undefined) {
                localVarQueryParameter['changesTo'] = (changesTo as any instanceof Date) ?
                    (changesTo as any).toISOString() :
                    changesTo;
            }

            if (includePrimo !== undefined) {
                localVarQueryParameter['includePrimo'] = includePrimo;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of all entries for a given period. This can be a very lengthy and demanding process on our end. Therefore this is only used initially. After that you must use the \"List changes\" endpoint below, to only get changes that have been made since the initial synchronization. Cannot cross accounting years.
         * @summary List entries
         * @param {string} organizationId 
         * @param {string} [fromDate] 
         * @param {string} [toDate] 
         * @param {boolean} [includePrimo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdEntriesGet: async (organizationId: string, fromDate?: string, toDate?: string, includePrimo?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdEntriesGet', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/entries`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fromDate !== undefined) {
                localVarQueryParameter['fromDate'] = (fromDate as any instanceof Date) ?
                    (fromDate as any).toISOString() :
                    fromDate;
            }

            if (toDate !== undefined) {
                localVarQueryParameter['toDate'] = (toDate as any instanceof Date) ?
                    (toDate as any).toISOString() :
                    toDate;
            }

            if (includePrimo !== undefined) {
                localVarQueryParameter['includePrimo'] = includePrimo;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EntryApi - functional programming interface
 * @export
 */
export const EntryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EntryApiAxiosParamCreator(configuration)
    return {
        /**
         * Get a list of all Entries added in a given time range, the time range cannot be longer than 31 days.                Primo entries will be returned if they have been updated in the time range. The value of the primo entry will be the current total for that account and accounting year, not the changes made in the time range.  The guid of a primo entry will be the same for an accounting year, but the value might be updated.
         * @summary List changes
         * @param {string} organizationId 
         * @param {string} [changesFrom] 
         * @param {string} [changesTo] 
         * @param {boolean} [includePrimo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdEntriesChangesGet(organizationId: string, changesFrom?: string, changesTo?: string, includePrimo?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EntryReadModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdEntriesChangesGet(organizationId, changesFrom, changesTo, includePrimo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EntryApi.v1OrganizationIdEntriesChangesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a list of all entries for a given period. This can be a very lengthy and demanding process on our end. Therefore this is only used initially. After that you must use the \"List changes\" endpoint below, to only get changes that have been made since the initial synchronization. Cannot cross accounting years.
         * @summary List entries
         * @param {string} organizationId 
         * @param {string} [fromDate] 
         * @param {string} [toDate] 
         * @param {boolean} [includePrimo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdEntriesGet(organizationId: string, fromDate?: string, toDate?: string, includePrimo?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EntryReadModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdEntriesGet(organizationId, fromDate, toDate, includePrimo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EntryApi.v1OrganizationIdEntriesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EntryApi - factory interface
 * @export
 */
export const EntryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EntryApiFp(configuration)
    return {
        /**
         * Get a list of all Entries added in a given time range, the time range cannot be longer than 31 days.                Primo entries will be returned if they have been updated in the time range. The value of the primo entry will be the current total for that account and accounting year, not the changes made in the time range.  The guid of a primo entry will be the same for an accounting year, but the value might be updated.
         * @summary List changes
         * @param {EntryApiV1OrganizationIdEntriesChangesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdEntriesChangesGet(requestParameters: EntryApiV1OrganizationIdEntriesChangesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<EntryReadModel>> {
            return localVarFp.v1OrganizationIdEntriesChangesGet(requestParameters.organizationId, requestParameters.changesFrom, requestParameters.changesTo, requestParameters.includePrimo, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of all entries for a given period. This can be a very lengthy and demanding process on our end. Therefore this is only used initially. After that you must use the \"List changes\" endpoint below, to only get changes that have been made since the initial synchronization. Cannot cross accounting years.
         * @summary List entries
         * @param {EntryApiV1OrganizationIdEntriesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdEntriesGet(requestParameters: EntryApiV1OrganizationIdEntriesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<EntryReadModel>> {
            return localVarFp.v1OrganizationIdEntriesGet(requestParameters.organizationId, requestParameters.fromDate, requestParameters.toDate, requestParameters.includePrimo, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for v1OrganizationIdEntriesChangesGet operation in EntryApi.
 * @export
 * @interface EntryApiV1OrganizationIdEntriesChangesGetRequest
 */
export interface EntryApiV1OrganizationIdEntriesChangesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof EntryApiV1OrganizationIdEntriesChangesGet
     */
    readonly organizationId: string

    /**
     * 
     * @type {string}
     * @memberof EntryApiV1OrganizationIdEntriesChangesGet
     */
    readonly changesFrom?: string

    /**
     * 
     * @type {string}
     * @memberof EntryApiV1OrganizationIdEntriesChangesGet
     */
    readonly changesTo?: string

    /**
     * 
     * @type {boolean}
     * @memberof EntryApiV1OrganizationIdEntriesChangesGet
     */
    readonly includePrimo?: boolean
}

/**
 * Request parameters for v1OrganizationIdEntriesGet operation in EntryApi.
 * @export
 * @interface EntryApiV1OrganizationIdEntriesGetRequest
 */
export interface EntryApiV1OrganizationIdEntriesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof EntryApiV1OrganizationIdEntriesGet
     */
    readonly organizationId: string

    /**
     * 
     * @type {string}
     * @memberof EntryApiV1OrganizationIdEntriesGet
     */
    readonly fromDate?: string

    /**
     * 
     * @type {string}
     * @memberof EntryApiV1OrganizationIdEntriesGet
     */
    readonly toDate?: string

    /**
     * 
     * @type {boolean}
     * @memberof EntryApiV1OrganizationIdEntriesGet
     */
    readonly includePrimo?: boolean
}

/**
 * EntryApi - object-oriented interface
 * @export
 * @class EntryApi
 * @extends {BaseAPI}
 */
export class EntryApi extends BaseAPI {
    /**
     * Get a list of all Entries added in a given time range, the time range cannot be longer than 31 days.                Primo entries will be returned if they have been updated in the time range. The value of the primo entry will be the current total for that account and accounting year, not the changes made in the time range.  The guid of a primo entry will be the same for an accounting year, but the value might be updated.
     * @summary List changes
     * @param {EntryApiV1OrganizationIdEntriesChangesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntryApi
     */
    public v1OrganizationIdEntriesChangesGet(requestParameters: EntryApiV1OrganizationIdEntriesChangesGetRequest, options?: RawAxiosRequestConfig) {
        return EntryApiFp(this.configuration).v1OrganizationIdEntriesChangesGet(requestParameters.organizationId, requestParameters.changesFrom, requestParameters.changesTo, requestParameters.includePrimo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of all entries for a given period. This can be a very lengthy and demanding process on our end. Therefore this is only used initially. After that you must use the \"List changes\" endpoint below, to only get changes that have been made since the initial synchronization. Cannot cross accounting years.
     * @summary List entries
     * @param {EntryApiV1OrganizationIdEntriesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntryApi
     */
    public v1OrganizationIdEntriesGet(requestParameters: EntryApiV1OrganizationIdEntriesGetRequest, options?: RawAxiosRequestConfig) {
        return EntryApiFp(this.configuration).v1OrganizationIdEntriesGet(requestParameters.organizationId, requestParameters.fromDate, requestParameters.toDate, requestParameters.includePrimo, options).then((request) => request(this.axios, this.basePath));
    }
}


/* tslint:disable */
/* eslint-disable */
/**
 * Dinero API
 * Welcome to our endpoint documentation. Please try to carefully read our general documentation found on <a href=\"https://developer.dinero.dk/\">developer.dinero.dk</a> for information regarding the authorization proces, status and errorcodes, FAQ, Postman tutorial etc. <br><br>Once authorized, you simply add \'Authorization: Bearer <access-token>\' to the header of your requests. On the page below, you\'ll find all our endpoints documented as well as possible, but if you have any questions regarding an endpoint, or an error in the description, please contact us on <a href=\"mailto:api@dinero.dk\">api@dinero.dk.</a> 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { FileSavedReadModel } from '../model';
// @ts-ignore
import type { FileStatus } from '../model';
// @ts-ignore
import type { FilteredFileReadModel } from '../model';
/**
 * FilesApi - axios parameter creator
 * @export
 */
export const FilesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the file with a certain file guid.
         * @summary Download the specified file
         * @param {string} fileGuid Specifies the file to be downloaded
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdFilesFileGuidGet: async (fileGuid: string, organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileGuid' is not null or undefined
            assertParamExists('v1OrganizationIdFilesFileGuidGet', 'fileGuid', fileGuid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdFilesFileGuidGet', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/files/{fileGuid}`
                .replace(`{${"fileGuid"}}`, encodeURIComponent(String(fileGuid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists all files in file archive, either so it can be used to bind with a document or to download the file.
         * @summary List files
         * @param {string} organizationId 
         * @param {Array<string>} [extensions] (optional) limits the search to the given file extension(s)                  Several extensions can be specified by separating values with comma. Ex. ?extensions&#x3D;pdf,png,csv
         * @param {string} [uploadedBefore] (optional) limits the search to the given after. Format: yyyy/MM/dd
         * @param {string} [uploadedAfter] (optional) limits the search to the given before date. Format: yyyy/MM/dd
         * @param {FileStatus} [fileStatus] (optional) limits the search to the specified file status, available values are: All, Used or Unused
         * @param {number} [page] (optional) specifies page number
         * @param {number} [pageSize] (optional) specifies page size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdFilesGet: async (organizationId: string, extensions?: Array<string>, uploadedBefore?: string, uploadedAfter?: string, fileStatus?: FileStatus, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdFilesGet', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/files`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (extensions) {
                localVarQueryParameter['extensions'] = extensions;
            }

            if (uploadedBefore !== undefined) {
                localVarQueryParameter['uploadedBefore'] = uploadedBefore;
            }

            if (uploadedAfter !== undefined) {
                localVarQueryParameter['uploadedAfter'] = uploadedAfter;
            }

            if (fileStatus !== undefined) {
                localVarQueryParameter['fileStatus'] = fileStatus;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Accepts a posted image. If the file is accepted status code 200 will be returned with info  on the file\'s id and the id of the organization owning file. It might take a second for the  file to be accessible.  In case that the file size is above 6 MB, then a status code 400 will be returned.
         * @summary Upload file
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdFilesPost: async (organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdFilesPost', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/files`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilesApi - functional programming interface
 * @export
 */
export const FilesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FilesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns the file with a certain file guid.
         * @summary Download the specified file
         * @param {string} fileGuid Specifies the file to be downloaded
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdFilesFileGuidGet(fileGuid: string, organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdFilesFileGuidGet(fileGuid, organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FilesApi.v1OrganizationIdFilesFileGuidGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Lists all files in file archive, either so it can be used to bind with a document or to download the file.
         * @summary List files
         * @param {string} organizationId 
         * @param {Array<string>} [extensions] (optional) limits the search to the given file extension(s)                  Several extensions can be specified by separating values with comma. Ex. ?extensions&#x3D;pdf,png,csv
         * @param {string} [uploadedBefore] (optional) limits the search to the given after. Format: yyyy/MM/dd
         * @param {string} [uploadedAfter] (optional) limits the search to the given before date. Format: yyyy/MM/dd
         * @param {FileStatus} [fileStatus] (optional) limits the search to the specified file status, available values are: All, Used or Unused
         * @param {number} [page] (optional) specifies page number
         * @param {number} [pageSize] (optional) specifies page size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdFilesGet(organizationId: string, extensions?: Array<string>, uploadedBefore?: string, uploadedAfter?: string, fileStatus?: FileStatus, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FilteredFileReadModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdFilesGet(organizationId, extensions, uploadedBefore, uploadedAfter, fileStatus, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FilesApi.v1OrganizationIdFilesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Accepts a posted image. If the file is accepted status code 200 will be returned with info  on the file\'s id and the id of the organization owning file. It might take a second for the  file to be accessible.  In case that the file size is above 6 MB, then a status code 400 will be returned.
         * @summary Upload file
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdFilesPost(organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileSavedReadModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdFilesPost(organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FilesApi.v1OrganizationIdFilesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FilesApi - factory interface
 * @export
 */
export const FilesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FilesApiFp(configuration)
    return {
        /**
         * Returns the file with a certain file guid.
         * @summary Download the specified file
         * @param {FilesApiV1OrganizationIdFilesFileGuidGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdFilesFileGuidGet(requestParameters: FilesApiV1OrganizationIdFilesFileGuidGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1OrganizationIdFilesFileGuidGet(requestParameters.fileGuid, requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists all files in file archive, either so it can be used to bind with a document or to download the file.
         * @summary List files
         * @param {FilesApiV1OrganizationIdFilesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdFilesGet(requestParameters: FilesApiV1OrganizationIdFilesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<FilteredFileReadModel>> {
            return localVarFp.v1OrganizationIdFilesGet(requestParameters.organizationId, requestParameters.extensions, requestParameters.uploadedBefore, requestParameters.uploadedAfter, requestParameters.fileStatus, requestParameters.page, requestParameters.pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Accepts a posted image. If the file is accepted status code 200 will be returned with info  on the file\'s id and the id of the organization owning file. It might take a second for the  file to be accessible.  In case that the file size is above 6 MB, then a status code 400 will be returned.
         * @summary Upload file
         * @param {FilesApiV1OrganizationIdFilesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdFilesPost(requestParameters: FilesApiV1OrganizationIdFilesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<FileSavedReadModel> {
            return localVarFp.v1OrganizationIdFilesPost(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for v1OrganizationIdFilesFileGuidGet operation in FilesApi.
 * @export
 * @interface FilesApiV1OrganizationIdFilesFileGuidGetRequest
 */
export interface FilesApiV1OrganizationIdFilesFileGuidGetRequest {
    /**
     * Specifies the file to be downloaded
     * @type {string}
     * @memberof FilesApiV1OrganizationIdFilesFileGuidGet
     */
    readonly fileGuid: string

    /**
     * 
     * @type {string}
     * @memberof FilesApiV1OrganizationIdFilesFileGuidGet
     */
    readonly organizationId: string
}

/**
 * Request parameters for v1OrganizationIdFilesGet operation in FilesApi.
 * @export
 * @interface FilesApiV1OrganizationIdFilesGetRequest
 */
export interface FilesApiV1OrganizationIdFilesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof FilesApiV1OrganizationIdFilesGet
     */
    readonly organizationId: string

    /**
     * (optional) limits the search to the given file extension(s)                  Several extensions can be specified by separating values with comma. Ex. ?extensions&#x3D;pdf,png,csv
     * @type {Array<string>}
     * @memberof FilesApiV1OrganizationIdFilesGet
     */
    readonly extensions?: Array<string>

    /**
     * (optional) limits the search to the given after. Format: yyyy/MM/dd
     * @type {string}
     * @memberof FilesApiV1OrganizationIdFilesGet
     */
    readonly uploadedBefore?: string

    /**
     * (optional) limits the search to the given before date. Format: yyyy/MM/dd
     * @type {string}
     * @memberof FilesApiV1OrganizationIdFilesGet
     */
    readonly uploadedAfter?: string

    /**
     * (optional) limits the search to the specified file status, available values are: All, Used or Unused
     * @type {FileStatus}
     * @memberof FilesApiV1OrganizationIdFilesGet
     */
    readonly fileStatus?: FileStatus

    /**
     * (optional) specifies page number
     * @type {number}
     * @memberof FilesApiV1OrganizationIdFilesGet
     */
    readonly page?: number

    /**
     * (optional) specifies page size
     * @type {number}
     * @memberof FilesApiV1OrganizationIdFilesGet
     */
    readonly pageSize?: number
}

/**
 * Request parameters for v1OrganizationIdFilesPost operation in FilesApi.
 * @export
 * @interface FilesApiV1OrganizationIdFilesPostRequest
 */
export interface FilesApiV1OrganizationIdFilesPostRequest {
    /**
     * 
     * @type {string}
     * @memberof FilesApiV1OrganizationIdFilesPost
     */
    readonly organizationId: string
}

/**
 * FilesApi - object-oriented interface
 * @export
 * @class FilesApi
 * @extends {BaseAPI}
 */
export class FilesApi extends BaseAPI {
    /**
     * Returns the file with a certain file guid.
     * @summary Download the specified file
     * @param {FilesApiV1OrganizationIdFilesFileGuidGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public v1OrganizationIdFilesFileGuidGet(requestParameters: FilesApiV1OrganizationIdFilesFileGuidGetRequest, options?: RawAxiosRequestConfig) {
        return FilesApiFp(this.configuration).v1OrganizationIdFilesFileGuidGet(requestParameters.fileGuid, requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists all files in file archive, either so it can be used to bind with a document or to download the file.
     * @summary List files
     * @param {FilesApiV1OrganizationIdFilesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public v1OrganizationIdFilesGet(requestParameters: FilesApiV1OrganizationIdFilesGetRequest, options?: RawAxiosRequestConfig) {
        return FilesApiFp(this.configuration).v1OrganizationIdFilesGet(requestParameters.organizationId, requestParameters.extensions, requestParameters.uploadedBefore, requestParameters.uploadedAfter, requestParameters.fileStatus, requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Accepts a posted image. If the file is accepted status code 200 will be returned with info  on the file\'s id and the id of the organization owning file. It might take a second for the  file to be accessible.  In case that the file size is above 6 MB, then a status code 400 will be returned.
     * @summary Upload file
     * @param {FilesApiV1OrganizationIdFilesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public v1OrganizationIdFilesPost(requestParameters: FilesApiV1OrganizationIdFilesPostRequest, options?: RawAxiosRequestConfig) {
        return FilesApiFp(this.configuration).v1OrganizationIdFilesPost(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }
}


/* tslint:disable */
/* eslint-disable */
/**
 * Dinero API
 * Welcome to our endpoint documentation. Please try to carefully read our general documentation found on <a href=\"https://developer.dinero.dk/\">developer.dinero.dk</a> for information regarding the authorization proces, status and errorcodes, FAQ, Postman tutorial etc. <br><br>Once authorized, you simply add \'Authorization: Bearer <access-token>\' to the header of your requests. On the page below, you\'ll find all our endpoints documented as well as possible, but if you have any questions regarding an endpoint, or an error in the description, please contact us on <a href=\"mailto:api@dinero.dk\">api@dinero.dk.</a> 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { LedgerItemModel } from '../model';
// @ts-ignore
import type { LedgerItemModelV2 } from '../model';
// @ts-ignore
import type { LedgerItemReadModel } from '../model';
// @ts-ignore
import type { LedgerItemStatusModel } from '../model';
// @ts-ignore
import type { LedgerItemStatusReadModel } from '../model';
/**
 * LedgerItemsApi - axios parameter creator
 * @export
 */
export const LedgerItemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a new array of ledger items to the ledger. Do note that this an array of items. The maximum number of ledger items in the same ledger is 1000. Please be careful around this endpoint as you are responsible for the bookkeeping, and must follow all applicable concepts of debet, credit etc. If you are in doubt, please reach out or contact an accountant for assistance.
         * @summary Add ledger item
         * @param {string} organizationId 
         * @param {Array<LedgerItemModelV2>} [ledgerItemModelV2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v12OrganizationIdLedgeritemsPost: async (organizationId: string, ledgerItemModelV2?: Array<LedgerItemModelV2>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v12OrganizationIdLedgeritemsPost', 'organizationId', organizationId)
            const localVarPath = `/v1.2/{organizationId}/ledgeritems`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ledgerItemModelV2, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Starts the asynchronous booking process. You will get a status 200 response, if the process has succesfully initiated.  This does not mean the booking was succesful, so please follow up with a request to get ledger item status. The booking can take several seconds or indeed minutes incase of a long queue on our ledger service.
         * @summary Send ledger items to booking
         * @param {string} organizationId 
         * @param {Array<LedgerItemModel>} [ledgerItemModel] A list of ledger item ids to book
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdLedgeritemsBookPost: async (organizationId: string, ledgerItemModel?: Array<LedgerItemModel>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdLedgeritemsBookPost', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/ledgeritems/book`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ledgerItemModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a list of ledger items
         * @summary Delete multiple ledger items
         * @param {string} organizationId 
         * @param {Array<LedgerItemModel>} [ledgerItemModel] A list of ledger items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdLedgeritemsDeleteDelete: async (organizationId: string, ledgerItemModel?: Array<LedgerItemModel>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdLedgeritemsDeleteDelete', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/ledgeritems/delete`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ledgerItemModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get ledger items already in the ledger and still unbooked.
         * @summary Get ledger items
         * @param {string} organizationId 
         * @param {Array<LedgerItemModel>} [ledgerItemModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdLedgeritemsLedgersPost: async (organizationId: string, ledgerItemModel?: Array<LedgerItemModel>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdLedgeritemsLedgersPost', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/ledgeritems/ledgers`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ledgerItemModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a ledger item to the ledger.  It is required to send version and id for each ledger item.
         * @summary Update ledger items
         * @param {string} organizationId 
         * @param {Array<LedgerItemModelV2>} [ledgerItemModelV2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdLedgeritemsPut: async (organizationId: string, ledgerItemModelV2?: Array<LedgerItemModelV2>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdLedgeritemsPut', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/ledgeritems`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ledgerItemModelV2, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get status for ledger items sent to booking. It is important to use this endpoint to make sure ledger items are actually booked.
         * @summary Get ledger item status
         * @param {string} organizationId 
         * @param {Array<LedgerItemStatusModel>} [ledgerItemStatusModel] A list of ledger item status models
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdLedgeritemsStatusPost: async (organizationId: string, ledgerItemStatusModel?: Array<LedgerItemStatusModel>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdLedgeritemsStatusPost', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/ledgeritems/status`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ledgerItemStatusModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LedgerItemsApi - functional programming interface
 * @export
 */
export const LedgerItemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LedgerItemsApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a new array of ledger items to the ledger. Do note that this an array of items. The maximum number of ledger items in the same ledger is 1000. Please be careful around this endpoint as you are responsible for the bookkeeping, and must follow all applicable concepts of debet, credit etc. If you are in doubt, please reach out or contact an accountant for assistance.
         * @summary Add ledger item
         * @param {string} organizationId 
         * @param {Array<LedgerItemModelV2>} [ledgerItemModelV2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v12OrganizationIdLedgeritemsPost(organizationId: string, ledgerItemModelV2?: Array<LedgerItemModelV2>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LedgerItemReadModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v12OrganizationIdLedgeritemsPost(organizationId, ledgerItemModelV2, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LedgerItemsApi.v12OrganizationIdLedgeritemsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Starts the asynchronous booking process. You will get a status 200 response, if the process has succesfully initiated.  This does not mean the booking was succesful, so please follow up with a request to get ledger item status. The booking can take several seconds or indeed minutes incase of a long queue on our ledger service.
         * @summary Send ledger items to booking
         * @param {string} organizationId 
         * @param {Array<LedgerItemModel>} [ledgerItemModel] A list of ledger item ids to book
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdLedgeritemsBookPost(organizationId: string, ledgerItemModel?: Array<LedgerItemModel>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdLedgeritemsBookPost(organizationId, ledgerItemModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LedgerItemsApi.v1OrganizationIdLedgeritemsBookPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deletes a list of ledger items
         * @summary Delete multiple ledger items
         * @param {string} organizationId 
         * @param {Array<LedgerItemModel>} [ledgerItemModel] A list of ledger items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdLedgeritemsDeleteDelete(organizationId: string, ledgerItemModel?: Array<LedgerItemModel>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdLedgeritemsDeleteDelete(organizationId, ledgerItemModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LedgerItemsApi.v1OrganizationIdLedgeritemsDeleteDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get ledger items already in the ledger and still unbooked.
         * @summary Get ledger items
         * @param {string} organizationId 
         * @param {Array<LedgerItemModel>} [ledgerItemModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdLedgeritemsLedgersPost(organizationId: string, ledgerItemModel?: Array<LedgerItemModel>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LedgerItemModelV2>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdLedgeritemsLedgersPost(organizationId, ledgerItemModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LedgerItemsApi.v1OrganizationIdLedgeritemsLedgersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update a ledger item to the ledger.  It is required to send version and id for each ledger item.
         * @summary Update ledger items
         * @param {string} organizationId 
         * @param {Array<LedgerItemModelV2>} [ledgerItemModelV2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdLedgeritemsPut(organizationId: string, ledgerItemModelV2?: Array<LedgerItemModelV2>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LedgerItemReadModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdLedgeritemsPut(organizationId, ledgerItemModelV2, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LedgerItemsApi.v1OrganizationIdLedgeritemsPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get status for ledger items sent to booking. It is important to use this endpoint to make sure ledger items are actually booked.
         * @summary Get ledger item status
         * @param {string} organizationId 
         * @param {Array<LedgerItemStatusModel>} [ledgerItemStatusModel] A list of ledger item status models
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdLedgeritemsStatusPost(organizationId: string, ledgerItemStatusModel?: Array<LedgerItemStatusModel>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LedgerItemStatusReadModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdLedgeritemsStatusPost(organizationId, ledgerItemStatusModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LedgerItemsApi.v1OrganizationIdLedgeritemsStatusPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LedgerItemsApi - factory interface
 * @export
 */
export const LedgerItemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LedgerItemsApiFp(configuration)
    return {
        /**
         * Add a new array of ledger items to the ledger. Do note that this an array of items. The maximum number of ledger items in the same ledger is 1000. Please be careful around this endpoint as you are responsible for the bookkeeping, and must follow all applicable concepts of debet, credit etc. If you are in doubt, please reach out or contact an accountant for assistance.
         * @summary Add ledger item
         * @param {LedgerItemsApiV12OrganizationIdLedgeritemsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v12OrganizationIdLedgeritemsPost(requestParameters: LedgerItemsApiV12OrganizationIdLedgeritemsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<LedgerItemReadModel> {
            return localVarFp.v12OrganizationIdLedgeritemsPost(requestParameters.organizationId, requestParameters.ledgerItemModelV2, options).then((request) => request(axios, basePath));
        },
        /**
         * Starts the asynchronous booking process. You will get a status 200 response, if the process has succesfully initiated.  This does not mean the booking was succesful, so please follow up with a request to get ledger item status. The booking can take several seconds or indeed minutes incase of a long queue on our ledger service.
         * @summary Send ledger items to booking
         * @param {LedgerItemsApiV1OrganizationIdLedgeritemsBookPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdLedgeritemsBookPost(requestParameters: LedgerItemsApiV1OrganizationIdLedgeritemsBookPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1OrganizationIdLedgeritemsBookPost(requestParameters.organizationId, requestParameters.ledgerItemModel, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a list of ledger items
         * @summary Delete multiple ledger items
         * @param {LedgerItemsApiV1OrganizationIdLedgeritemsDeleteDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdLedgeritemsDeleteDelete(requestParameters: LedgerItemsApiV1OrganizationIdLedgeritemsDeleteDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1OrganizationIdLedgeritemsDeleteDelete(requestParameters.organizationId, requestParameters.ledgerItemModel, options).then((request) => request(axios, basePath));
        },
        /**
         * Get ledger items already in the ledger and still unbooked.
         * @summary Get ledger items
         * @param {LedgerItemsApiV1OrganizationIdLedgeritemsLedgersPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdLedgeritemsLedgersPost(requestParameters: LedgerItemsApiV1OrganizationIdLedgeritemsLedgersPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<LedgerItemModelV2>> {
            return localVarFp.v1OrganizationIdLedgeritemsLedgersPost(requestParameters.organizationId, requestParameters.ledgerItemModel, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a ledger item to the ledger.  It is required to send version and id for each ledger item.
         * @summary Update ledger items
         * @param {LedgerItemsApiV1OrganizationIdLedgeritemsPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdLedgeritemsPut(requestParameters: LedgerItemsApiV1OrganizationIdLedgeritemsPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<LedgerItemReadModel>> {
            return localVarFp.v1OrganizationIdLedgeritemsPut(requestParameters.organizationId, requestParameters.ledgerItemModelV2, options).then((request) => request(axios, basePath));
        },
        /**
         * Get status for ledger items sent to booking. It is important to use this endpoint to make sure ledger items are actually booked.
         * @summary Get ledger item status
         * @param {LedgerItemsApiV1OrganizationIdLedgeritemsStatusPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdLedgeritemsStatusPost(requestParameters: LedgerItemsApiV1OrganizationIdLedgeritemsStatusPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<LedgerItemStatusReadModel>> {
            return localVarFp.v1OrganizationIdLedgeritemsStatusPost(requestParameters.organizationId, requestParameters.ledgerItemStatusModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for v12OrganizationIdLedgeritemsPost operation in LedgerItemsApi.
 * @export
 * @interface LedgerItemsApiV12OrganizationIdLedgeritemsPostRequest
 */
export interface LedgerItemsApiV12OrganizationIdLedgeritemsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof LedgerItemsApiV12OrganizationIdLedgeritemsPost
     */
    readonly organizationId: string

    /**
     * 
     * @type {Array<LedgerItemModelV2>}
     * @memberof LedgerItemsApiV12OrganizationIdLedgeritemsPost
     */
    readonly ledgerItemModelV2?: Array<LedgerItemModelV2>
}

/**
 * Request parameters for v1OrganizationIdLedgeritemsBookPost operation in LedgerItemsApi.
 * @export
 * @interface LedgerItemsApiV1OrganizationIdLedgeritemsBookPostRequest
 */
export interface LedgerItemsApiV1OrganizationIdLedgeritemsBookPostRequest {
    /**
     * 
     * @type {string}
     * @memberof LedgerItemsApiV1OrganizationIdLedgeritemsBookPost
     */
    readonly organizationId: string

    /**
     * A list of ledger item ids to book
     * @type {Array<LedgerItemModel>}
     * @memberof LedgerItemsApiV1OrganizationIdLedgeritemsBookPost
     */
    readonly ledgerItemModel?: Array<LedgerItemModel>
}

/**
 * Request parameters for v1OrganizationIdLedgeritemsDeleteDelete operation in LedgerItemsApi.
 * @export
 * @interface LedgerItemsApiV1OrganizationIdLedgeritemsDeleteDeleteRequest
 */
export interface LedgerItemsApiV1OrganizationIdLedgeritemsDeleteDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof LedgerItemsApiV1OrganizationIdLedgeritemsDeleteDelete
     */
    readonly organizationId: string

    /**
     * A list of ledger items
     * @type {Array<LedgerItemModel>}
     * @memberof LedgerItemsApiV1OrganizationIdLedgeritemsDeleteDelete
     */
    readonly ledgerItemModel?: Array<LedgerItemModel>
}

/**
 * Request parameters for v1OrganizationIdLedgeritemsLedgersPost operation in LedgerItemsApi.
 * @export
 * @interface LedgerItemsApiV1OrganizationIdLedgeritemsLedgersPostRequest
 */
export interface LedgerItemsApiV1OrganizationIdLedgeritemsLedgersPostRequest {
    /**
     * 
     * @type {string}
     * @memberof LedgerItemsApiV1OrganizationIdLedgeritemsLedgersPost
     */
    readonly organizationId: string

    /**
     * 
     * @type {Array<LedgerItemModel>}
     * @memberof LedgerItemsApiV1OrganizationIdLedgeritemsLedgersPost
     */
    readonly ledgerItemModel?: Array<LedgerItemModel>
}

/**
 * Request parameters for v1OrganizationIdLedgeritemsPut operation in LedgerItemsApi.
 * @export
 * @interface LedgerItemsApiV1OrganizationIdLedgeritemsPutRequest
 */
export interface LedgerItemsApiV1OrganizationIdLedgeritemsPutRequest {
    /**
     * 
     * @type {string}
     * @memberof LedgerItemsApiV1OrganizationIdLedgeritemsPut
     */
    readonly organizationId: string

    /**
     * 
     * @type {Array<LedgerItemModelV2>}
     * @memberof LedgerItemsApiV1OrganizationIdLedgeritemsPut
     */
    readonly ledgerItemModelV2?: Array<LedgerItemModelV2>
}

/**
 * Request parameters for v1OrganizationIdLedgeritemsStatusPost operation in LedgerItemsApi.
 * @export
 * @interface LedgerItemsApiV1OrganizationIdLedgeritemsStatusPostRequest
 */
export interface LedgerItemsApiV1OrganizationIdLedgeritemsStatusPostRequest {
    /**
     * 
     * @type {string}
     * @memberof LedgerItemsApiV1OrganizationIdLedgeritemsStatusPost
     */
    readonly organizationId: string

    /**
     * A list of ledger item status models
     * @type {Array<LedgerItemStatusModel>}
     * @memberof LedgerItemsApiV1OrganizationIdLedgeritemsStatusPost
     */
    readonly ledgerItemStatusModel?: Array<LedgerItemStatusModel>
}

/**
 * LedgerItemsApi - object-oriented interface
 * @export
 * @class LedgerItemsApi
 * @extends {BaseAPI}
 */
export class LedgerItemsApi extends BaseAPI {
    /**
     * Add a new array of ledger items to the ledger. Do note that this an array of items. The maximum number of ledger items in the same ledger is 1000. Please be careful around this endpoint as you are responsible for the bookkeeping, and must follow all applicable concepts of debet, credit etc. If you are in doubt, please reach out or contact an accountant for assistance.
     * @summary Add ledger item
     * @param {LedgerItemsApiV12OrganizationIdLedgeritemsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LedgerItemsApi
     */
    public v12OrganizationIdLedgeritemsPost(requestParameters: LedgerItemsApiV12OrganizationIdLedgeritemsPostRequest, options?: RawAxiosRequestConfig) {
        return LedgerItemsApiFp(this.configuration).v12OrganizationIdLedgeritemsPost(requestParameters.organizationId, requestParameters.ledgerItemModelV2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Starts the asynchronous booking process. You will get a status 200 response, if the process has succesfully initiated.  This does not mean the booking was succesful, so please follow up with a request to get ledger item status. The booking can take several seconds or indeed minutes incase of a long queue on our ledger service.
     * @summary Send ledger items to booking
     * @param {LedgerItemsApiV1OrganizationIdLedgeritemsBookPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LedgerItemsApi
     */
    public v1OrganizationIdLedgeritemsBookPost(requestParameters: LedgerItemsApiV1OrganizationIdLedgeritemsBookPostRequest, options?: RawAxiosRequestConfig) {
        return LedgerItemsApiFp(this.configuration).v1OrganizationIdLedgeritemsBookPost(requestParameters.organizationId, requestParameters.ledgerItemModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a list of ledger items
     * @summary Delete multiple ledger items
     * @param {LedgerItemsApiV1OrganizationIdLedgeritemsDeleteDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LedgerItemsApi
     */
    public v1OrganizationIdLedgeritemsDeleteDelete(requestParameters: LedgerItemsApiV1OrganizationIdLedgeritemsDeleteDeleteRequest, options?: RawAxiosRequestConfig) {
        return LedgerItemsApiFp(this.configuration).v1OrganizationIdLedgeritemsDeleteDelete(requestParameters.organizationId, requestParameters.ledgerItemModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get ledger items already in the ledger and still unbooked.
     * @summary Get ledger items
     * @param {LedgerItemsApiV1OrganizationIdLedgeritemsLedgersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LedgerItemsApi
     */
    public v1OrganizationIdLedgeritemsLedgersPost(requestParameters: LedgerItemsApiV1OrganizationIdLedgeritemsLedgersPostRequest, options?: RawAxiosRequestConfig) {
        return LedgerItemsApiFp(this.configuration).v1OrganizationIdLedgeritemsLedgersPost(requestParameters.organizationId, requestParameters.ledgerItemModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a ledger item to the ledger.  It is required to send version and id for each ledger item.
     * @summary Update ledger items
     * @param {LedgerItemsApiV1OrganizationIdLedgeritemsPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LedgerItemsApi
     */
    public v1OrganizationIdLedgeritemsPut(requestParameters: LedgerItemsApiV1OrganizationIdLedgeritemsPutRequest, options?: RawAxiosRequestConfig) {
        return LedgerItemsApiFp(this.configuration).v1OrganizationIdLedgeritemsPut(requestParameters.organizationId, requestParameters.ledgerItemModelV2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get status for ledger items sent to booking. It is important to use this endpoint to make sure ledger items are actually booked.
     * @summary Get ledger item status
     * @param {LedgerItemsApiV1OrganizationIdLedgeritemsStatusPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LedgerItemsApi
     */
    public v1OrganizationIdLedgeritemsStatusPost(requestParameters: LedgerItemsApiV1OrganizationIdLedgeritemsStatusPostRequest, options?: RawAxiosRequestConfig) {
        return LedgerItemsApiFp(this.configuration).v1OrganizationIdLedgeritemsStatusPost(requestParameters.organizationId, requestParameters.ledgerItemStatusModel, options).then((request) => request(this.axios, this.basePath));
    }
}


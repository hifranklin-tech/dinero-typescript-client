/* tslint:disable */
/* eslint-disable */
/**
 * Dinero API
 * Welcome to our endpoint documentation. Please try to carefully read our general documentation found on <a href=\"https://developer.dinero.dk/\">developer.dinero.dk</a> for information regarding the authorization proces, status and errorcodes, FAQ, Postman tutorial etc. <br><br>Once authorized, you simply add \'Authorization: Bearer <access-token>\' to the header of your requests. On the page below, you\'ll find all our endpoints documented as well as possible, but if you have any questions regarding an endpoint, or an error in the description, please contact us on <a href=\"mailto:api@dinero.dk\">api@dinero.dk.</a> 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { BookModel } from '../model';
// @ts-ignore
import type { ManuelVoucherCreateModel } from '../model';
// @ts-ignore
import type { ManuelVoucherReadModel } from '../model';
// @ts-ignore
import type { ManuelVoucherUpdateModel } from '../model';
// @ts-ignore
import type { RequiredTimestampObject } from '../model';
/**
 * ManuelVouchersApi - axios parameter creator
 * @export
 */
export const ManuelVouchersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Books a manuel voucher which will cause the voucher to have effect on the books.
         * @summary Book manual voucher
         * @param {string} guid Guid of the voucher to book
         * @param {string} organizationId 
         * @param {BookModel} [bookModel] Data used for the booking transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdVouchersManuelGuidBookPost: async (guid: string, organizationId: string, bookModel?: BookModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('v1OrganizationIdVouchersManuelGuidBookPost', 'guid', guid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdVouchersManuelGuidBookPost', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/vouchers/manuel/{guid}/book`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a manuel voucher. If it is a draft, this will simply remove that draft. If already booked then it will add an offset entry for the manual voucher, so it will have no effect, but still be present in the bookkeeping, since it is not allowed under danish law to completely remove something, that has already been booked.
         * @summary Delete manual voucher
         * @param {string} guid Guid of the manuel voucher to delete
         * @param {string} organizationId 
         * @param {RequiredTimestampObject} [requiredTimestampObject] Timestamp version of the voucher, used to validate concurrency
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdVouchersManuelGuidDelete: async (guid: string, organizationId: string, requiredTimestampObject?: RequiredTimestampObject, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('v1OrganizationIdVouchersManuelGuidDelete', 'guid', guid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdVouchersManuelGuidDelete', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/vouchers/manuel/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requiredTimestampObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the details of a specific manuel voucher that you know the guid of.  It is not possible to get a list. In case you wish to work with accounting data,  use the entries endpoints instead.
         * @summary Get manual voucher
         * @param {string} guid Identifier of a specific manuel voucher
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdVouchersManuelGuidGet: async (guid: string, organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('v1OrganizationIdVouchersManuelGuidGet', 'guid', guid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdVouchersManuelGuidGet', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/vouchers/manuel/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a manuel voucher draft. Not possible once booked.
         * @summary Update manual voucher
         * @param {string} guid Identifier of the manuel voucher
         * @param {string} organizationId 
         * @param {ManuelVoucherUpdateModel} [manuelVoucherUpdateModel] Model describing new values for the manuel voucher
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdVouchersManuelGuidPut: async (guid: string, organizationId: string, manuelVoucherUpdateModel?: ManuelVoucherUpdateModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('v1OrganizationIdVouchersManuelGuidPut', 'guid', guid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdVouchersManuelGuidPut', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/vouchers/manuel/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(manuelVoucherUpdateModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a manual voucher draft. In our application we call this \"finansbilag\" and will be found under the \"Bilagsoversigt\".  Do note this will be created as a draft and have no impact on the books untill booked. Most user will most likely expect the integration to handle the booking.
         * @summary Create manual voucher
         * @param {string} organizationId 
         * @param {ManuelVoucherCreateModel} [manuelVoucherCreateModel] The values of the voucher
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdVouchersManuelPost: async (organizationId: string, manuelVoucherCreateModel?: ManuelVoucherCreateModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdVouchersManuelPost', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/vouchers/manuel`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(manuelVoucherCreateModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ManuelVouchersApi - functional programming interface
 * @export
 */
export const ManuelVouchersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ManuelVouchersApiAxiosParamCreator(configuration)
    return {
        /**
         * Books a manuel voucher which will cause the voucher to have effect on the books.
         * @summary Book manual voucher
         * @param {string} guid Guid of the voucher to book
         * @param {string} organizationId 
         * @param {BookModel} [bookModel] Data used for the booking transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdVouchersManuelGuidBookPost(guid: string, organizationId: string, bookModel?: BookModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ManuelVoucherReadModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdVouchersManuelGuidBookPost(guid, organizationId, bookModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManuelVouchersApi.v1OrganizationIdVouchersManuelGuidBookPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deletes a manuel voucher. If it is a draft, this will simply remove that draft. If already booked then it will add an offset entry for the manual voucher, so it will have no effect, but still be present in the bookkeeping, since it is not allowed under danish law to completely remove something, that has already been booked.
         * @summary Delete manual voucher
         * @param {string} guid Guid of the manuel voucher to delete
         * @param {string} organizationId 
         * @param {RequiredTimestampObject} [requiredTimestampObject] Timestamp version of the voucher, used to validate concurrency
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdVouchersManuelGuidDelete(guid: string, organizationId: string, requiredTimestampObject?: RequiredTimestampObject, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdVouchersManuelGuidDelete(guid, organizationId, requiredTimestampObject, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManuelVouchersApi.v1OrganizationIdVouchersManuelGuidDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the details of a specific manuel voucher that you know the guid of.  It is not possible to get a list. In case you wish to work with accounting data,  use the entries endpoints instead.
         * @summary Get manual voucher
         * @param {string} guid Identifier of a specific manuel voucher
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdVouchersManuelGuidGet(guid: string, organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ManuelVoucherReadModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdVouchersManuelGuidGet(guid, organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManuelVouchersApi.v1OrganizationIdVouchersManuelGuidGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates a manuel voucher draft. Not possible once booked.
         * @summary Update manual voucher
         * @param {string} guid Identifier of the manuel voucher
         * @param {string} organizationId 
         * @param {ManuelVoucherUpdateModel} [manuelVoucherUpdateModel] Model describing new values for the manuel voucher
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdVouchersManuelGuidPut(guid: string, organizationId: string, manuelVoucherUpdateModel?: ManuelVoucherUpdateModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ManuelVoucherReadModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdVouchersManuelGuidPut(guid, organizationId, manuelVoucherUpdateModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManuelVouchersApi.v1OrganizationIdVouchersManuelGuidPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a manual voucher draft. In our application we call this \"finansbilag\" and will be found under the \"Bilagsoversigt\".  Do note this will be created as a draft and have no impact on the books untill booked. Most user will most likely expect the integration to handle the booking.
         * @summary Create manual voucher
         * @param {string} organizationId 
         * @param {ManuelVoucherCreateModel} [manuelVoucherCreateModel] The values of the voucher
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdVouchersManuelPost(organizationId: string, manuelVoucherCreateModel?: ManuelVoucherCreateModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ManuelVoucherReadModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdVouchersManuelPost(organizationId, manuelVoucherCreateModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ManuelVouchersApi.v1OrganizationIdVouchersManuelPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ManuelVouchersApi - factory interface
 * @export
 */
export const ManuelVouchersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ManuelVouchersApiFp(configuration)
    return {
        /**
         * Books a manuel voucher which will cause the voucher to have effect on the books.
         * @summary Book manual voucher
         * @param {ManuelVouchersApiV1OrganizationIdVouchersManuelGuidBookPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdVouchersManuelGuidBookPost(requestParameters: ManuelVouchersApiV1OrganizationIdVouchersManuelGuidBookPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ManuelVoucherReadModel> {
            return localVarFp.v1OrganizationIdVouchersManuelGuidBookPost(requestParameters.guid, requestParameters.organizationId, requestParameters.bookModel, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a manuel voucher. If it is a draft, this will simply remove that draft. If already booked then it will add an offset entry for the manual voucher, so it will have no effect, but still be present in the bookkeeping, since it is not allowed under danish law to completely remove something, that has already been booked.
         * @summary Delete manual voucher
         * @param {ManuelVouchersApiV1OrganizationIdVouchersManuelGuidDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdVouchersManuelGuidDelete(requestParameters: ManuelVouchersApiV1OrganizationIdVouchersManuelGuidDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1OrganizationIdVouchersManuelGuidDelete(requestParameters.guid, requestParameters.organizationId, requestParameters.requiredTimestampObject, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the details of a specific manuel voucher that you know the guid of.  It is not possible to get a list. In case you wish to work with accounting data,  use the entries endpoints instead.
         * @summary Get manual voucher
         * @param {ManuelVouchersApiV1OrganizationIdVouchersManuelGuidGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdVouchersManuelGuidGet(requestParameters: ManuelVouchersApiV1OrganizationIdVouchersManuelGuidGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ManuelVoucherReadModel> {
            return localVarFp.v1OrganizationIdVouchersManuelGuidGet(requestParameters.guid, requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a manuel voucher draft. Not possible once booked.
         * @summary Update manual voucher
         * @param {ManuelVouchersApiV1OrganizationIdVouchersManuelGuidPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdVouchersManuelGuidPut(requestParameters: ManuelVouchersApiV1OrganizationIdVouchersManuelGuidPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<ManuelVoucherReadModel> {
            return localVarFp.v1OrganizationIdVouchersManuelGuidPut(requestParameters.guid, requestParameters.organizationId, requestParameters.manuelVoucherUpdateModel, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a manual voucher draft. In our application we call this \"finansbilag\" and will be found under the \"Bilagsoversigt\".  Do note this will be created as a draft and have no impact on the books untill booked. Most user will most likely expect the integration to handle the booking.
         * @summary Create manual voucher
         * @param {ManuelVouchersApiV1OrganizationIdVouchersManuelPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdVouchersManuelPost(requestParameters: ManuelVouchersApiV1OrganizationIdVouchersManuelPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ManuelVoucherReadModel> {
            return localVarFp.v1OrganizationIdVouchersManuelPost(requestParameters.organizationId, requestParameters.manuelVoucherCreateModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for v1OrganizationIdVouchersManuelGuidBookPost operation in ManuelVouchersApi.
 * @export
 * @interface ManuelVouchersApiV1OrganizationIdVouchersManuelGuidBookPostRequest
 */
export interface ManuelVouchersApiV1OrganizationIdVouchersManuelGuidBookPostRequest {
    /**
     * Guid of the voucher to book
     * @type {string}
     * @memberof ManuelVouchersApiV1OrganizationIdVouchersManuelGuidBookPost
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof ManuelVouchersApiV1OrganizationIdVouchersManuelGuidBookPost
     */
    readonly organizationId: string

    /**
     * Data used for the booking transaction
     * @type {BookModel}
     * @memberof ManuelVouchersApiV1OrganizationIdVouchersManuelGuidBookPost
     */
    readonly bookModel?: BookModel
}

/**
 * Request parameters for v1OrganizationIdVouchersManuelGuidDelete operation in ManuelVouchersApi.
 * @export
 * @interface ManuelVouchersApiV1OrganizationIdVouchersManuelGuidDeleteRequest
 */
export interface ManuelVouchersApiV1OrganizationIdVouchersManuelGuidDeleteRequest {
    /**
     * Guid of the manuel voucher to delete
     * @type {string}
     * @memberof ManuelVouchersApiV1OrganizationIdVouchersManuelGuidDelete
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof ManuelVouchersApiV1OrganizationIdVouchersManuelGuidDelete
     */
    readonly organizationId: string

    /**
     * Timestamp version of the voucher, used to validate concurrency
     * @type {RequiredTimestampObject}
     * @memberof ManuelVouchersApiV1OrganizationIdVouchersManuelGuidDelete
     */
    readonly requiredTimestampObject?: RequiredTimestampObject
}

/**
 * Request parameters for v1OrganizationIdVouchersManuelGuidGet operation in ManuelVouchersApi.
 * @export
 * @interface ManuelVouchersApiV1OrganizationIdVouchersManuelGuidGetRequest
 */
export interface ManuelVouchersApiV1OrganizationIdVouchersManuelGuidGetRequest {
    /**
     * Identifier of a specific manuel voucher
     * @type {string}
     * @memberof ManuelVouchersApiV1OrganizationIdVouchersManuelGuidGet
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof ManuelVouchersApiV1OrganizationIdVouchersManuelGuidGet
     */
    readonly organizationId: string
}

/**
 * Request parameters for v1OrganizationIdVouchersManuelGuidPut operation in ManuelVouchersApi.
 * @export
 * @interface ManuelVouchersApiV1OrganizationIdVouchersManuelGuidPutRequest
 */
export interface ManuelVouchersApiV1OrganizationIdVouchersManuelGuidPutRequest {
    /**
     * Identifier of the manuel voucher
     * @type {string}
     * @memberof ManuelVouchersApiV1OrganizationIdVouchersManuelGuidPut
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof ManuelVouchersApiV1OrganizationIdVouchersManuelGuidPut
     */
    readonly organizationId: string

    /**
     * Model describing new values for the manuel voucher
     * @type {ManuelVoucherUpdateModel}
     * @memberof ManuelVouchersApiV1OrganizationIdVouchersManuelGuidPut
     */
    readonly manuelVoucherUpdateModel?: ManuelVoucherUpdateModel
}

/**
 * Request parameters for v1OrganizationIdVouchersManuelPost operation in ManuelVouchersApi.
 * @export
 * @interface ManuelVouchersApiV1OrganizationIdVouchersManuelPostRequest
 */
export interface ManuelVouchersApiV1OrganizationIdVouchersManuelPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ManuelVouchersApiV1OrganizationIdVouchersManuelPost
     */
    readonly organizationId: string

    /**
     * The values of the voucher
     * @type {ManuelVoucherCreateModel}
     * @memberof ManuelVouchersApiV1OrganizationIdVouchersManuelPost
     */
    readonly manuelVoucherCreateModel?: ManuelVoucherCreateModel
}

/**
 * ManuelVouchersApi - object-oriented interface
 * @export
 * @class ManuelVouchersApi
 * @extends {BaseAPI}
 */
export class ManuelVouchersApi extends BaseAPI {
    /**
     * Books a manuel voucher which will cause the voucher to have effect on the books.
     * @summary Book manual voucher
     * @param {ManuelVouchersApiV1OrganizationIdVouchersManuelGuidBookPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManuelVouchersApi
     */
    public v1OrganizationIdVouchersManuelGuidBookPost(requestParameters: ManuelVouchersApiV1OrganizationIdVouchersManuelGuidBookPostRequest, options?: RawAxiosRequestConfig) {
        return ManuelVouchersApiFp(this.configuration).v1OrganizationIdVouchersManuelGuidBookPost(requestParameters.guid, requestParameters.organizationId, requestParameters.bookModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a manuel voucher. If it is a draft, this will simply remove that draft. If already booked then it will add an offset entry for the manual voucher, so it will have no effect, but still be present in the bookkeeping, since it is not allowed under danish law to completely remove something, that has already been booked.
     * @summary Delete manual voucher
     * @param {ManuelVouchersApiV1OrganizationIdVouchersManuelGuidDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManuelVouchersApi
     */
    public v1OrganizationIdVouchersManuelGuidDelete(requestParameters: ManuelVouchersApiV1OrganizationIdVouchersManuelGuidDeleteRequest, options?: RawAxiosRequestConfig) {
        return ManuelVouchersApiFp(this.configuration).v1OrganizationIdVouchersManuelGuidDelete(requestParameters.guid, requestParameters.organizationId, requestParameters.requiredTimestampObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the details of a specific manuel voucher that you know the guid of.  It is not possible to get a list. In case you wish to work with accounting data,  use the entries endpoints instead.
     * @summary Get manual voucher
     * @param {ManuelVouchersApiV1OrganizationIdVouchersManuelGuidGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManuelVouchersApi
     */
    public v1OrganizationIdVouchersManuelGuidGet(requestParameters: ManuelVouchersApiV1OrganizationIdVouchersManuelGuidGetRequest, options?: RawAxiosRequestConfig) {
        return ManuelVouchersApiFp(this.configuration).v1OrganizationIdVouchersManuelGuidGet(requestParameters.guid, requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a manuel voucher draft. Not possible once booked.
     * @summary Update manual voucher
     * @param {ManuelVouchersApiV1OrganizationIdVouchersManuelGuidPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManuelVouchersApi
     */
    public v1OrganizationIdVouchersManuelGuidPut(requestParameters: ManuelVouchersApiV1OrganizationIdVouchersManuelGuidPutRequest, options?: RawAxiosRequestConfig) {
        return ManuelVouchersApiFp(this.configuration).v1OrganizationIdVouchersManuelGuidPut(requestParameters.guid, requestParameters.organizationId, requestParameters.manuelVoucherUpdateModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a manual voucher draft. In our application we call this \"finansbilag\" and will be found under the \"Bilagsoversigt\".  Do note this will be created as a draft and have no impact on the books untill booked. Most user will most likely expect the integration to handle the booking.
     * @summary Create manual voucher
     * @param {ManuelVouchersApiV1OrganizationIdVouchersManuelPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManuelVouchersApi
     */
    public v1OrganizationIdVouchersManuelPost(requestParameters: ManuelVouchersApiV1OrganizationIdVouchersManuelPostRequest, options?: RawAxiosRequestConfig) {
        return ManuelVouchersApiFp(this.configuration).v1OrganizationIdVouchersManuelPost(requestParameters.organizationId, requestParameters.manuelVoucherCreateModel, options).then((request) => request(this.axios, this.basePath));
    }
}


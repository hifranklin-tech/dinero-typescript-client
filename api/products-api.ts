/* tslint:disable */
/* eslint-disable */
/**
 * Dinero API
 * Welcome to our endpoint documentation. Please try to carefully read our general documentation found on <a href=\"https://developer.dinero.dk/\">developer.dinero.dk</a> for information regarding the authorization proces, status and errorcodes, FAQ, Postman tutorial etc. <br><br>Once authorized, you simply add \'Authorization: Bearer <access-token>\' to the header of your requests. On the page below, you\'ll find all our endpoints documented as well as possible, but if you have any questions regarding an endpoint, or an error in the description, please contact us on <a href=\"mailto:api@dinero.dk\">api@dinero.dk.</a> 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ProductCreateModel } from '../model';
// @ts-ignore
import type { ProductCreatedResult } from '../model';
// @ts-ignore
import type { ProductReadModel } from '../model';
// @ts-ignore
import type { ProductReadModelDineroCollection } from '../model';
// @ts-ignore
import type { ProductUpdateModel } from '../model';
/**
 * ProductsApi - axios parameter creator
 * @export
 */
export const ProductsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve a list of products for the organization order by UpdatedAt.
         * @summary List products
         * @param {string} organizationId 
         * @param {string} [fields] A comma separated list of fields to include in the response.              Possible values are Name,ProductNumber,Quantity,Unit,AccountNumber,BaseAmountValue,BaseAmountValueInclVat,TotalAmount,TotalAmountInclVat,ExternalReference,CreatedAt,UpdatedAt and DeletedAt.              Notice that it\&#39;s not case sensitive, the property name will be returned the way you request it. If left empty it defaults to Name and ProductGuid.
         * @param {string} [freeTextSearch] A free text search performed on Name and ProductNumber. Can be left empty.
         * @param {string} [queryFilter] Filter specific for products. Filtering can be applied to following fields: Name, ProductNumber, ExternalReference.              See API documentation for filtering format. If left empty no filtering is applied.
         * @param {string} [changesSince] [Generic Filter Option] Only return products that was created, deleted or updated at or after given time.              If left empty, this filter will not be applied, and products will be returned regardless of change history.              The time must be UTC and in the format \&#39;YYYY-MM-DDTHH:mm:ssZ\&#39; example: \&#39;2015-08-18T06:36:22Z\&#39;.
         * @param {boolean} [deletedOnly] [Generic Filter Option] Only select deleted products. If left empty, will default to false.
         * @param {number} [page] The 0-based page number
         * @param {number} [pageSize] The maximum number of items to include in a page. Maximum 1000.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdProductsGet: async (organizationId: string, fields?: string, freeTextSearch?: string, queryFilter?: string, changesSince?: string, deletedOnly?: boolean, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdProductsGet', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/products`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (freeTextSearch !== undefined) {
                localVarQueryParameter['freeTextSearch'] = freeTextSearch;
            }

            if (queryFilter !== undefined) {
                localVarQueryParameter['queryFilter'] = queryFilter;
            }

            if (changesSince !== undefined) {
                localVarQueryParameter['changesSince'] = changesSince;
            }

            if (deletedOnly !== undefined) {
                localVarQueryParameter['deletedOnly'] = deletedOnly;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a product.
         * @summary Delete product
         * @param {string} guid Unique identifier for the product
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdProductsGuidDelete: async (guid: string, organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('v1OrganizationIdProductsGuidDelete', 'guid', guid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdProductsGuidDelete', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/products/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets Product Information for the product with the given Id.
         * @summary Get product
         * @param {string} guid Unique identifier for the Product
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdProductsGuidGet: async (guid: string, organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('v1OrganizationIdProductsGuidGet', 'guid', guid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdProductsGuidGet', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/products/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing product.
         * @summary Update product
         * @param {string} guid Unique identifier for the product
         * @param {string} organizationId 
         * @param {ProductUpdateModel} [productUpdateModel] Content of the product to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdProductsGuidPut: async (guid: string, organizationId: string, productUpdateModel?: ProductUpdateModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('v1OrganizationIdProductsGuidPut', 'guid', guid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdProductsGuidPut', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/products/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productUpdateModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a new product to the organization. These can then be added to invoices.
         * @summary Create product
         * @param {string} organizationId 
         * @param {ProductCreateModel} [productCreateModel] Content of the new product
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdProductsPost: async (organizationId: string, productCreateModel?: ProductCreateModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdProductsPost', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/products`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productCreateModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductsApi - functional programming interface
 * @export
 */
export const ProductsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve a list of products for the organization order by UpdatedAt.
         * @summary List products
         * @param {string} organizationId 
         * @param {string} [fields] A comma separated list of fields to include in the response.              Possible values are Name,ProductNumber,Quantity,Unit,AccountNumber,BaseAmountValue,BaseAmountValueInclVat,TotalAmount,TotalAmountInclVat,ExternalReference,CreatedAt,UpdatedAt and DeletedAt.              Notice that it\&#39;s not case sensitive, the property name will be returned the way you request it. If left empty it defaults to Name and ProductGuid.
         * @param {string} [freeTextSearch] A free text search performed on Name and ProductNumber. Can be left empty.
         * @param {string} [queryFilter] Filter specific for products. Filtering can be applied to following fields: Name, ProductNumber, ExternalReference.              See API documentation for filtering format. If left empty no filtering is applied.
         * @param {string} [changesSince] [Generic Filter Option] Only return products that was created, deleted or updated at or after given time.              If left empty, this filter will not be applied, and products will be returned regardless of change history.              The time must be UTC and in the format \&#39;YYYY-MM-DDTHH:mm:ssZ\&#39; example: \&#39;2015-08-18T06:36:22Z\&#39;.
         * @param {boolean} [deletedOnly] [Generic Filter Option] Only select deleted products. If left empty, will default to false.
         * @param {number} [page] The 0-based page number
         * @param {number} [pageSize] The maximum number of items to include in a page. Maximum 1000.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdProductsGet(organizationId: string, fields?: string, freeTextSearch?: string, queryFilter?: string, changesSince?: string, deletedOnly?: boolean, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductReadModelDineroCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdProductsGet(organizationId, fields, freeTextSearch, queryFilter, changesSince, deletedOnly, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductsApi.v1OrganizationIdProductsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a product.
         * @summary Delete product
         * @param {string} guid Unique identifier for the product
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdProductsGuidDelete(guid: string, organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdProductsGuidDelete(guid, organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductsApi.v1OrganizationIdProductsGuidDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Gets Product Information for the product with the given Id.
         * @summary Get product
         * @param {string} guid Unique identifier for the Product
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdProductsGuidGet(guid: string, organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductReadModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdProductsGuidGet(guid, organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductsApi.v1OrganizationIdProductsGuidGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update an existing product.
         * @summary Update product
         * @param {string} guid Unique identifier for the product
         * @param {string} organizationId 
         * @param {ProductUpdateModel} [productUpdateModel] Content of the product to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdProductsGuidPut(guid: string, organizationId: string, productUpdateModel?: ProductUpdateModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdProductsGuidPut(guid, organizationId, productUpdateModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductsApi.v1OrganizationIdProductsGuidPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Add a new product to the organization. These can then be added to invoices.
         * @summary Create product
         * @param {string} organizationId 
         * @param {ProductCreateModel} [productCreateModel] Content of the new product
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdProductsPost(organizationId: string, productCreateModel?: ProductCreateModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductCreatedResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdProductsPost(organizationId, productCreateModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductsApi.v1OrganizationIdProductsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProductsApi - factory interface
 * @export
 */
export const ProductsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductsApiFp(configuration)
    return {
        /**
         * Retrieve a list of products for the organization order by UpdatedAt.
         * @summary List products
         * @param {ProductsApiV1OrganizationIdProductsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdProductsGet(requestParameters: ProductsApiV1OrganizationIdProductsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProductReadModelDineroCollection> {
            return localVarFp.v1OrganizationIdProductsGet(requestParameters.organizationId, requestParameters.fields, requestParameters.freeTextSearch, requestParameters.queryFilter, requestParameters.changesSince, requestParameters.deletedOnly, requestParameters.page, requestParameters.pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a product.
         * @summary Delete product
         * @param {ProductsApiV1OrganizationIdProductsGuidDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdProductsGuidDelete(requestParameters: ProductsApiV1OrganizationIdProductsGuidDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1OrganizationIdProductsGuidDelete(requestParameters.guid, requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets Product Information for the product with the given Id.
         * @summary Get product
         * @param {ProductsApiV1OrganizationIdProductsGuidGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdProductsGuidGet(requestParameters: ProductsApiV1OrganizationIdProductsGuidGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProductReadModel> {
            return localVarFp.v1OrganizationIdProductsGuidGet(requestParameters.guid, requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing product.
         * @summary Update product
         * @param {ProductsApiV1OrganizationIdProductsGuidPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdProductsGuidPut(requestParameters: ProductsApiV1OrganizationIdProductsGuidPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1OrganizationIdProductsGuidPut(requestParameters.guid, requestParameters.organizationId, requestParameters.productUpdateModel, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a new product to the organization. These can then be added to invoices.
         * @summary Create product
         * @param {ProductsApiV1OrganizationIdProductsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdProductsPost(requestParameters: ProductsApiV1OrganizationIdProductsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ProductCreatedResult> {
            return localVarFp.v1OrganizationIdProductsPost(requestParameters.organizationId, requestParameters.productCreateModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for v1OrganizationIdProductsGet operation in ProductsApi.
 * @export
 * @interface ProductsApiV1OrganizationIdProductsGetRequest
 */
export interface ProductsApiV1OrganizationIdProductsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ProductsApiV1OrganizationIdProductsGet
     */
    readonly organizationId: string

    /**
     * A comma separated list of fields to include in the response.              Possible values are Name,ProductNumber,Quantity,Unit,AccountNumber,BaseAmountValue,BaseAmountValueInclVat,TotalAmount,TotalAmountInclVat,ExternalReference,CreatedAt,UpdatedAt and DeletedAt.              Notice that it\&#39;s not case sensitive, the property name will be returned the way you request it. If left empty it defaults to Name and ProductGuid.
     * @type {string}
     * @memberof ProductsApiV1OrganizationIdProductsGet
     */
    readonly fields?: string

    /**
     * A free text search performed on Name and ProductNumber. Can be left empty.
     * @type {string}
     * @memberof ProductsApiV1OrganizationIdProductsGet
     */
    readonly freeTextSearch?: string

    /**
     * Filter specific for products. Filtering can be applied to following fields: Name, ProductNumber, ExternalReference.              See API documentation for filtering format. If left empty no filtering is applied.
     * @type {string}
     * @memberof ProductsApiV1OrganizationIdProductsGet
     */
    readonly queryFilter?: string

    /**
     * [Generic Filter Option] Only return products that was created, deleted or updated at or after given time.              If left empty, this filter will not be applied, and products will be returned regardless of change history.              The time must be UTC and in the format \&#39;YYYY-MM-DDTHH:mm:ssZ\&#39; example: \&#39;2015-08-18T06:36:22Z\&#39;.
     * @type {string}
     * @memberof ProductsApiV1OrganizationIdProductsGet
     */
    readonly changesSince?: string

    /**
     * [Generic Filter Option] Only select deleted products. If left empty, will default to false.
     * @type {boolean}
     * @memberof ProductsApiV1OrganizationIdProductsGet
     */
    readonly deletedOnly?: boolean

    /**
     * The 0-based page number
     * @type {number}
     * @memberof ProductsApiV1OrganizationIdProductsGet
     */
    readonly page?: number

    /**
     * The maximum number of items to include in a page. Maximum 1000.
     * @type {number}
     * @memberof ProductsApiV1OrganizationIdProductsGet
     */
    readonly pageSize?: number
}

/**
 * Request parameters for v1OrganizationIdProductsGuidDelete operation in ProductsApi.
 * @export
 * @interface ProductsApiV1OrganizationIdProductsGuidDeleteRequest
 */
export interface ProductsApiV1OrganizationIdProductsGuidDeleteRequest {
    /**
     * Unique identifier for the product
     * @type {string}
     * @memberof ProductsApiV1OrganizationIdProductsGuidDelete
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof ProductsApiV1OrganizationIdProductsGuidDelete
     */
    readonly organizationId: string
}

/**
 * Request parameters for v1OrganizationIdProductsGuidGet operation in ProductsApi.
 * @export
 * @interface ProductsApiV1OrganizationIdProductsGuidGetRequest
 */
export interface ProductsApiV1OrganizationIdProductsGuidGetRequest {
    /**
     * Unique identifier for the Product
     * @type {string}
     * @memberof ProductsApiV1OrganizationIdProductsGuidGet
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof ProductsApiV1OrganizationIdProductsGuidGet
     */
    readonly organizationId: string
}

/**
 * Request parameters for v1OrganizationIdProductsGuidPut operation in ProductsApi.
 * @export
 * @interface ProductsApiV1OrganizationIdProductsGuidPutRequest
 */
export interface ProductsApiV1OrganizationIdProductsGuidPutRequest {
    /**
     * Unique identifier for the product
     * @type {string}
     * @memberof ProductsApiV1OrganizationIdProductsGuidPut
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof ProductsApiV1OrganizationIdProductsGuidPut
     */
    readonly organizationId: string

    /**
     * Content of the product to update
     * @type {ProductUpdateModel}
     * @memberof ProductsApiV1OrganizationIdProductsGuidPut
     */
    readonly productUpdateModel?: ProductUpdateModel
}

/**
 * Request parameters for v1OrganizationIdProductsPost operation in ProductsApi.
 * @export
 * @interface ProductsApiV1OrganizationIdProductsPostRequest
 */
export interface ProductsApiV1OrganizationIdProductsPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ProductsApiV1OrganizationIdProductsPost
     */
    readonly organizationId: string

    /**
     * Content of the new product
     * @type {ProductCreateModel}
     * @memberof ProductsApiV1OrganizationIdProductsPost
     */
    readonly productCreateModel?: ProductCreateModel
}

/**
 * ProductsApi - object-oriented interface
 * @export
 * @class ProductsApi
 * @extends {BaseAPI}
 */
export class ProductsApi extends BaseAPI {
    /**
     * Retrieve a list of products for the organization order by UpdatedAt.
     * @summary List products
     * @param {ProductsApiV1OrganizationIdProductsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public v1OrganizationIdProductsGet(requestParameters: ProductsApiV1OrganizationIdProductsGetRequest, options?: RawAxiosRequestConfig) {
        return ProductsApiFp(this.configuration).v1OrganizationIdProductsGet(requestParameters.organizationId, requestParameters.fields, requestParameters.freeTextSearch, requestParameters.queryFilter, requestParameters.changesSince, requestParameters.deletedOnly, requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a product.
     * @summary Delete product
     * @param {ProductsApiV1OrganizationIdProductsGuidDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public v1OrganizationIdProductsGuidDelete(requestParameters: ProductsApiV1OrganizationIdProductsGuidDeleteRequest, options?: RawAxiosRequestConfig) {
        return ProductsApiFp(this.configuration).v1OrganizationIdProductsGuidDelete(requestParameters.guid, requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets Product Information for the product with the given Id.
     * @summary Get product
     * @param {ProductsApiV1OrganizationIdProductsGuidGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public v1OrganizationIdProductsGuidGet(requestParameters: ProductsApiV1OrganizationIdProductsGuidGetRequest, options?: RawAxiosRequestConfig) {
        return ProductsApiFp(this.configuration).v1OrganizationIdProductsGuidGet(requestParameters.guid, requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an existing product.
     * @summary Update product
     * @param {ProductsApiV1OrganizationIdProductsGuidPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public v1OrganizationIdProductsGuidPut(requestParameters: ProductsApiV1OrganizationIdProductsGuidPutRequest, options?: RawAxiosRequestConfig) {
        return ProductsApiFp(this.configuration).v1OrganizationIdProductsGuidPut(requestParameters.guid, requestParameters.organizationId, requestParameters.productUpdateModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a new product to the organization. These can then be added to invoices.
     * @summary Create product
     * @param {ProductsApiV1OrganizationIdProductsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductsApi
     */
    public v1OrganizationIdProductsPost(requestParameters: ProductsApiV1OrganizationIdProductsPostRequest, options?: RawAxiosRequestConfig) {
        return ProductsApiFp(this.configuration).v1OrganizationIdProductsPost(requestParameters.organizationId, requestParameters.productCreateModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/* tslint:disable */
/* eslint-disable */
/**
 * Dinero API
 * Welcome to our endpoint documentation. Please try to carefully read our general documentation found on <a href=\"https://developer.dinero.dk/\">developer.dinero.dk</a> for information regarding the authorization proces, status and errorcodes, FAQ, Postman tutorial etc. <br><br>Once authorized, you simply add \'Authorization: Bearer <access-token>\' to the header of your requests. On the page below, you\'ll find all our endpoints documented as well as possible, but if you have any questions regarding an endpoint, or an error in the description, please contact us on <a href=\"mailto:api@dinero.dk\">api@dinero.dk.</a> 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreatedPaymentResponse } from '../model';
// @ts-ignore
import type { DeletedPaymentResponse } from '../model';
// @ts-ignore
import type { PaymentReadModel } from '../model';
// @ts-ignore
import type { PurchaseVoucherCreditPaymentCreateModel } from '../model';
/**
 * PurchaseVoucherCreditPaymentsApi - axios parameter creator
 * @export
 */
export const PurchaseVoucherCreditPaymentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the payment from a credit purchase voucher or a purchase credit note which is not connected to a seperate purchase.
         * @summary Get payments for credit purchase voucher or credit note
         * @param {string} id Guid for the voucher or purchase voucher credit note
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdPurchaseVouchersIdPaymentsGet: async (id: string, organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1OrganizationIdPurchaseVouchersIdPaymentsGet', 'id', id)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdPurchaseVouchersIdPaymentsGet', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/purchase-vouchers/{id}/payments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a payment from a credit purchase voucher or a purchase credit note which is not connected to a seperate purchase.
         * @summary Delete payment from credit purchase voucher or credit note
         * @param {string} id Guid for the voucher
         * @param {string} paymentId The payment guid
         * @param {string} timestamp Version of the voucher
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdPurchaseVouchersIdPaymentsPaymentIdTimestampDelete: async (id: string, paymentId: string, timestamp: string, organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1OrganizationIdPurchaseVouchersIdPaymentsPaymentIdTimestampDelete', 'id', id)
            // verify required parameter 'paymentId' is not null or undefined
            assertParamExists('v1OrganizationIdPurchaseVouchersIdPaymentsPaymentIdTimestampDelete', 'paymentId', paymentId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('v1OrganizationIdPurchaseVouchersIdPaymentsPaymentIdTimestampDelete', 'timestamp', timestamp)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdPurchaseVouchersIdPaymentsPaymentIdTimestampDelete', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/purchase-vouchers/{id}/payments/{paymentId}/{timestamp}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"paymentId"}}`, encodeURIComponent(String(paymentId)))
                .replace(`{${"timestamp"}}`, encodeURIComponent(String(timestamp)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a payment to a credit purchase voucher or a purchase credit note which is not connected to a seperate purchase.
         * @summary Create payment for credit purchase voucher or credit note
         * @param {string} id Guid for the voucher
         * @param {string} organizationId 
         * @param {PurchaseVoucherCreditPaymentCreateModel} [purchaseVoucherCreditPaymentCreateModel] The payment details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdPurchaseVouchersIdPaymentsPost: async (id: string, organizationId: string, purchaseVoucherCreditPaymentCreateModel?: PurchaseVoucherCreditPaymentCreateModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1OrganizationIdPurchaseVouchersIdPaymentsPost', 'id', id)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdPurchaseVouchersIdPaymentsPost', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/purchase-vouchers/{id}/payments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(purchaseVoucherCreditPaymentCreateModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PurchaseVoucherCreditPaymentsApi - functional programming interface
 * @export
 */
export const PurchaseVoucherCreditPaymentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PurchaseVoucherCreditPaymentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get the payment from a credit purchase voucher or a purchase credit note which is not connected to a seperate purchase.
         * @summary Get payments for credit purchase voucher or credit note
         * @param {string} id Guid for the voucher or purchase voucher credit note
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdPurchaseVouchersIdPaymentsGet(id: string, organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PaymentReadModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdPurchaseVouchersIdPaymentsGet(id, organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PurchaseVoucherCreditPaymentsApi.v1OrganizationIdPurchaseVouchersIdPaymentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a payment from a credit purchase voucher or a purchase credit note which is not connected to a seperate purchase.
         * @summary Delete payment from credit purchase voucher or credit note
         * @param {string} id Guid for the voucher
         * @param {string} paymentId The payment guid
         * @param {string} timestamp Version of the voucher
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdPurchaseVouchersIdPaymentsPaymentIdTimestampDelete(id: string, paymentId: string, timestamp: string, organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeletedPaymentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdPurchaseVouchersIdPaymentsPaymentIdTimestampDelete(id, paymentId, timestamp, organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PurchaseVoucherCreditPaymentsApi.v1OrganizationIdPurchaseVouchersIdPaymentsPaymentIdTimestampDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Add a payment to a credit purchase voucher or a purchase credit note which is not connected to a seperate purchase.
         * @summary Create payment for credit purchase voucher or credit note
         * @param {string} id Guid for the voucher
         * @param {string} organizationId 
         * @param {PurchaseVoucherCreditPaymentCreateModel} [purchaseVoucherCreditPaymentCreateModel] The payment details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdPurchaseVouchersIdPaymentsPost(id: string, organizationId: string, purchaseVoucherCreditPaymentCreateModel?: PurchaseVoucherCreditPaymentCreateModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatedPaymentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdPurchaseVouchersIdPaymentsPost(id, organizationId, purchaseVoucherCreditPaymentCreateModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PurchaseVoucherCreditPaymentsApi.v1OrganizationIdPurchaseVouchersIdPaymentsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PurchaseVoucherCreditPaymentsApi - factory interface
 * @export
 */
export const PurchaseVoucherCreditPaymentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PurchaseVoucherCreditPaymentsApiFp(configuration)
    return {
        /**
         * Get the payment from a credit purchase voucher or a purchase credit note which is not connected to a seperate purchase.
         * @summary Get payments for credit purchase voucher or credit note
         * @param {PurchaseVoucherCreditPaymentsApiV1OrganizationIdPurchaseVouchersIdPaymentsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdPurchaseVouchersIdPaymentsGet(requestParameters: PurchaseVoucherCreditPaymentsApiV1OrganizationIdPurchaseVouchersIdPaymentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<PaymentReadModel>> {
            return localVarFp.v1OrganizationIdPurchaseVouchersIdPaymentsGet(requestParameters.id, requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a payment from a credit purchase voucher or a purchase credit note which is not connected to a seperate purchase.
         * @summary Delete payment from credit purchase voucher or credit note
         * @param {PurchaseVoucherCreditPaymentsApiV1OrganizationIdPurchaseVouchersIdPaymentsPaymentIdTimestampDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdPurchaseVouchersIdPaymentsPaymentIdTimestampDelete(requestParameters: PurchaseVoucherCreditPaymentsApiV1OrganizationIdPurchaseVouchersIdPaymentsPaymentIdTimestampDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeletedPaymentResponse> {
            return localVarFp.v1OrganizationIdPurchaseVouchersIdPaymentsPaymentIdTimestampDelete(requestParameters.id, requestParameters.paymentId, requestParameters.timestamp, requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a payment to a credit purchase voucher or a purchase credit note which is not connected to a seperate purchase.
         * @summary Create payment for credit purchase voucher or credit note
         * @param {PurchaseVoucherCreditPaymentsApiV1OrganizationIdPurchaseVouchersIdPaymentsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdPurchaseVouchersIdPaymentsPost(requestParameters: PurchaseVoucherCreditPaymentsApiV1OrganizationIdPurchaseVouchersIdPaymentsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreatedPaymentResponse> {
            return localVarFp.v1OrganizationIdPurchaseVouchersIdPaymentsPost(requestParameters.id, requestParameters.organizationId, requestParameters.purchaseVoucherCreditPaymentCreateModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for v1OrganizationIdPurchaseVouchersIdPaymentsGet operation in PurchaseVoucherCreditPaymentsApi.
 * @export
 * @interface PurchaseVoucherCreditPaymentsApiV1OrganizationIdPurchaseVouchersIdPaymentsGetRequest
 */
export interface PurchaseVoucherCreditPaymentsApiV1OrganizationIdPurchaseVouchersIdPaymentsGetRequest {
    /**
     * Guid for the voucher or purchase voucher credit note
     * @type {string}
     * @memberof PurchaseVoucherCreditPaymentsApiV1OrganizationIdPurchaseVouchersIdPaymentsGet
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof PurchaseVoucherCreditPaymentsApiV1OrganizationIdPurchaseVouchersIdPaymentsGet
     */
    readonly organizationId: string
}

/**
 * Request parameters for v1OrganizationIdPurchaseVouchersIdPaymentsPaymentIdTimestampDelete operation in PurchaseVoucherCreditPaymentsApi.
 * @export
 * @interface PurchaseVoucherCreditPaymentsApiV1OrganizationIdPurchaseVouchersIdPaymentsPaymentIdTimestampDeleteRequest
 */
export interface PurchaseVoucherCreditPaymentsApiV1OrganizationIdPurchaseVouchersIdPaymentsPaymentIdTimestampDeleteRequest {
    /**
     * Guid for the voucher
     * @type {string}
     * @memberof PurchaseVoucherCreditPaymentsApiV1OrganizationIdPurchaseVouchersIdPaymentsPaymentIdTimestampDelete
     */
    readonly id: string

    /**
     * The payment guid
     * @type {string}
     * @memberof PurchaseVoucherCreditPaymentsApiV1OrganizationIdPurchaseVouchersIdPaymentsPaymentIdTimestampDelete
     */
    readonly paymentId: string

    /**
     * Version of the voucher
     * @type {string}
     * @memberof PurchaseVoucherCreditPaymentsApiV1OrganizationIdPurchaseVouchersIdPaymentsPaymentIdTimestampDelete
     */
    readonly timestamp: string

    /**
     * 
     * @type {string}
     * @memberof PurchaseVoucherCreditPaymentsApiV1OrganizationIdPurchaseVouchersIdPaymentsPaymentIdTimestampDelete
     */
    readonly organizationId: string
}

/**
 * Request parameters for v1OrganizationIdPurchaseVouchersIdPaymentsPost operation in PurchaseVoucherCreditPaymentsApi.
 * @export
 * @interface PurchaseVoucherCreditPaymentsApiV1OrganizationIdPurchaseVouchersIdPaymentsPostRequest
 */
export interface PurchaseVoucherCreditPaymentsApiV1OrganizationIdPurchaseVouchersIdPaymentsPostRequest {
    /**
     * Guid for the voucher
     * @type {string}
     * @memberof PurchaseVoucherCreditPaymentsApiV1OrganizationIdPurchaseVouchersIdPaymentsPost
     */
    readonly id: string

    /**
     * 
     * @type {string}
     * @memberof PurchaseVoucherCreditPaymentsApiV1OrganizationIdPurchaseVouchersIdPaymentsPost
     */
    readonly organizationId: string

    /**
     * The payment details
     * @type {PurchaseVoucherCreditPaymentCreateModel}
     * @memberof PurchaseVoucherCreditPaymentsApiV1OrganizationIdPurchaseVouchersIdPaymentsPost
     */
    readonly purchaseVoucherCreditPaymentCreateModel?: PurchaseVoucherCreditPaymentCreateModel
}

/**
 * PurchaseVoucherCreditPaymentsApi - object-oriented interface
 * @export
 * @class PurchaseVoucherCreditPaymentsApi
 * @extends {BaseAPI}
 */
export class PurchaseVoucherCreditPaymentsApi extends BaseAPI {
    /**
     * Get the payment from a credit purchase voucher or a purchase credit note which is not connected to a seperate purchase.
     * @summary Get payments for credit purchase voucher or credit note
     * @param {PurchaseVoucherCreditPaymentsApiV1OrganizationIdPurchaseVouchersIdPaymentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseVoucherCreditPaymentsApi
     */
    public v1OrganizationIdPurchaseVouchersIdPaymentsGet(requestParameters: PurchaseVoucherCreditPaymentsApiV1OrganizationIdPurchaseVouchersIdPaymentsGetRequest, options?: RawAxiosRequestConfig) {
        return PurchaseVoucherCreditPaymentsApiFp(this.configuration).v1OrganizationIdPurchaseVouchersIdPaymentsGet(requestParameters.id, requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a payment from a credit purchase voucher or a purchase credit note which is not connected to a seperate purchase.
     * @summary Delete payment from credit purchase voucher or credit note
     * @param {PurchaseVoucherCreditPaymentsApiV1OrganizationIdPurchaseVouchersIdPaymentsPaymentIdTimestampDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseVoucherCreditPaymentsApi
     */
    public v1OrganizationIdPurchaseVouchersIdPaymentsPaymentIdTimestampDelete(requestParameters: PurchaseVoucherCreditPaymentsApiV1OrganizationIdPurchaseVouchersIdPaymentsPaymentIdTimestampDeleteRequest, options?: RawAxiosRequestConfig) {
        return PurchaseVoucherCreditPaymentsApiFp(this.configuration).v1OrganizationIdPurchaseVouchersIdPaymentsPaymentIdTimestampDelete(requestParameters.id, requestParameters.paymentId, requestParameters.timestamp, requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a payment to a credit purchase voucher or a purchase credit note which is not connected to a seperate purchase.
     * @summary Create payment for credit purchase voucher or credit note
     * @param {PurchaseVoucherCreditPaymentsApiV1OrganizationIdPurchaseVouchersIdPaymentsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseVoucherCreditPaymentsApi
     */
    public v1OrganizationIdPurchaseVouchersIdPaymentsPost(requestParameters: PurchaseVoucherCreditPaymentsApiV1OrganizationIdPurchaseVouchersIdPaymentsPostRequest, options?: RawAxiosRequestConfig) {
        return PurchaseVoucherCreditPaymentsApiFp(this.configuration).v1OrganizationIdPurchaseVouchersIdPaymentsPost(requestParameters.id, requestParameters.organizationId, requestParameters.purchaseVoucherCreditPaymentCreateModel, options).then((request) => request(this.axios, this.basePath));
    }
}


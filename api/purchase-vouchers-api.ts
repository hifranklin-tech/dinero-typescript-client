/* tslint:disable */
/* eslint-disable */
/**
 * Dinero API
 * Welcome to our endpoint documentation. Please try to carefully read our general documentation found on <a href=\"https://developer.dinero.dk/\">developer.dinero.dk</a> for information regarding the authorization proces, status and errorcodes, FAQ, Postman tutorial etc. <br><br>Once authorized, you simply add \'Authorization: Bearer <access-token>\' to the header of your requests. On the page below, you\'ll find all our endpoints documented as well as possible, but if you have any questions regarding an endpoint, or an error in the description, please contact us on <a href=\"mailto:api@dinero.dk\">api@dinero.dk.</a> 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { BookModel } from '../model';
// @ts-ignore
import type { CreatedResponseModel } from '../model';
// @ts-ignore
import type { CreditNoteForPurchaseVoucherRequest } from '../model';
// @ts-ignore
import type { PurchaseVoucherCreateModelV2 } from '../model';
// @ts-ignore
import type { PurchaseVoucherFetchReadModel } from '../model';
// @ts-ignore
import type { PurchaseVoucherReadModelV2 } from '../model';
// @ts-ignore
import type { PurchaseVoucherUpdateModel } from '../model';
// @ts-ignore
import type { SimilarPurchaseVoucherReadModel } from '../model';
// @ts-ignore
import type { TimestampObject } from '../model';
/**
 * PurchaseVouchersApi - axios parameter creator
 * @export
 */
export const PurchaseVouchersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Update a purchase voucher draft, you cannot update booked purchase vouchers.  Supports AccountTagName on voucher lines.
         * @summary Update purchase voucher v2
         * @param {string} guid Guid of the purchase voucher to update
         * @param {string} organizationId 
         * @param {PurchaseVoucherUpdateModel} [purchaseVoucherUpdateModel] Data to update the purchase voucher with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11OrganizationIdVouchersPurchaseGuidPut: async (guid: string, organizationId: string, purchaseVoucherUpdateModel?: PurchaseVoucherUpdateModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('v11OrganizationIdVouchersPurchaseGuidPut', 'guid', guid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v11OrganizationIdVouchersPurchaseGuidPut', 'organizationId', organizationId)
            const localVarPath = `/v1.1/{organizationId}/vouchers/purchase/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(purchaseVoucherUpdateModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new purchase voucher draft. This voucher will have no effect on the accounts untill booked, and can be found under \"Bilagsoversigt\" inside Dinero.  Most users will likely expect this to be booked automatically incase it is created through the API.  Do note that if the credit option is chosen, payments must be added afterwards through the add payment endpoints in the PurchaseVoucherCreditPayment section.  Does not support AccountTagName.
         * @summary Create purchase voucher
         * @param {string} organizationId 
         * @param {PurchaseVoucherCreateModelV2} [purchaseVoucherCreateModelV2] Data to create the voucher from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11OrganizationIdVouchersPurchasePost: async (organizationId: string, purchaseVoucherCreateModelV2?: PurchaseVoucherCreateModelV2, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v11OrganizationIdVouchersPurchasePost', 'organizationId', organizationId)
            const localVarPath = `/v1.1/{organizationId}/vouchers/purchase`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(purchaseVoucherCreateModelV2, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new purchase voucher draft. This voucher will have no effect on the accounts untill booked, and can be found under \"Bilagsoversigt\" inside Dinero.  Most users will likely expect this to be booked automatically incase it is created through the API.  Do note that if the credit option is chosen, payments must be added afterwards through the add payment endpoints in the PurchaseVoucherCreditPayment section.  Supports AccountTagName.
         * @summary Create purchase voucher V2
         * @param {string} organizationId 
         * @param {PurchaseVoucherCreateModelV2} [purchaseVoucherCreateModelV2] Data to create the voucher from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v12OrganizationIdVouchersPurchasePost: async (organizationId: string, purchaseVoucherCreateModelV2?: PurchaseVoucherCreateModelV2, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v12OrganizationIdVouchersPurchasePost', 'organizationId', organizationId)
            const localVarPath = `/v1.2/{organizationId}/vouchers/purchase`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(purchaseVoucherCreateModelV2, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a purchase to get totals.
         * @summary Get purchase totals
         * @param {string} organizationId 
         * @param {PurchaseVoucherCreateModelV2} [purchaseVoucherCreateModelV2] Data to create the voucher from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdVouchersPurchaseFetchPost: async (organizationId: string, purchaseVoucherCreateModelV2?: PurchaseVoucherCreateModelV2, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdVouchersPurchaseFetchPost', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/vouchers/purchase/fetch`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(purchaseVoucherCreateModelV2, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets purchase voucher Guid by fileGuid.
         * @summary Get purchase draft Guid by fileGuid
         * @param {string} fileGuid FileGuid used to find purchase
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdVouchersPurchaseFileguidFileGuidGet: async (fileGuid: string, organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileGuid' is not null or undefined
            assertParamExists('v1OrganizationIdVouchersPurchaseFileguidFileGuidGet', 'fileGuid', fileGuid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdVouchersPurchaseFileguidFileGuidGet', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/vouchers/purchase/fileguid/{fileGuid}`
                .replace(`{${"fileGuid"}}`, encodeURIComponent(String(fileGuid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Book a purchase voucher.
         * @summary Book purchase voucher
         * @param {string} guid guid of the voucher to book
         * @param {string} organizationId 
         * @param {BookModel} [bookModel] Model containing timestamp and optional vouchernumber to use for booking
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdVouchersPurchaseGuidBookPost: async (guid: string, organizationId: string, bookModel?: BookModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('v1OrganizationIdVouchersPurchaseGuidBookPost', 'guid', guid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdVouchersPurchaseGuidBookPost', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/vouchers/purchase/{guid}/book`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a purchase voucher. Incase the voucher is a draft, the draft will simply be removed.  If already booked then it will add an offset entry for the purchase voucher so it will have no effect, but still be present in the bookkeeping, since it is not allowed under danish law to completely remove something, that has already been booked.
         * @summary Delete purchase voucher
         * @param {string} guid Guid of the voucher to delete
         * @param {string} organizationId 
         * @param {TimestampObject} [timestampObject] Timestamp used for version validation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdVouchersPurchaseGuidDelete: async (guid: string, organizationId: string, timestampObject?: TimestampObject, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('v1OrganizationIdVouchersPurchaseGuidDelete', 'guid', guid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdVouchersPurchaseGuidDelete', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/vouchers/purchase/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(timestampObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate and saves a credit note draft of a given booked purchase voucher.
         * @summary Create credit note from purchase voucher
         * @param {string} guid Guid of the invoice
         * @param {string} organizationId 
         * @param {CreditNoteForPurchaseVoucherRequest} [creditNoteForPurchaseVoucherRequest] Model containing optional timestamp, voucher date and file guid parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdVouchersPurchaseGuidGenerateCreditnotePost: async (guid: string, organizationId: string, creditNoteForPurchaseVoucherRequest?: CreditNoteForPurchaseVoucherRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('v1OrganizationIdVouchersPurchaseGuidGenerateCreditnotePost', 'guid', guid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdVouchersPurchaseGuidGenerateCreditnotePost', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/vouchers/purchase/{guid}/generate-creditnote`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(creditNoteForPurchaseVoucherRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a purchase voucher by its guid.
         * @summary Get purchase voucher
         * @param {string} guid Guid of the voucher to get
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdVouchersPurchaseGuidGet: async (guid: string, organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('v1OrganizationIdVouchersPurchaseGuidGet', 'guid', guid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdVouchersPurchaseGuidGet', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/vouchers/purchase/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a purchase voucher draft, you cannot update booked purchase vouchers.  Does not support AccountTagName on voucher lines.
         * @summary Update purchase voucher
         * @param {string} guid Guid of the purchase voucher to update
         * @param {string} organizationId 
         * @param {PurchaseVoucherUpdateModel} [purchaseVoucherUpdateModel] Data to update the purchase voucher with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdVouchersPurchaseGuidPut: async (guid: string, organizationId: string, purchaseVoucherUpdateModel?: PurchaseVoucherUpdateModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('v1OrganizationIdVouchersPurchaseGuidPut', 'guid', guid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdVouchersPurchaseGuidPut', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/vouchers/purchase/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(purchaseVoucherUpdateModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Looks for similar purchase.
         * @summary Get similar purchase
         * @param {string} organizationId 
         * @param {PurchaseVoucherCreateModelV2} [purchaseVoucherCreateModelV2] Data to create the voucher from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdVouchersPurchaseSimilarPost: async (organizationId: string, purchaseVoucherCreateModelV2?: PurchaseVoucherCreateModelV2, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdVouchersPurchaseSimilarPost', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/vouchers/purchase/similar`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(purchaseVoucherCreateModelV2, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PurchaseVouchersApi - functional programming interface
 * @export
 */
export const PurchaseVouchersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PurchaseVouchersApiAxiosParamCreator(configuration)
    return {
        /**
         * Update a purchase voucher draft, you cannot update booked purchase vouchers.  Supports AccountTagName on voucher lines.
         * @summary Update purchase voucher v2
         * @param {string} guid Guid of the purchase voucher to update
         * @param {string} organizationId 
         * @param {PurchaseVoucherUpdateModel} [purchaseVoucherUpdateModel] Data to update the purchase voucher with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v11OrganizationIdVouchersPurchaseGuidPut(guid: string, organizationId: string, purchaseVoucherUpdateModel?: PurchaseVoucherUpdateModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PurchaseVoucherReadModelV2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v11OrganizationIdVouchersPurchaseGuidPut(guid, organizationId, purchaseVoucherUpdateModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PurchaseVouchersApi.v11OrganizationIdVouchersPurchaseGuidPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a new purchase voucher draft. This voucher will have no effect on the accounts untill booked, and can be found under \"Bilagsoversigt\" inside Dinero.  Most users will likely expect this to be booked automatically incase it is created through the API.  Do note that if the credit option is chosen, payments must be added afterwards through the add payment endpoints in the PurchaseVoucherCreditPayment section.  Does not support AccountTagName.
         * @summary Create purchase voucher
         * @param {string} organizationId 
         * @param {PurchaseVoucherCreateModelV2} [purchaseVoucherCreateModelV2] Data to create the voucher from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v11OrganizationIdVouchersPurchasePost(organizationId: string, purchaseVoucherCreateModelV2?: PurchaseVoucherCreateModelV2, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PurchaseVoucherReadModelV2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v11OrganizationIdVouchersPurchasePost(organizationId, purchaseVoucherCreateModelV2, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PurchaseVouchersApi.v11OrganizationIdVouchersPurchasePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a new purchase voucher draft. This voucher will have no effect on the accounts untill booked, and can be found under \"Bilagsoversigt\" inside Dinero.  Most users will likely expect this to be booked automatically incase it is created through the API.  Do note that if the credit option is chosen, payments must be added afterwards through the add payment endpoints in the PurchaseVoucherCreditPayment section.  Supports AccountTagName.
         * @summary Create purchase voucher V2
         * @param {string} organizationId 
         * @param {PurchaseVoucherCreateModelV2} [purchaseVoucherCreateModelV2] Data to create the voucher from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v12OrganizationIdVouchersPurchasePost(organizationId: string, purchaseVoucherCreateModelV2?: PurchaseVoucherCreateModelV2, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PurchaseVoucherReadModelV2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v12OrganizationIdVouchersPurchasePost(organizationId, purchaseVoucherCreateModelV2, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PurchaseVouchersApi.v12OrganizationIdVouchersPurchasePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch a purchase to get totals.
         * @summary Get purchase totals
         * @param {string} organizationId 
         * @param {PurchaseVoucherCreateModelV2} [purchaseVoucherCreateModelV2] Data to create the voucher from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdVouchersPurchaseFetchPost(organizationId: string, purchaseVoucherCreateModelV2?: PurchaseVoucherCreateModelV2, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PurchaseVoucherFetchReadModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdVouchersPurchaseFetchPost(organizationId, purchaseVoucherCreateModelV2, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PurchaseVouchersApi.v1OrganizationIdVouchersPurchaseFetchPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Gets purchase voucher Guid by fileGuid.
         * @summary Get purchase draft Guid by fileGuid
         * @param {string} fileGuid FileGuid used to find purchase
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdVouchersPurchaseFileguidFileGuidGet(fileGuid: string, organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdVouchersPurchaseFileguidFileGuidGet(fileGuid, organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PurchaseVouchersApi.v1OrganizationIdVouchersPurchaseFileguidFileGuidGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Book a purchase voucher.
         * @summary Book purchase voucher
         * @param {string} guid guid of the voucher to book
         * @param {string} organizationId 
         * @param {BookModel} [bookModel] Model containing timestamp and optional vouchernumber to use for booking
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdVouchersPurchaseGuidBookPost(guid: string, organizationId: string, bookModel?: BookModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PurchaseVoucherReadModelV2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdVouchersPurchaseGuidBookPost(guid, organizationId, bookModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PurchaseVouchersApi.v1OrganizationIdVouchersPurchaseGuidBookPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a purchase voucher. Incase the voucher is a draft, the draft will simply be removed.  If already booked then it will add an offset entry for the purchase voucher so it will have no effect, but still be present in the bookkeeping, since it is not allowed under danish law to completely remove something, that has already been booked.
         * @summary Delete purchase voucher
         * @param {string} guid Guid of the voucher to delete
         * @param {string} organizationId 
         * @param {TimestampObject} [timestampObject] Timestamp used for version validation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdVouchersPurchaseGuidDelete(guid: string, organizationId: string, timestampObject?: TimestampObject, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdVouchersPurchaseGuidDelete(guid, organizationId, timestampObject, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PurchaseVouchersApi.v1OrganizationIdVouchersPurchaseGuidDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Generate and saves a credit note draft of a given booked purchase voucher.
         * @summary Create credit note from purchase voucher
         * @param {string} guid Guid of the invoice
         * @param {string} organizationId 
         * @param {CreditNoteForPurchaseVoucherRequest} [creditNoteForPurchaseVoucherRequest] Model containing optional timestamp, voucher date and file guid parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdVouchersPurchaseGuidGenerateCreditnotePost(guid: string, organizationId: string, creditNoteForPurchaseVoucherRequest?: CreditNoteForPurchaseVoucherRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatedResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdVouchersPurchaseGuidGenerateCreditnotePost(guid, organizationId, creditNoteForPurchaseVoucherRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PurchaseVouchersApi.v1OrganizationIdVouchersPurchaseGuidGenerateCreditnotePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Gets a purchase voucher by its guid.
         * @summary Get purchase voucher
         * @param {string} guid Guid of the voucher to get
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdVouchersPurchaseGuidGet(guid: string, organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PurchaseVoucherReadModelV2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdVouchersPurchaseGuidGet(guid, organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PurchaseVouchersApi.v1OrganizationIdVouchersPurchaseGuidGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update a purchase voucher draft, you cannot update booked purchase vouchers.  Does not support AccountTagName on voucher lines.
         * @summary Update purchase voucher
         * @param {string} guid Guid of the purchase voucher to update
         * @param {string} organizationId 
         * @param {PurchaseVoucherUpdateModel} [purchaseVoucherUpdateModel] Data to update the purchase voucher with
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdVouchersPurchaseGuidPut(guid: string, organizationId: string, purchaseVoucherUpdateModel?: PurchaseVoucherUpdateModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PurchaseVoucherReadModelV2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdVouchersPurchaseGuidPut(guid, organizationId, purchaseVoucherUpdateModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PurchaseVouchersApi.v1OrganizationIdVouchersPurchaseGuidPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Looks for similar purchase.
         * @summary Get similar purchase
         * @param {string} organizationId 
         * @param {PurchaseVoucherCreateModelV2} [purchaseVoucherCreateModelV2] Data to create the voucher from
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdVouchersPurchaseSimilarPost(organizationId: string, purchaseVoucherCreateModelV2?: PurchaseVoucherCreateModelV2, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SimilarPurchaseVoucherReadModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdVouchersPurchaseSimilarPost(organizationId, purchaseVoucherCreateModelV2, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PurchaseVouchersApi.v1OrganizationIdVouchersPurchaseSimilarPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PurchaseVouchersApi - factory interface
 * @export
 */
export const PurchaseVouchersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PurchaseVouchersApiFp(configuration)
    return {
        /**
         * Update a purchase voucher draft, you cannot update booked purchase vouchers.  Supports AccountTagName on voucher lines.
         * @summary Update purchase voucher v2
         * @param {PurchaseVouchersApiV11OrganizationIdVouchersPurchaseGuidPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11OrganizationIdVouchersPurchaseGuidPut(requestParameters: PurchaseVouchersApiV11OrganizationIdVouchersPurchaseGuidPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<PurchaseVoucherReadModelV2> {
            return localVarFp.v11OrganizationIdVouchersPurchaseGuidPut(requestParameters.guid, requestParameters.organizationId, requestParameters.purchaseVoucherUpdateModel, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new purchase voucher draft. This voucher will have no effect on the accounts untill booked, and can be found under \"Bilagsoversigt\" inside Dinero.  Most users will likely expect this to be booked automatically incase it is created through the API.  Do note that if the credit option is chosen, payments must be added afterwards through the add payment endpoints in the PurchaseVoucherCreditPayment section.  Does not support AccountTagName.
         * @summary Create purchase voucher
         * @param {PurchaseVouchersApiV11OrganizationIdVouchersPurchasePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v11OrganizationIdVouchersPurchasePost(requestParameters: PurchaseVouchersApiV11OrganizationIdVouchersPurchasePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<PurchaseVoucherReadModelV2> {
            return localVarFp.v11OrganizationIdVouchersPurchasePost(requestParameters.organizationId, requestParameters.purchaseVoucherCreateModelV2, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new purchase voucher draft. This voucher will have no effect on the accounts untill booked, and can be found under \"Bilagsoversigt\" inside Dinero.  Most users will likely expect this to be booked automatically incase it is created through the API.  Do note that if the credit option is chosen, payments must be added afterwards through the add payment endpoints in the PurchaseVoucherCreditPayment section.  Supports AccountTagName.
         * @summary Create purchase voucher V2
         * @param {PurchaseVouchersApiV12OrganizationIdVouchersPurchasePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v12OrganizationIdVouchersPurchasePost(requestParameters: PurchaseVouchersApiV12OrganizationIdVouchersPurchasePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<PurchaseVoucherReadModelV2> {
            return localVarFp.v12OrganizationIdVouchersPurchasePost(requestParameters.organizationId, requestParameters.purchaseVoucherCreateModelV2, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a purchase to get totals.
         * @summary Get purchase totals
         * @param {PurchaseVouchersApiV1OrganizationIdVouchersPurchaseFetchPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdVouchersPurchaseFetchPost(requestParameters: PurchaseVouchersApiV1OrganizationIdVouchersPurchaseFetchPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<PurchaseVoucherFetchReadModel> {
            return localVarFp.v1OrganizationIdVouchersPurchaseFetchPost(requestParameters.organizationId, requestParameters.purchaseVoucherCreateModelV2, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets purchase voucher Guid by fileGuid.
         * @summary Get purchase draft Guid by fileGuid
         * @param {PurchaseVouchersApiV1OrganizationIdVouchersPurchaseFileguidFileGuidGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdVouchersPurchaseFileguidFileGuidGet(requestParameters: PurchaseVouchersApiV1OrganizationIdVouchersPurchaseFileguidFileGuidGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<string>> {
            return localVarFp.v1OrganizationIdVouchersPurchaseFileguidFileGuidGet(requestParameters.fileGuid, requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Book a purchase voucher.
         * @summary Book purchase voucher
         * @param {PurchaseVouchersApiV1OrganizationIdVouchersPurchaseGuidBookPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdVouchersPurchaseGuidBookPost(requestParameters: PurchaseVouchersApiV1OrganizationIdVouchersPurchaseGuidBookPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<PurchaseVoucherReadModelV2> {
            return localVarFp.v1OrganizationIdVouchersPurchaseGuidBookPost(requestParameters.guid, requestParameters.organizationId, requestParameters.bookModel, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a purchase voucher. Incase the voucher is a draft, the draft will simply be removed.  If already booked then it will add an offset entry for the purchase voucher so it will have no effect, but still be present in the bookkeeping, since it is not allowed under danish law to completely remove something, that has already been booked.
         * @summary Delete purchase voucher
         * @param {PurchaseVouchersApiV1OrganizationIdVouchersPurchaseGuidDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdVouchersPurchaseGuidDelete(requestParameters: PurchaseVouchersApiV1OrganizationIdVouchersPurchaseGuidDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1OrganizationIdVouchersPurchaseGuidDelete(requestParameters.guid, requestParameters.organizationId, requestParameters.timestampObject, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate and saves a credit note draft of a given booked purchase voucher.
         * @summary Create credit note from purchase voucher
         * @param {PurchaseVouchersApiV1OrganizationIdVouchersPurchaseGuidGenerateCreditnotePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdVouchersPurchaseGuidGenerateCreditnotePost(requestParameters: PurchaseVouchersApiV1OrganizationIdVouchersPurchaseGuidGenerateCreditnotePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreatedResponseModel> {
            return localVarFp.v1OrganizationIdVouchersPurchaseGuidGenerateCreditnotePost(requestParameters.guid, requestParameters.organizationId, requestParameters.creditNoteForPurchaseVoucherRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a purchase voucher by its guid.
         * @summary Get purchase voucher
         * @param {PurchaseVouchersApiV1OrganizationIdVouchersPurchaseGuidGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdVouchersPurchaseGuidGet(requestParameters: PurchaseVouchersApiV1OrganizationIdVouchersPurchaseGuidGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<PurchaseVoucherReadModelV2> {
            return localVarFp.v1OrganizationIdVouchersPurchaseGuidGet(requestParameters.guid, requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a purchase voucher draft, you cannot update booked purchase vouchers.  Does not support AccountTagName on voucher lines.
         * @summary Update purchase voucher
         * @param {PurchaseVouchersApiV1OrganizationIdVouchersPurchaseGuidPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdVouchersPurchaseGuidPut(requestParameters: PurchaseVouchersApiV1OrganizationIdVouchersPurchaseGuidPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<PurchaseVoucherReadModelV2> {
            return localVarFp.v1OrganizationIdVouchersPurchaseGuidPut(requestParameters.guid, requestParameters.organizationId, requestParameters.purchaseVoucherUpdateModel, options).then((request) => request(axios, basePath));
        },
        /**
         * Looks for similar purchase.
         * @summary Get similar purchase
         * @param {PurchaseVouchersApiV1OrganizationIdVouchersPurchaseSimilarPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdVouchersPurchaseSimilarPost(requestParameters: PurchaseVouchersApiV1OrganizationIdVouchersPurchaseSimilarPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<SimilarPurchaseVoucherReadModel> {
            return localVarFp.v1OrganizationIdVouchersPurchaseSimilarPost(requestParameters.organizationId, requestParameters.purchaseVoucherCreateModelV2, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for v11OrganizationIdVouchersPurchaseGuidPut operation in PurchaseVouchersApi.
 * @export
 * @interface PurchaseVouchersApiV11OrganizationIdVouchersPurchaseGuidPutRequest
 */
export interface PurchaseVouchersApiV11OrganizationIdVouchersPurchaseGuidPutRequest {
    /**
     * Guid of the purchase voucher to update
     * @type {string}
     * @memberof PurchaseVouchersApiV11OrganizationIdVouchersPurchaseGuidPut
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof PurchaseVouchersApiV11OrganizationIdVouchersPurchaseGuidPut
     */
    readonly organizationId: string

    /**
     * Data to update the purchase voucher with
     * @type {PurchaseVoucherUpdateModel}
     * @memberof PurchaseVouchersApiV11OrganizationIdVouchersPurchaseGuidPut
     */
    readonly purchaseVoucherUpdateModel?: PurchaseVoucherUpdateModel
}

/**
 * Request parameters for v11OrganizationIdVouchersPurchasePost operation in PurchaseVouchersApi.
 * @export
 * @interface PurchaseVouchersApiV11OrganizationIdVouchersPurchasePostRequest
 */
export interface PurchaseVouchersApiV11OrganizationIdVouchersPurchasePostRequest {
    /**
     * 
     * @type {string}
     * @memberof PurchaseVouchersApiV11OrganizationIdVouchersPurchasePost
     */
    readonly organizationId: string

    /**
     * Data to create the voucher from
     * @type {PurchaseVoucherCreateModelV2}
     * @memberof PurchaseVouchersApiV11OrganizationIdVouchersPurchasePost
     */
    readonly purchaseVoucherCreateModelV2?: PurchaseVoucherCreateModelV2
}

/**
 * Request parameters for v12OrganizationIdVouchersPurchasePost operation in PurchaseVouchersApi.
 * @export
 * @interface PurchaseVouchersApiV12OrganizationIdVouchersPurchasePostRequest
 */
export interface PurchaseVouchersApiV12OrganizationIdVouchersPurchasePostRequest {
    /**
     * 
     * @type {string}
     * @memberof PurchaseVouchersApiV12OrganizationIdVouchersPurchasePost
     */
    readonly organizationId: string

    /**
     * Data to create the voucher from
     * @type {PurchaseVoucherCreateModelV2}
     * @memberof PurchaseVouchersApiV12OrganizationIdVouchersPurchasePost
     */
    readonly purchaseVoucherCreateModelV2?: PurchaseVoucherCreateModelV2
}

/**
 * Request parameters for v1OrganizationIdVouchersPurchaseFetchPost operation in PurchaseVouchersApi.
 * @export
 * @interface PurchaseVouchersApiV1OrganizationIdVouchersPurchaseFetchPostRequest
 */
export interface PurchaseVouchersApiV1OrganizationIdVouchersPurchaseFetchPostRequest {
    /**
     * 
     * @type {string}
     * @memberof PurchaseVouchersApiV1OrganizationIdVouchersPurchaseFetchPost
     */
    readonly organizationId: string

    /**
     * Data to create the voucher from
     * @type {PurchaseVoucherCreateModelV2}
     * @memberof PurchaseVouchersApiV1OrganizationIdVouchersPurchaseFetchPost
     */
    readonly purchaseVoucherCreateModelV2?: PurchaseVoucherCreateModelV2
}

/**
 * Request parameters for v1OrganizationIdVouchersPurchaseFileguidFileGuidGet operation in PurchaseVouchersApi.
 * @export
 * @interface PurchaseVouchersApiV1OrganizationIdVouchersPurchaseFileguidFileGuidGetRequest
 */
export interface PurchaseVouchersApiV1OrganizationIdVouchersPurchaseFileguidFileGuidGetRequest {
    /**
     * FileGuid used to find purchase
     * @type {string}
     * @memberof PurchaseVouchersApiV1OrganizationIdVouchersPurchaseFileguidFileGuidGet
     */
    readonly fileGuid: string

    /**
     * 
     * @type {string}
     * @memberof PurchaseVouchersApiV1OrganizationIdVouchersPurchaseFileguidFileGuidGet
     */
    readonly organizationId: string
}

/**
 * Request parameters for v1OrganizationIdVouchersPurchaseGuidBookPost operation in PurchaseVouchersApi.
 * @export
 * @interface PurchaseVouchersApiV1OrganizationIdVouchersPurchaseGuidBookPostRequest
 */
export interface PurchaseVouchersApiV1OrganizationIdVouchersPurchaseGuidBookPostRequest {
    /**
     * guid of the voucher to book
     * @type {string}
     * @memberof PurchaseVouchersApiV1OrganizationIdVouchersPurchaseGuidBookPost
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof PurchaseVouchersApiV1OrganizationIdVouchersPurchaseGuidBookPost
     */
    readonly organizationId: string

    /**
     * Model containing timestamp and optional vouchernumber to use for booking
     * @type {BookModel}
     * @memberof PurchaseVouchersApiV1OrganizationIdVouchersPurchaseGuidBookPost
     */
    readonly bookModel?: BookModel
}

/**
 * Request parameters for v1OrganizationIdVouchersPurchaseGuidDelete operation in PurchaseVouchersApi.
 * @export
 * @interface PurchaseVouchersApiV1OrganizationIdVouchersPurchaseGuidDeleteRequest
 */
export interface PurchaseVouchersApiV1OrganizationIdVouchersPurchaseGuidDeleteRequest {
    /**
     * Guid of the voucher to delete
     * @type {string}
     * @memberof PurchaseVouchersApiV1OrganizationIdVouchersPurchaseGuidDelete
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof PurchaseVouchersApiV1OrganizationIdVouchersPurchaseGuidDelete
     */
    readonly organizationId: string

    /**
     * Timestamp used for version validation
     * @type {TimestampObject}
     * @memberof PurchaseVouchersApiV1OrganizationIdVouchersPurchaseGuidDelete
     */
    readonly timestampObject?: TimestampObject
}

/**
 * Request parameters for v1OrganizationIdVouchersPurchaseGuidGenerateCreditnotePost operation in PurchaseVouchersApi.
 * @export
 * @interface PurchaseVouchersApiV1OrganizationIdVouchersPurchaseGuidGenerateCreditnotePostRequest
 */
export interface PurchaseVouchersApiV1OrganizationIdVouchersPurchaseGuidGenerateCreditnotePostRequest {
    /**
     * Guid of the invoice
     * @type {string}
     * @memberof PurchaseVouchersApiV1OrganizationIdVouchersPurchaseGuidGenerateCreditnotePost
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof PurchaseVouchersApiV1OrganizationIdVouchersPurchaseGuidGenerateCreditnotePost
     */
    readonly organizationId: string

    /**
     * Model containing optional timestamp, voucher date and file guid parameters
     * @type {CreditNoteForPurchaseVoucherRequest}
     * @memberof PurchaseVouchersApiV1OrganizationIdVouchersPurchaseGuidGenerateCreditnotePost
     */
    readonly creditNoteForPurchaseVoucherRequest?: CreditNoteForPurchaseVoucherRequest
}

/**
 * Request parameters for v1OrganizationIdVouchersPurchaseGuidGet operation in PurchaseVouchersApi.
 * @export
 * @interface PurchaseVouchersApiV1OrganizationIdVouchersPurchaseGuidGetRequest
 */
export interface PurchaseVouchersApiV1OrganizationIdVouchersPurchaseGuidGetRequest {
    /**
     * Guid of the voucher to get
     * @type {string}
     * @memberof PurchaseVouchersApiV1OrganizationIdVouchersPurchaseGuidGet
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof PurchaseVouchersApiV1OrganizationIdVouchersPurchaseGuidGet
     */
    readonly organizationId: string
}

/**
 * Request parameters for v1OrganizationIdVouchersPurchaseGuidPut operation in PurchaseVouchersApi.
 * @export
 * @interface PurchaseVouchersApiV1OrganizationIdVouchersPurchaseGuidPutRequest
 */
export interface PurchaseVouchersApiV1OrganizationIdVouchersPurchaseGuidPutRequest {
    /**
     * Guid of the purchase voucher to update
     * @type {string}
     * @memberof PurchaseVouchersApiV1OrganizationIdVouchersPurchaseGuidPut
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof PurchaseVouchersApiV1OrganizationIdVouchersPurchaseGuidPut
     */
    readonly organizationId: string

    /**
     * Data to update the purchase voucher with
     * @type {PurchaseVoucherUpdateModel}
     * @memberof PurchaseVouchersApiV1OrganizationIdVouchersPurchaseGuidPut
     */
    readonly purchaseVoucherUpdateModel?: PurchaseVoucherUpdateModel
}

/**
 * Request parameters for v1OrganizationIdVouchersPurchaseSimilarPost operation in PurchaseVouchersApi.
 * @export
 * @interface PurchaseVouchersApiV1OrganizationIdVouchersPurchaseSimilarPostRequest
 */
export interface PurchaseVouchersApiV1OrganizationIdVouchersPurchaseSimilarPostRequest {
    /**
     * 
     * @type {string}
     * @memberof PurchaseVouchersApiV1OrganizationIdVouchersPurchaseSimilarPost
     */
    readonly organizationId: string

    /**
     * Data to create the voucher from
     * @type {PurchaseVoucherCreateModelV2}
     * @memberof PurchaseVouchersApiV1OrganizationIdVouchersPurchaseSimilarPost
     */
    readonly purchaseVoucherCreateModelV2?: PurchaseVoucherCreateModelV2
}

/**
 * PurchaseVouchersApi - object-oriented interface
 * @export
 * @class PurchaseVouchersApi
 * @extends {BaseAPI}
 */
export class PurchaseVouchersApi extends BaseAPI {
    /**
     * Update a purchase voucher draft, you cannot update booked purchase vouchers.  Supports AccountTagName on voucher lines.
     * @summary Update purchase voucher v2
     * @param {PurchaseVouchersApiV11OrganizationIdVouchersPurchaseGuidPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseVouchersApi
     */
    public v11OrganizationIdVouchersPurchaseGuidPut(requestParameters: PurchaseVouchersApiV11OrganizationIdVouchersPurchaseGuidPutRequest, options?: RawAxiosRequestConfig) {
        return PurchaseVouchersApiFp(this.configuration).v11OrganizationIdVouchersPurchaseGuidPut(requestParameters.guid, requestParameters.organizationId, requestParameters.purchaseVoucherUpdateModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new purchase voucher draft. This voucher will have no effect on the accounts untill booked, and can be found under \"Bilagsoversigt\" inside Dinero.  Most users will likely expect this to be booked automatically incase it is created through the API.  Do note that if the credit option is chosen, payments must be added afterwards through the add payment endpoints in the PurchaseVoucherCreditPayment section.  Does not support AccountTagName.
     * @summary Create purchase voucher
     * @param {PurchaseVouchersApiV11OrganizationIdVouchersPurchasePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseVouchersApi
     */
    public v11OrganizationIdVouchersPurchasePost(requestParameters: PurchaseVouchersApiV11OrganizationIdVouchersPurchasePostRequest, options?: RawAxiosRequestConfig) {
        return PurchaseVouchersApiFp(this.configuration).v11OrganizationIdVouchersPurchasePost(requestParameters.organizationId, requestParameters.purchaseVoucherCreateModelV2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new purchase voucher draft. This voucher will have no effect on the accounts untill booked, and can be found under \"Bilagsoversigt\" inside Dinero.  Most users will likely expect this to be booked automatically incase it is created through the API.  Do note that if the credit option is chosen, payments must be added afterwards through the add payment endpoints in the PurchaseVoucherCreditPayment section.  Supports AccountTagName.
     * @summary Create purchase voucher V2
     * @param {PurchaseVouchersApiV12OrganizationIdVouchersPurchasePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseVouchersApi
     */
    public v12OrganizationIdVouchersPurchasePost(requestParameters: PurchaseVouchersApiV12OrganizationIdVouchersPurchasePostRequest, options?: RawAxiosRequestConfig) {
        return PurchaseVouchersApiFp(this.configuration).v12OrganizationIdVouchersPurchasePost(requestParameters.organizationId, requestParameters.purchaseVoucherCreateModelV2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch a purchase to get totals.
     * @summary Get purchase totals
     * @param {PurchaseVouchersApiV1OrganizationIdVouchersPurchaseFetchPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseVouchersApi
     */
    public v1OrganizationIdVouchersPurchaseFetchPost(requestParameters: PurchaseVouchersApiV1OrganizationIdVouchersPurchaseFetchPostRequest, options?: RawAxiosRequestConfig) {
        return PurchaseVouchersApiFp(this.configuration).v1OrganizationIdVouchersPurchaseFetchPost(requestParameters.organizationId, requestParameters.purchaseVoucherCreateModelV2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets purchase voucher Guid by fileGuid.
     * @summary Get purchase draft Guid by fileGuid
     * @param {PurchaseVouchersApiV1OrganizationIdVouchersPurchaseFileguidFileGuidGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseVouchersApi
     */
    public v1OrganizationIdVouchersPurchaseFileguidFileGuidGet(requestParameters: PurchaseVouchersApiV1OrganizationIdVouchersPurchaseFileguidFileGuidGetRequest, options?: RawAxiosRequestConfig) {
        return PurchaseVouchersApiFp(this.configuration).v1OrganizationIdVouchersPurchaseFileguidFileGuidGet(requestParameters.fileGuid, requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Book a purchase voucher.
     * @summary Book purchase voucher
     * @param {PurchaseVouchersApiV1OrganizationIdVouchersPurchaseGuidBookPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseVouchersApi
     */
    public v1OrganizationIdVouchersPurchaseGuidBookPost(requestParameters: PurchaseVouchersApiV1OrganizationIdVouchersPurchaseGuidBookPostRequest, options?: RawAxiosRequestConfig) {
        return PurchaseVouchersApiFp(this.configuration).v1OrganizationIdVouchersPurchaseGuidBookPost(requestParameters.guid, requestParameters.organizationId, requestParameters.bookModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a purchase voucher. Incase the voucher is a draft, the draft will simply be removed.  If already booked then it will add an offset entry for the purchase voucher so it will have no effect, but still be present in the bookkeeping, since it is not allowed under danish law to completely remove something, that has already been booked.
     * @summary Delete purchase voucher
     * @param {PurchaseVouchersApiV1OrganizationIdVouchersPurchaseGuidDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseVouchersApi
     */
    public v1OrganizationIdVouchersPurchaseGuidDelete(requestParameters: PurchaseVouchersApiV1OrganizationIdVouchersPurchaseGuidDeleteRequest, options?: RawAxiosRequestConfig) {
        return PurchaseVouchersApiFp(this.configuration).v1OrganizationIdVouchersPurchaseGuidDelete(requestParameters.guid, requestParameters.organizationId, requestParameters.timestampObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate and saves a credit note draft of a given booked purchase voucher.
     * @summary Create credit note from purchase voucher
     * @param {PurchaseVouchersApiV1OrganizationIdVouchersPurchaseGuidGenerateCreditnotePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseVouchersApi
     */
    public v1OrganizationIdVouchersPurchaseGuidGenerateCreditnotePost(requestParameters: PurchaseVouchersApiV1OrganizationIdVouchersPurchaseGuidGenerateCreditnotePostRequest, options?: RawAxiosRequestConfig) {
        return PurchaseVouchersApiFp(this.configuration).v1OrganizationIdVouchersPurchaseGuidGenerateCreditnotePost(requestParameters.guid, requestParameters.organizationId, requestParameters.creditNoteForPurchaseVoucherRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets a purchase voucher by its guid.
     * @summary Get purchase voucher
     * @param {PurchaseVouchersApiV1OrganizationIdVouchersPurchaseGuidGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseVouchersApi
     */
    public v1OrganizationIdVouchersPurchaseGuidGet(requestParameters: PurchaseVouchersApiV1OrganizationIdVouchersPurchaseGuidGetRequest, options?: RawAxiosRequestConfig) {
        return PurchaseVouchersApiFp(this.configuration).v1OrganizationIdVouchersPurchaseGuidGet(requestParameters.guid, requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a purchase voucher draft, you cannot update booked purchase vouchers.  Does not support AccountTagName on voucher lines.
     * @summary Update purchase voucher
     * @param {PurchaseVouchersApiV1OrganizationIdVouchersPurchaseGuidPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseVouchersApi
     */
    public v1OrganizationIdVouchersPurchaseGuidPut(requestParameters: PurchaseVouchersApiV1OrganizationIdVouchersPurchaseGuidPutRequest, options?: RawAxiosRequestConfig) {
        return PurchaseVouchersApiFp(this.configuration).v1OrganizationIdVouchersPurchaseGuidPut(requestParameters.guid, requestParameters.organizationId, requestParameters.purchaseVoucherUpdateModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Looks for similar purchase.
     * @summary Get similar purchase
     * @param {PurchaseVouchersApiV1OrganizationIdVouchersPurchaseSimilarPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PurchaseVouchersApi
     */
    public v1OrganizationIdVouchersPurchaseSimilarPost(requestParameters: PurchaseVouchersApiV1OrganizationIdVouchersPurchaseSimilarPostRequest, options?: RawAxiosRequestConfig) {
        return PurchaseVouchersApiFp(this.configuration).v1OrganizationIdVouchersPurchaseSimilarPost(requestParameters.organizationId, requestParameters.purchaseVoucherCreateModelV2, options).then((request) => request(this.axios, this.basePath));
    }
}


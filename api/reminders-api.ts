/* tslint:disable */
/* eslint-disable */
/**
 * Dinero API
 * Welcome to our endpoint documentation. Please try to carefully read our general documentation found on <a href=\"https://developer.dinero.dk/\">developer.dinero.dk</a> for information regarding the authorization proces, status and errorcodes, FAQ, Postman tutorial etc. <br><br>Once authorized, you simply add \'Authorization: Bearer <access-token>\' to the header of your requests. On the page below, you\'ll find all our endpoints documented as well as possible, but if you have any questions regarding an endpoint, or an error in the description, please contact us on <a href=\"mailto:api@dinero.dk\">api@dinero.dk.</a> 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiMailoutModel } from '../model';
// @ts-ignore
import type { EanReminderModel } from '../model';
// @ts-ignore
import type { EmailSentModel } from '../model';
// @ts-ignore
import type { MailoutTemplateReadModel } from '../model';
// @ts-ignore
import type { ReminderBookModel } from '../model';
// @ts-ignore
import type { ReminderCreateModel } from '../model';
// @ts-ignore
import type { ReminderDeleteModel } from '../model';
// @ts-ignore
import type { ReminderFetchModel } from '../model';
// @ts-ignore
import type { ReminderViewModel } from '../model';
/**
 * RemindersApi - axios parameter creator
 * @export
 */
export const RemindersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Sends the reminder as an email with a link to a public version of the reminder. Here the default message, receivers etc. can be overwritten. If you want the user to preview these options, use the Get reminder email template endpoint.
         * @summary Send reminder email
         * @param {string} voucherGuid Guid of the invoice to send
         * @param {string} organizationId 
         * @param {ApiMailoutModel} [apiMailoutModel] Model of the email to send
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdInvoicesVoucherGuidRemindersEmailPost: async (voucherGuid: string, organizationId: string, apiMailoutModel?: ApiMailoutModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'voucherGuid' is not null or undefined
            assertParamExists('v1OrganizationIdInvoicesVoucherGuidRemindersEmailPost', 'voucherGuid', voucherGuid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdInvoicesVoucherGuidRemindersEmailPost', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/invoices/{voucherGuid}/reminders/email`
                .replace(`{${"voucherGuid"}}`, encodeURIComponent(String(voucherGuid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiMailoutModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the email template for a reminder. This can be used to preview what will be sent out on the email. These standards can be overwritten during the sending phase.
         * @summary Get reminder email template
         * @param {string} voucherGuid Guid of the invoice
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdInvoicesVoucherGuidRemindersEmailTemplateGet: async (voucherGuid: string, organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'voucherGuid' is not null or undefined
            assertParamExists('v1OrganizationIdInvoicesVoucherGuidRemindersEmailTemplateGet', 'voucherGuid', voucherGuid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdInvoicesVoucherGuidRemindersEmailTemplateGet', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/invoices/{voucherGuid}/reminders/email/template`
                .replace(`{${"voucherGuid"}}`, encodeURIComponent(String(voucherGuid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a reminder matching the specified criteria.
         * @summary Fetch reminder
         * @param {string} voucherGuid 
         * @param {string} organizationId 
         * @param {ReminderFetchModel} [reminderFetchModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdInvoicesVoucherGuidRemindersFetchPost: async (voucherGuid: string, organizationId: string, reminderFetchModel?: ReminderFetchModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'voucherGuid' is not null or undefined
            assertParamExists('v1OrganizationIdInvoicesVoucherGuidRemindersFetchPost', 'voucherGuid', voucherGuid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdInvoicesVoucherGuidRemindersFetchPost', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/invoices/{voucherGuid}/reminders/fetch`
                .replace(`{${"voucherGuid"}}`, encodeURIComponent(String(voucherGuid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reminderFetchModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all reminders (rykkere) for a specific invoice. There can be up to three reminders per invoice. If you want a specific one of those reminders, look for the Get reminder endpoint.
         * @summary Get reminders
         * @param {string} voucherGuid Voucher guid
         * @param {string} organizationId 
         * @param {string} [changesSince] [Generic Filter Option] Only return mailouts that was created or updated after a given time.              If left empty, this filter will not be applied, and reminders will be returned regardless of change history.              The time must be UTC and in the format \&#39;YYYY-MM-DDTHH:mm:ssZ\&#39; example: \&#39;2015-08-18T06:36:22Z\&#39;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdInvoicesVoucherGuidRemindersGet: async (voucherGuid: string, organizationId: string, changesSince?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'voucherGuid' is not null or undefined
            assertParamExists('v1OrganizationIdInvoicesVoucherGuidRemindersGet', 'voucherGuid', voucherGuid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdInvoicesVoucherGuidRemindersGet', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/invoices/{voucherGuid}/reminders`
                .replace(`{${"voucherGuid"}}`, encodeURIComponent(String(voucherGuid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (changesSince !== undefined) {
                localVarQueryParameter['changesSince'] = changesSince;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Books a reminder draft that has been added with the Add reminder endpoint. Only a booked reminder will have any effect and be able to be sent out.
         * @summary Book reminder
         * @param {string} voucherGuid 
         * @param {number} id 
         * @param {string} organizationId 
         * @param {ReminderBookModel} [reminderBookModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdInvoicesVoucherGuidRemindersIdBookPost: async (voucherGuid: string, id: number, organizationId: string, reminderBookModel?: ReminderBookModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'voucherGuid' is not null or undefined
            assertParamExists('v1OrganizationIdInvoicesVoucherGuidRemindersIdBookPost', 'voucherGuid', voucherGuid)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1OrganizationIdInvoicesVoucherGuidRemindersIdBookPost', 'id', id)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdInvoicesVoucherGuidRemindersIdBookPost', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/invoices/{voucherGuid}/reminders/{id}/book`
                .replace(`{${"voucherGuid"}}`, encodeURIComponent(String(voucherGuid)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reminderBookModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a reminder. If unbooked this will just remove the draft.  If already booked then it will add an offset entry for the reminder so it will have no effect, but still be present in the bookkeeping, since it is not allowed under danish law to completely remove something, that has already been booked.
         * @summary Delete reminder
         * @param {string} voucherGuid 
         * @param {number} id 
         * @param {string} organizationId 
         * @param {ReminderDeleteModel} [reminderDeleteModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdInvoicesVoucherGuidRemindersIdDelete: async (voucherGuid: string, id: number, organizationId: string, reminderDeleteModel?: ReminderDeleteModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'voucherGuid' is not null or undefined
            assertParamExists('v1OrganizationIdInvoicesVoucherGuidRemindersIdDelete', 'voucherGuid', voucherGuid)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1OrganizationIdInvoicesVoucherGuidRemindersIdDelete', 'id', id)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdInvoicesVoucherGuidRemindersIdDelete', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/invoices/{voucherGuid}/reminders/{id}`
                .replace(`{${"voucherGuid"}}`, encodeURIComponent(String(voucherGuid)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reminderDeleteModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This simply sends the reminder as an electronic invoice. The customer must be able to receive invoices through either EAN, CVR or another means. This can be added to the contact in question.
         * @summary Send reminder with EAN
         * @param {string} voucherGuid Guid of the invoice
         * @param {number} id Id of the reminder to send
         * @param {string} organizationId 
         * @param {EanReminderModel} [eanReminderModel] Parameters for the e-reminder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdInvoicesVoucherGuidRemindersIdEReminderPost: async (voucherGuid: string, id: number, organizationId: string, eanReminderModel?: EanReminderModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'voucherGuid' is not null or undefined
            assertParamExists('v1OrganizationIdInvoicesVoucherGuidRemindersIdEReminderPost', 'voucherGuid', voucherGuid)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1OrganizationIdInvoicesVoucherGuidRemindersIdEReminderPost', 'id', id)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdInvoicesVoucherGuidRemindersIdEReminderPost', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/invoices/{voucherGuid}/reminders/{id}/e-reminder`
                .replace(`{${"voucherGuid"}}`, encodeURIComponent(String(voucherGuid)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eanReminderModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific reminder (rykker) as either json or pdf. Define the Accept header of your request to either \'application/json\' or \'application/octet-stream\'.  You use the id to specify which reminder you want from an invoice, since there can be up to three per invoice. If you instead want the list of reminders for an invoice, then look for Get Reminders.
         * @summary Get reminder
         * @param {string} voucherGuid 
         * @param {number} id 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdInvoicesVoucherGuidRemindersIdGet: async (voucherGuid: string, id: number, organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'voucherGuid' is not null or undefined
            assertParamExists('v1OrganizationIdInvoicesVoucherGuidRemindersIdGet', 'voucherGuid', voucherGuid)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1OrganizationIdInvoicesVoucherGuidRemindersIdGet', 'id', id)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdInvoicesVoucherGuidRemindersIdGet', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/invoices/{voucherGuid}/reminders/{id}`
                .replace(`{${"voucherGuid"}}`, encodeURIComponent(String(voucherGuid)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an unbooked reminder, incase you\'ve created a draft you wish to change.
         * @summary Update reminder
         * @param {string} voucherGuid 
         * @param {number} id 
         * @param {string} organizationId 
         * @param {ReminderCreateModel} [reminderCreateModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdInvoicesVoucherGuidRemindersIdPut: async (voucherGuid: string, id: number, organizationId: string, reminderCreateModel?: ReminderCreateModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'voucherGuid' is not null or undefined
            assertParamExists('v1OrganizationIdInvoicesVoucherGuidRemindersIdPut', 'voucherGuid', voucherGuid)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('v1OrganizationIdInvoicesVoucherGuidRemindersIdPut', 'id', id)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdInvoicesVoucherGuidRemindersIdPut', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/invoices/{voucherGuid}/reminders/{id}`
                .replace(`{${"voucherGuid"}}`, encodeURIComponent(String(voucherGuid)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reminderCreateModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the next reminder in line.
         * @summary Get next reminder
         * @param {string} voucherGuid 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdInvoicesVoucherGuidRemindersNextGet: async (voucherGuid: string, organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'voucherGuid' is not null or undefined
            assertParamExists('v1OrganizationIdInvoicesVoucherGuidRemindersNextGet', 'voucherGuid', voucherGuid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdInvoicesVoucherGuidRemindersNextGet', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/invoices/{voucherGuid}/reminders/next`
                .replace(`{${"voucherGuid"}}`, encodeURIComponent(String(voucherGuid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a reminder (rykker) to a specific invoice. The invoice in question must be overdue, in order for a reminder to be added, once 10 days have passed, another reminder can be added.  You need to follow the rules applied in Renteloven, when adding a reminder. If in doubt, try to use the standards of Dinero. Remeber to book the reminder in order for it to have any effect.
         * @summary Add reminder
         * @param {string} voucherGuid 
         * @param {string} organizationId 
         * @param {ReminderCreateModel} [reminderCreateModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdInvoicesVoucherGuidRemindersPost: async (voucherGuid: string, organizationId: string, reminderCreateModel?: ReminderCreateModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'voucherGuid' is not null or undefined
            assertParamExists('v1OrganizationIdInvoicesVoucherGuidRemindersPost', 'voucherGuid', voucherGuid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdInvoicesVoucherGuidRemindersPost', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/invoices/{voucherGuid}/reminders`
                .replace(`{${"voucherGuid"}}`, encodeURIComponent(String(voucherGuid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(reminderCreateModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RemindersApi - functional programming interface
 * @export
 */
export const RemindersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RemindersApiAxiosParamCreator(configuration)
    return {
        /**
         * Sends the reminder as an email with a link to a public version of the reminder. Here the default message, receivers etc. can be overwritten. If you want the user to preview these options, use the Get reminder email template endpoint.
         * @summary Send reminder email
         * @param {string} voucherGuid Guid of the invoice to send
         * @param {string} organizationId 
         * @param {ApiMailoutModel} [apiMailoutModel] Model of the email to send
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdInvoicesVoucherGuidRemindersEmailPost(voucherGuid: string, organizationId: string, apiMailoutModel?: ApiMailoutModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailSentModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdInvoicesVoucherGuidRemindersEmailPost(voucherGuid, organizationId, apiMailoutModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RemindersApi.v1OrganizationIdInvoicesVoucherGuidRemindersEmailPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Gets the email template for a reminder. This can be used to preview what will be sent out on the email. These standards can be overwritten during the sending phase.
         * @summary Get reminder email template
         * @param {string} voucherGuid Guid of the invoice
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdInvoicesVoucherGuidRemindersEmailTemplateGet(voucherGuid: string, organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MailoutTemplateReadModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdInvoicesVoucherGuidRemindersEmailTemplateGet(voucherGuid, organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RemindersApi.v1OrganizationIdInvoicesVoucherGuidRemindersEmailTemplateGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch a reminder matching the specified criteria.
         * @summary Fetch reminder
         * @param {string} voucherGuid 
         * @param {string} organizationId 
         * @param {ReminderFetchModel} [reminderFetchModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdInvoicesVoucherGuidRemindersFetchPost(voucherGuid: string, organizationId: string, reminderFetchModel?: ReminderFetchModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReminderViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdInvoicesVoucherGuidRemindersFetchPost(voucherGuid, organizationId, reminderFetchModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RemindersApi.v1OrganizationIdInvoicesVoucherGuidRemindersFetchPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all reminders (rykkere) for a specific invoice. There can be up to three reminders per invoice. If you want a specific one of those reminders, look for the Get reminder endpoint.
         * @summary Get reminders
         * @param {string} voucherGuid Voucher guid
         * @param {string} organizationId 
         * @param {string} [changesSince] [Generic Filter Option] Only return mailouts that was created or updated after a given time.              If left empty, this filter will not be applied, and reminders will be returned regardless of change history.              The time must be UTC and in the format \&#39;YYYY-MM-DDTHH:mm:ssZ\&#39; example: \&#39;2015-08-18T06:36:22Z\&#39;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdInvoicesVoucherGuidRemindersGet(voucherGuid: string, organizationId: string, changesSince?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ReminderViewModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdInvoicesVoucherGuidRemindersGet(voucherGuid, organizationId, changesSince, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RemindersApi.v1OrganizationIdInvoicesVoucherGuidRemindersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Books a reminder draft that has been added with the Add reminder endpoint. Only a booked reminder will have any effect and be able to be sent out.
         * @summary Book reminder
         * @param {string} voucherGuid 
         * @param {number} id 
         * @param {string} organizationId 
         * @param {ReminderBookModel} [reminderBookModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdInvoicesVoucherGuidRemindersIdBookPost(voucherGuid: string, id: number, organizationId: string, reminderBookModel?: ReminderBookModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReminderViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdInvoicesVoucherGuidRemindersIdBookPost(voucherGuid, id, organizationId, reminderBookModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RemindersApi.v1OrganizationIdInvoicesVoucherGuidRemindersIdBookPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deletes a reminder. If unbooked this will just remove the draft.  If already booked then it will add an offset entry for the reminder so it will have no effect, but still be present in the bookkeeping, since it is not allowed under danish law to completely remove something, that has already been booked.
         * @summary Delete reminder
         * @param {string} voucherGuid 
         * @param {number} id 
         * @param {string} organizationId 
         * @param {ReminderDeleteModel} [reminderDeleteModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdInvoicesVoucherGuidRemindersIdDelete(voucherGuid: string, id: number, organizationId: string, reminderDeleteModel?: ReminderDeleteModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdInvoicesVoucherGuidRemindersIdDelete(voucherGuid, id, organizationId, reminderDeleteModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RemindersApi.v1OrganizationIdInvoicesVoucherGuidRemindersIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * This simply sends the reminder as an electronic invoice. The customer must be able to receive invoices through either EAN, CVR or another means. This can be added to the contact in question.
         * @summary Send reminder with EAN
         * @param {string} voucherGuid Guid of the invoice
         * @param {number} id Id of the reminder to send
         * @param {string} organizationId 
         * @param {EanReminderModel} [eanReminderModel] Parameters for the e-reminder
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdInvoicesVoucherGuidRemindersIdEReminderPost(voucherGuid: string, id: number, organizationId: string, eanReminderModel?: EanReminderModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdInvoicesVoucherGuidRemindersIdEReminderPost(voucherGuid, id, organizationId, eanReminderModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RemindersApi.v1OrganizationIdInvoicesVoucherGuidRemindersIdEReminderPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a specific reminder (rykker) as either json or pdf. Define the Accept header of your request to either \'application/json\' or \'application/octet-stream\'.  You use the id to specify which reminder you want from an invoice, since there can be up to three per invoice. If you instead want the list of reminders for an invoice, then look for Get Reminders.
         * @summary Get reminder
         * @param {string} voucherGuid 
         * @param {number} id 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdInvoicesVoucherGuidRemindersIdGet(voucherGuid: string, id: number, organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReminderViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdInvoicesVoucherGuidRemindersIdGet(voucherGuid, id, organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RemindersApi.v1OrganizationIdInvoicesVoucherGuidRemindersIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates an unbooked reminder, incase you\'ve created a draft you wish to change.
         * @summary Update reminder
         * @param {string} voucherGuid 
         * @param {number} id 
         * @param {string} organizationId 
         * @param {ReminderCreateModel} [reminderCreateModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdInvoicesVoucherGuidRemindersIdPut(voucherGuid: string, id: number, organizationId: string, reminderCreateModel?: ReminderCreateModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReminderViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdInvoicesVoucherGuidRemindersIdPut(voucherGuid, id, organizationId, reminderCreateModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RemindersApi.v1OrganizationIdInvoicesVoucherGuidRemindersIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the next reminder in line.
         * @summary Get next reminder
         * @param {string} voucherGuid 
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdInvoicesVoucherGuidRemindersNextGet(voucherGuid: string, organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReminderViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdInvoicesVoucherGuidRemindersNextGet(voucherGuid, organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RemindersApi.v1OrganizationIdInvoicesVoucherGuidRemindersNextGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Add a reminder (rykker) to a specific invoice. The invoice in question must be overdue, in order for a reminder to be added, once 10 days have passed, another reminder can be added.  You need to follow the rules applied in Renteloven, when adding a reminder. If in doubt, try to use the standards of Dinero. Remeber to book the reminder in order for it to have any effect.
         * @summary Add reminder
         * @param {string} voucherGuid 
         * @param {string} organizationId 
         * @param {ReminderCreateModel} [reminderCreateModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdInvoicesVoucherGuidRemindersPost(voucherGuid: string, organizationId: string, reminderCreateModel?: ReminderCreateModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReminderViewModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdInvoicesVoucherGuidRemindersPost(voucherGuid, organizationId, reminderCreateModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RemindersApi.v1OrganizationIdInvoicesVoucherGuidRemindersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RemindersApi - factory interface
 * @export
 */
export const RemindersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RemindersApiFp(configuration)
    return {
        /**
         * Sends the reminder as an email with a link to a public version of the reminder. Here the default message, receivers etc. can be overwritten. If you want the user to preview these options, use the Get reminder email template endpoint.
         * @summary Send reminder email
         * @param {RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersEmailPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdInvoicesVoucherGuidRemindersEmailPost(requestParameters: RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersEmailPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmailSentModel> {
            return localVarFp.v1OrganizationIdInvoicesVoucherGuidRemindersEmailPost(requestParameters.voucherGuid, requestParameters.organizationId, requestParameters.apiMailoutModel, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the email template for a reminder. This can be used to preview what will be sent out on the email. These standards can be overwritten during the sending phase.
         * @summary Get reminder email template
         * @param {RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersEmailTemplateGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdInvoicesVoucherGuidRemindersEmailTemplateGet(requestParameters: RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersEmailTemplateGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<MailoutTemplateReadModel> {
            return localVarFp.v1OrganizationIdInvoicesVoucherGuidRemindersEmailTemplateGet(requestParameters.voucherGuid, requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a reminder matching the specified criteria.
         * @summary Fetch reminder
         * @param {RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersFetchPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdInvoicesVoucherGuidRemindersFetchPost(requestParameters: RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersFetchPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ReminderViewModel> {
            return localVarFp.v1OrganizationIdInvoicesVoucherGuidRemindersFetchPost(requestParameters.voucherGuid, requestParameters.organizationId, requestParameters.reminderFetchModel, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all reminders (rykkere) for a specific invoice. There can be up to three reminders per invoice. If you want a specific one of those reminders, look for the Get reminder endpoint.
         * @summary Get reminders
         * @param {RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdInvoicesVoucherGuidRemindersGet(requestParameters: RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<ReminderViewModel>> {
            return localVarFp.v1OrganizationIdInvoicesVoucherGuidRemindersGet(requestParameters.voucherGuid, requestParameters.organizationId, requestParameters.changesSince, options).then((request) => request(axios, basePath));
        },
        /**
         * Books a reminder draft that has been added with the Add reminder endpoint. Only a booked reminder will have any effect and be able to be sent out.
         * @summary Book reminder
         * @param {RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersIdBookPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdInvoicesVoucherGuidRemindersIdBookPost(requestParameters: RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersIdBookPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ReminderViewModel> {
            return localVarFp.v1OrganizationIdInvoicesVoucherGuidRemindersIdBookPost(requestParameters.voucherGuid, requestParameters.id, requestParameters.organizationId, requestParameters.reminderBookModel, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a reminder. If unbooked this will just remove the draft.  If already booked then it will add an offset entry for the reminder so it will have no effect, but still be present in the bookkeeping, since it is not allowed under danish law to completely remove something, that has already been booked.
         * @summary Delete reminder
         * @param {RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdInvoicesVoucherGuidRemindersIdDelete(requestParameters: RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1OrganizationIdInvoicesVoucherGuidRemindersIdDelete(requestParameters.voucherGuid, requestParameters.id, requestParameters.organizationId, requestParameters.reminderDeleteModel, options).then((request) => request(axios, basePath));
        },
        /**
         * This simply sends the reminder as an electronic invoice. The customer must be able to receive invoices through either EAN, CVR or another means. This can be added to the contact in question.
         * @summary Send reminder with EAN
         * @param {RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersIdEReminderPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdInvoicesVoucherGuidRemindersIdEReminderPost(requestParameters: RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersIdEReminderPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1OrganizationIdInvoicesVoucherGuidRemindersIdEReminderPost(requestParameters.voucherGuid, requestParameters.id, requestParameters.organizationId, requestParameters.eanReminderModel, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific reminder (rykker) as either json or pdf. Define the Accept header of your request to either \'application/json\' or \'application/octet-stream\'.  You use the id to specify which reminder you want from an invoice, since there can be up to three per invoice. If you instead want the list of reminders for an invoice, then look for Get Reminders.
         * @summary Get reminder
         * @param {RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdInvoicesVoucherGuidRemindersIdGet(requestParameters: RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ReminderViewModel> {
            return localVarFp.v1OrganizationIdInvoicesVoucherGuidRemindersIdGet(requestParameters.voucherGuid, requestParameters.id, requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an unbooked reminder, incase you\'ve created a draft you wish to change.
         * @summary Update reminder
         * @param {RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdInvoicesVoucherGuidRemindersIdPut(requestParameters: RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<ReminderViewModel> {
            return localVarFp.v1OrganizationIdInvoicesVoucherGuidRemindersIdPut(requestParameters.voucherGuid, requestParameters.id, requestParameters.organizationId, requestParameters.reminderCreateModel, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the next reminder in line.
         * @summary Get next reminder
         * @param {RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersNextGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdInvoicesVoucherGuidRemindersNextGet(requestParameters: RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersNextGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ReminderViewModel> {
            return localVarFp.v1OrganizationIdInvoicesVoucherGuidRemindersNextGet(requestParameters.voucherGuid, requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a reminder (rykker) to a specific invoice. The invoice in question must be overdue, in order for a reminder to be added, once 10 days have passed, another reminder can be added.  You need to follow the rules applied in Renteloven, when adding a reminder. If in doubt, try to use the standards of Dinero. Remeber to book the reminder in order for it to have any effect.
         * @summary Add reminder
         * @param {RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdInvoicesVoucherGuidRemindersPost(requestParameters: RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ReminderViewModel> {
            return localVarFp.v1OrganizationIdInvoicesVoucherGuidRemindersPost(requestParameters.voucherGuid, requestParameters.organizationId, requestParameters.reminderCreateModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for v1OrganizationIdInvoicesVoucherGuidRemindersEmailPost operation in RemindersApi.
 * @export
 * @interface RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersEmailPostRequest
 */
export interface RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersEmailPostRequest {
    /**
     * Guid of the invoice to send
     * @type {string}
     * @memberof RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersEmailPost
     */
    readonly voucherGuid: string

    /**
     * 
     * @type {string}
     * @memberof RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersEmailPost
     */
    readonly organizationId: string

    /**
     * Model of the email to send
     * @type {ApiMailoutModel}
     * @memberof RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersEmailPost
     */
    readonly apiMailoutModel?: ApiMailoutModel
}

/**
 * Request parameters for v1OrganizationIdInvoicesVoucherGuidRemindersEmailTemplateGet operation in RemindersApi.
 * @export
 * @interface RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersEmailTemplateGetRequest
 */
export interface RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersEmailTemplateGetRequest {
    /**
     * Guid of the invoice
     * @type {string}
     * @memberof RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersEmailTemplateGet
     */
    readonly voucherGuid: string

    /**
     * 
     * @type {string}
     * @memberof RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersEmailTemplateGet
     */
    readonly organizationId: string
}

/**
 * Request parameters for v1OrganizationIdInvoicesVoucherGuidRemindersFetchPost operation in RemindersApi.
 * @export
 * @interface RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersFetchPostRequest
 */
export interface RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersFetchPostRequest {
    /**
     * 
     * @type {string}
     * @memberof RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersFetchPost
     */
    readonly voucherGuid: string

    /**
     * 
     * @type {string}
     * @memberof RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersFetchPost
     */
    readonly organizationId: string

    /**
     * 
     * @type {ReminderFetchModel}
     * @memberof RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersFetchPost
     */
    readonly reminderFetchModel?: ReminderFetchModel
}

/**
 * Request parameters for v1OrganizationIdInvoicesVoucherGuidRemindersGet operation in RemindersApi.
 * @export
 * @interface RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersGetRequest
 */
export interface RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersGetRequest {
    /**
     * Voucher guid
     * @type {string}
     * @memberof RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersGet
     */
    readonly voucherGuid: string

    /**
     * 
     * @type {string}
     * @memberof RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersGet
     */
    readonly organizationId: string

    /**
     * [Generic Filter Option] Only return mailouts that was created or updated after a given time.              If left empty, this filter will not be applied, and reminders will be returned regardless of change history.              The time must be UTC and in the format \&#39;YYYY-MM-DDTHH:mm:ssZ\&#39; example: \&#39;2015-08-18T06:36:22Z\&#39;.
     * @type {string}
     * @memberof RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersGet
     */
    readonly changesSince?: string
}

/**
 * Request parameters for v1OrganizationIdInvoicesVoucherGuidRemindersIdBookPost operation in RemindersApi.
 * @export
 * @interface RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersIdBookPostRequest
 */
export interface RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersIdBookPostRequest {
    /**
     * 
     * @type {string}
     * @memberof RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersIdBookPost
     */
    readonly voucherGuid: string

    /**
     * 
     * @type {number}
     * @memberof RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersIdBookPost
     */
    readonly id: number

    /**
     * 
     * @type {string}
     * @memberof RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersIdBookPost
     */
    readonly organizationId: string

    /**
     * 
     * @type {ReminderBookModel}
     * @memberof RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersIdBookPost
     */
    readonly reminderBookModel?: ReminderBookModel
}

/**
 * Request parameters for v1OrganizationIdInvoicesVoucherGuidRemindersIdDelete operation in RemindersApi.
 * @export
 * @interface RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersIdDeleteRequest
 */
export interface RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersIdDelete
     */
    readonly voucherGuid: string

    /**
     * 
     * @type {number}
     * @memberof RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersIdDelete
     */
    readonly id: number

    /**
     * 
     * @type {string}
     * @memberof RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersIdDelete
     */
    readonly organizationId: string

    /**
     * 
     * @type {ReminderDeleteModel}
     * @memberof RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersIdDelete
     */
    readonly reminderDeleteModel?: ReminderDeleteModel
}

/**
 * Request parameters for v1OrganizationIdInvoicesVoucherGuidRemindersIdEReminderPost operation in RemindersApi.
 * @export
 * @interface RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersIdEReminderPostRequest
 */
export interface RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersIdEReminderPostRequest {
    /**
     * Guid of the invoice
     * @type {string}
     * @memberof RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersIdEReminderPost
     */
    readonly voucherGuid: string

    /**
     * Id of the reminder to send
     * @type {number}
     * @memberof RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersIdEReminderPost
     */
    readonly id: number

    /**
     * 
     * @type {string}
     * @memberof RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersIdEReminderPost
     */
    readonly organizationId: string

    /**
     * Parameters for the e-reminder
     * @type {EanReminderModel}
     * @memberof RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersIdEReminderPost
     */
    readonly eanReminderModel?: EanReminderModel
}

/**
 * Request parameters for v1OrganizationIdInvoicesVoucherGuidRemindersIdGet operation in RemindersApi.
 * @export
 * @interface RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersIdGetRequest
 */
export interface RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersIdGet
     */
    readonly voucherGuid: string

    /**
     * 
     * @type {number}
     * @memberof RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersIdGet
     */
    readonly id: number

    /**
     * 
     * @type {string}
     * @memberof RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersIdGet
     */
    readonly organizationId: string
}

/**
 * Request parameters for v1OrganizationIdInvoicesVoucherGuidRemindersIdPut operation in RemindersApi.
 * @export
 * @interface RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersIdPutRequest
 */
export interface RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersIdPut
     */
    readonly voucherGuid: string

    /**
     * 
     * @type {number}
     * @memberof RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersIdPut
     */
    readonly id: number

    /**
     * 
     * @type {string}
     * @memberof RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersIdPut
     */
    readonly organizationId: string

    /**
     * 
     * @type {ReminderCreateModel}
     * @memberof RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersIdPut
     */
    readonly reminderCreateModel?: ReminderCreateModel
}

/**
 * Request parameters for v1OrganizationIdInvoicesVoucherGuidRemindersNextGet operation in RemindersApi.
 * @export
 * @interface RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersNextGetRequest
 */
export interface RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersNextGetRequest {
    /**
     * 
     * @type {string}
     * @memberof RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersNextGet
     */
    readonly voucherGuid: string

    /**
     * 
     * @type {string}
     * @memberof RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersNextGet
     */
    readonly organizationId: string
}

/**
 * Request parameters for v1OrganizationIdInvoicesVoucherGuidRemindersPost operation in RemindersApi.
 * @export
 * @interface RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersPostRequest
 */
export interface RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersPostRequest {
    /**
     * 
     * @type {string}
     * @memberof RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersPost
     */
    readonly voucherGuid: string

    /**
     * 
     * @type {string}
     * @memberof RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersPost
     */
    readonly organizationId: string

    /**
     * 
     * @type {ReminderCreateModel}
     * @memberof RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersPost
     */
    readonly reminderCreateModel?: ReminderCreateModel
}

/**
 * RemindersApi - object-oriented interface
 * @export
 * @class RemindersApi
 * @extends {BaseAPI}
 */
export class RemindersApi extends BaseAPI {
    /**
     * Sends the reminder as an email with a link to a public version of the reminder. Here the default message, receivers etc. can be overwritten. If you want the user to preview these options, use the Get reminder email template endpoint.
     * @summary Send reminder email
     * @param {RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersEmailPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemindersApi
     */
    public v1OrganizationIdInvoicesVoucherGuidRemindersEmailPost(requestParameters: RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersEmailPostRequest, options?: RawAxiosRequestConfig) {
        return RemindersApiFp(this.configuration).v1OrganizationIdInvoicesVoucherGuidRemindersEmailPost(requestParameters.voucherGuid, requestParameters.organizationId, requestParameters.apiMailoutModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the email template for a reminder. This can be used to preview what will be sent out on the email. These standards can be overwritten during the sending phase.
     * @summary Get reminder email template
     * @param {RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersEmailTemplateGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemindersApi
     */
    public v1OrganizationIdInvoicesVoucherGuidRemindersEmailTemplateGet(requestParameters: RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersEmailTemplateGetRequest, options?: RawAxiosRequestConfig) {
        return RemindersApiFp(this.configuration).v1OrganizationIdInvoicesVoucherGuidRemindersEmailTemplateGet(requestParameters.voucherGuid, requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch a reminder matching the specified criteria.
     * @summary Fetch reminder
     * @param {RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersFetchPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemindersApi
     */
    public v1OrganizationIdInvoicesVoucherGuidRemindersFetchPost(requestParameters: RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersFetchPostRequest, options?: RawAxiosRequestConfig) {
        return RemindersApiFp(this.configuration).v1OrganizationIdInvoicesVoucherGuidRemindersFetchPost(requestParameters.voucherGuid, requestParameters.organizationId, requestParameters.reminderFetchModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all reminders (rykkere) for a specific invoice. There can be up to three reminders per invoice. If you want a specific one of those reminders, look for the Get reminder endpoint.
     * @summary Get reminders
     * @param {RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemindersApi
     */
    public v1OrganizationIdInvoicesVoucherGuidRemindersGet(requestParameters: RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersGetRequest, options?: RawAxiosRequestConfig) {
        return RemindersApiFp(this.configuration).v1OrganizationIdInvoicesVoucherGuidRemindersGet(requestParameters.voucherGuid, requestParameters.organizationId, requestParameters.changesSince, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Books a reminder draft that has been added with the Add reminder endpoint. Only a booked reminder will have any effect and be able to be sent out.
     * @summary Book reminder
     * @param {RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersIdBookPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemindersApi
     */
    public v1OrganizationIdInvoicesVoucherGuidRemindersIdBookPost(requestParameters: RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersIdBookPostRequest, options?: RawAxiosRequestConfig) {
        return RemindersApiFp(this.configuration).v1OrganizationIdInvoicesVoucherGuidRemindersIdBookPost(requestParameters.voucherGuid, requestParameters.id, requestParameters.organizationId, requestParameters.reminderBookModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a reminder. If unbooked this will just remove the draft.  If already booked then it will add an offset entry for the reminder so it will have no effect, but still be present in the bookkeeping, since it is not allowed under danish law to completely remove something, that has already been booked.
     * @summary Delete reminder
     * @param {RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemindersApi
     */
    public v1OrganizationIdInvoicesVoucherGuidRemindersIdDelete(requestParameters: RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return RemindersApiFp(this.configuration).v1OrganizationIdInvoicesVoucherGuidRemindersIdDelete(requestParameters.voucherGuid, requestParameters.id, requestParameters.organizationId, requestParameters.reminderDeleteModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This simply sends the reminder as an electronic invoice. The customer must be able to receive invoices through either EAN, CVR or another means. This can be added to the contact in question.
     * @summary Send reminder with EAN
     * @param {RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersIdEReminderPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemindersApi
     */
    public v1OrganizationIdInvoicesVoucherGuidRemindersIdEReminderPost(requestParameters: RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersIdEReminderPostRequest, options?: RawAxiosRequestConfig) {
        return RemindersApiFp(this.configuration).v1OrganizationIdInvoicesVoucherGuidRemindersIdEReminderPost(requestParameters.voucherGuid, requestParameters.id, requestParameters.organizationId, requestParameters.eanReminderModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a specific reminder (rykker) as either json or pdf. Define the Accept header of your request to either \'application/json\' or \'application/octet-stream\'.  You use the id to specify which reminder you want from an invoice, since there can be up to three per invoice. If you instead want the list of reminders for an invoice, then look for Get Reminders.
     * @summary Get reminder
     * @param {RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemindersApi
     */
    public v1OrganizationIdInvoicesVoucherGuidRemindersIdGet(requestParameters: RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersIdGetRequest, options?: RawAxiosRequestConfig) {
        return RemindersApiFp(this.configuration).v1OrganizationIdInvoicesVoucherGuidRemindersIdGet(requestParameters.voucherGuid, requestParameters.id, requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an unbooked reminder, incase you\'ve created a draft you wish to change.
     * @summary Update reminder
     * @param {RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemindersApi
     */
    public v1OrganizationIdInvoicesVoucherGuidRemindersIdPut(requestParameters: RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersIdPutRequest, options?: RawAxiosRequestConfig) {
        return RemindersApiFp(this.configuration).v1OrganizationIdInvoicesVoucherGuidRemindersIdPut(requestParameters.voucherGuid, requestParameters.id, requestParameters.organizationId, requestParameters.reminderCreateModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the next reminder in line.
     * @summary Get next reminder
     * @param {RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersNextGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemindersApi
     */
    public v1OrganizationIdInvoicesVoucherGuidRemindersNextGet(requestParameters: RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersNextGetRequest, options?: RawAxiosRequestConfig) {
        return RemindersApiFp(this.configuration).v1OrganizationIdInvoicesVoucherGuidRemindersNextGet(requestParameters.voucherGuid, requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a reminder (rykker) to a specific invoice. The invoice in question must be overdue, in order for a reminder to be added, once 10 days have passed, another reminder can be added.  You need to follow the rules applied in Renteloven, when adding a reminder. If in doubt, try to use the standards of Dinero. Remeber to book the reminder in order for it to have any effect.
     * @summary Add reminder
     * @param {RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemindersApi
     */
    public v1OrganizationIdInvoicesVoucherGuidRemindersPost(requestParameters: RemindersApiV1OrganizationIdInvoicesVoucherGuidRemindersPostRequest, options?: RawAxiosRequestConfig) {
        return RemindersApiFp(this.configuration).v1OrganizationIdInvoicesVoucherGuidRemindersPost(requestParameters.voucherGuid, requestParameters.organizationId, requestParameters.reminderCreateModel, options).then((request) => request(this.axios, this.basePath));
    }
}


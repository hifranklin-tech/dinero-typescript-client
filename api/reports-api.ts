/* tslint:disable */
/* eslint-disable */
/**
 * Dinero API
 * Welcome to our endpoint documentation. Please try to carefully read our general documentation found on <a href=\"https://developer.dinero.dk/\">developer.dinero.dk</a> for information regarding the authorization proces, status and errorcodes, FAQ, Postman tutorial etc. <br><br>Once authorized, you simply add \'Authorization: Bearer <access-token>\' to the header of your requests. On the page below, you\'ll find all our endpoints documented as well as possible, but if you have any questions regarding an endpoint, or an error in the description, please contact us on <a href=\"mailto:api@dinero.dk\">api@dinero.dk.</a> 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { BalanceReportApiModel } from '../model';
// @ts-ignore
import type { PrimoBalanceApiModel } from '../model';
// @ts-ignore
import type { ResultReportApiModel } from '../model';
// @ts-ignore
import type { SaldoBalanceReportApiModel } from '../model';
/**
 * ReportsApi - axios parameter creator
 * @export
 */
export const ReportsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the balance report, which contains assetts and liabilities. Can only be fetched for an entire accounting year.
         * @summary Get balance report
         * @param {string} accountingYear 
         * @param {string} organizationId 
         * @param {boolean} [showZeroAccount] 
         * @param {boolean} [showAccountNo] 
         * @param {boolean} [includeLedgerEntries] 
         * @param {boolean} [showVatType] 
         * @param {boolean} [includeSummaryAccount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdAccountingYearReportsBalanceGet: async (accountingYear: string, organizationId: string, showZeroAccount?: boolean, showAccountNo?: boolean, includeLedgerEntries?: boolean, showVatType?: boolean, includeSummaryAccount?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountingYear' is not null or undefined
            assertParamExists('v1OrganizationIdAccountingYearReportsBalanceGet', 'accountingYear', accountingYear)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdAccountingYearReportsBalanceGet', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/{accountingYear}/reports/balance`
                .replace(`{${"accountingYear"}}`, encodeURIComponent(String(accountingYear)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (showZeroAccount !== undefined) {
                localVarQueryParameter['showZeroAccount'] = showZeroAccount;
            }

            if (showAccountNo !== undefined) {
                localVarQueryParameter['showAccountNo'] = showAccountNo;
            }

            if (includeLedgerEntries !== undefined) {
                localVarQueryParameter['includeLedgerEntries'] = includeLedgerEntries;
            }

            if (showVatType !== undefined) {
                localVarQueryParameter['showVatType'] = showVatType;
            }

            if (includeSummaryAccount !== undefined) {
                localVarQueryParameter['includeSummaryAccount'] = includeSummaryAccount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the primo balance report for an accounting year. The primo balance is the balance the year starts with.
         * @summary Get Primo balance report
         * @param {string} accountingYear 
         * @param {string} organizationId 
         * @param {boolean} [showZeroAccount] 
         * @param {boolean} [showAccountNo] 
         * @param {boolean} [includeSummaryAccount] 
         * @param {boolean} [showVatType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdAccountingYearReportsPrimoGet: async (accountingYear: string, organizationId: string, showZeroAccount?: boolean, showAccountNo?: boolean, includeSummaryAccount?: boolean, showVatType?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountingYear' is not null or undefined
            assertParamExists('v1OrganizationIdAccountingYearReportsPrimoGet', 'accountingYear', accountingYear)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdAccountingYearReportsPrimoGet', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/{accountingYear}/reports/primo`
                .replace(`{${"accountingYear"}}`, encodeURIComponent(String(accountingYear)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (showZeroAccount !== undefined) {
                localVarQueryParameter['showZeroAccount'] = showZeroAccount;
            }

            if (showAccountNo !== undefined) {
                localVarQueryParameter['showAccountNo'] = showAccountNo;
            }

            if (includeSummaryAccount !== undefined) {
                localVarQueryParameter['includeSummaryAccount'] = includeSummaryAccount;
            }

            if (showVatType !== undefined) {
                localVarQueryParameter['showVatType'] = showVatType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a result report, which contains income and expense accounts. Can only be fetched for an entire accounting year.
         * @summary Get result report
         * @param {string} accountingYear 
         * @param {string} organizationId 
         * @param {boolean} [showZeroAccount] 
         * @param {boolean} [showAccountNo] 
         * @param {boolean} [includeLedgerEntries] 
         * @param {boolean} [showVatType] 
         * @param {boolean} [includeSummaryAccount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdAccountingYearReportsResultGet: async (accountingYear: string, organizationId: string, showZeroAccount?: boolean, showAccountNo?: boolean, includeLedgerEntries?: boolean, showVatType?: boolean, includeSummaryAccount?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountingYear' is not null or undefined
            assertParamExists('v1OrganizationIdAccountingYearReportsResultGet', 'accountingYear', accountingYear)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdAccountingYearReportsResultGet', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/{accountingYear}/reports/result`
                .replace(`{${"accountingYear"}}`, encodeURIComponent(String(accountingYear)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (showZeroAccount !== undefined) {
                localVarQueryParameter['showZeroAccount'] = showZeroAccount;
            }

            if (showAccountNo !== undefined) {
                localVarQueryParameter['showAccountNo'] = showAccountNo;
            }

            if (includeLedgerEntries !== undefined) {
                localVarQueryParameter['includeLedgerEntries'] = includeLedgerEntries;
            }

            if (showVatType !== undefined) {
                localVarQueryParameter['showVatType'] = showVatType;
            }

            if (includeSummaryAccount !== undefined) {
                localVarQueryParameter['includeSummaryAccount'] = includeSummaryAccount;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a saldobalance report which contains both the result and balance in one report. Can only be fetched for an entire accounting year.
         * @summary Get saldo balance report
         * @param {string} accountingYear 
         * @param {string} organizationId 
         * @param {boolean} [showZeroAccount] 
         * @param {boolean} [showAccountNo] 
         * @param {boolean} [includeSummaryAccount] 
         * @param {boolean} [includeLedgerEntries] 
         * @param {boolean} [showVatType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdAccountingYearReportsSaldoGet: async (accountingYear: string, organizationId: string, showZeroAccount?: boolean, showAccountNo?: boolean, includeSummaryAccount?: boolean, includeLedgerEntries?: boolean, showVatType?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountingYear' is not null or undefined
            assertParamExists('v1OrganizationIdAccountingYearReportsSaldoGet', 'accountingYear', accountingYear)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdAccountingYearReportsSaldoGet', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/{accountingYear}/reports/saldo`
                .replace(`{${"accountingYear"}}`, encodeURIComponent(String(accountingYear)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (showZeroAccount !== undefined) {
                localVarQueryParameter['showZeroAccount'] = showZeroAccount;
            }

            if (showAccountNo !== undefined) {
                localVarQueryParameter['showAccountNo'] = showAccountNo;
            }

            if (includeSummaryAccount !== undefined) {
                localVarQueryParameter['includeSummaryAccount'] = includeSummaryAccount;
            }

            if (includeLedgerEntries !== undefined) {
                localVarQueryParameter['includeLedgerEntries'] = includeLedgerEntries;
            }

            if (showVatType !== undefined) {
                localVarQueryParameter['showVatType'] = showVatType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportsApi - functional programming interface
 * @export
 */
export const ReportsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get the balance report, which contains assetts and liabilities. Can only be fetched for an entire accounting year.
         * @summary Get balance report
         * @param {string} accountingYear 
         * @param {string} organizationId 
         * @param {boolean} [showZeroAccount] 
         * @param {boolean} [showAccountNo] 
         * @param {boolean} [includeLedgerEntries] 
         * @param {boolean} [showVatType] 
         * @param {boolean} [includeSummaryAccount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdAccountingYearReportsBalanceGet(accountingYear: string, organizationId: string, showZeroAccount?: boolean, showAccountNo?: boolean, includeLedgerEntries?: boolean, showVatType?: boolean, includeSummaryAccount?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BalanceReportApiModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdAccountingYearReportsBalanceGet(accountingYear, organizationId, showZeroAccount, showAccountNo, includeLedgerEntries, showVatType, includeSummaryAccount, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReportsApi.v1OrganizationIdAccountingYearReportsBalanceGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the primo balance report for an accounting year. The primo balance is the balance the year starts with.
         * @summary Get Primo balance report
         * @param {string} accountingYear 
         * @param {string} organizationId 
         * @param {boolean} [showZeroAccount] 
         * @param {boolean} [showAccountNo] 
         * @param {boolean} [includeSummaryAccount] 
         * @param {boolean} [showVatType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdAccountingYearReportsPrimoGet(accountingYear: string, organizationId: string, showZeroAccount?: boolean, showAccountNo?: boolean, includeSummaryAccount?: boolean, showVatType?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PrimoBalanceApiModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdAccountingYearReportsPrimoGet(accountingYear, organizationId, showZeroAccount, showAccountNo, includeSummaryAccount, showVatType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReportsApi.v1OrganizationIdAccountingYearReportsPrimoGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a result report, which contains income and expense accounts. Can only be fetched for an entire accounting year.
         * @summary Get result report
         * @param {string} accountingYear 
         * @param {string} organizationId 
         * @param {boolean} [showZeroAccount] 
         * @param {boolean} [showAccountNo] 
         * @param {boolean} [includeLedgerEntries] 
         * @param {boolean} [showVatType] 
         * @param {boolean} [includeSummaryAccount] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdAccountingYearReportsResultGet(accountingYear: string, organizationId: string, showZeroAccount?: boolean, showAccountNo?: boolean, includeLedgerEntries?: boolean, showVatType?: boolean, includeSummaryAccount?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ResultReportApiModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdAccountingYearReportsResultGet(accountingYear, organizationId, showZeroAccount, showAccountNo, includeLedgerEntries, showVatType, includeSummaryAccount, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReportsApi.v1OrganizationIdAccountingYearReportsResultGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a saldobalance report which contains both the result and balance in one report. Can only be fetched for an entire accounting year.
         * @summary Get saldo balance report
         * @param {string} accountingYear 
         * @param {string} organizationId 
         * @param {boolean} [showZeroAccount] 
         * @param {boolean} [showAccountNo] 
         * @param {boolean} [includeSummaryAccount] 
         * @param {boolean} [includeLedgerEntries] 
         * @param {boolean} [showVatType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdAccountingYearReportsSaldoGet(accountingYear: string, organizationId: string, showZeroAccount?: boolean, showAccountNo?: boolean, includeSummaryAccount?: boolean, includeLedgerEntries?: boolean, showVatType?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SaldoBalanceReportApiModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdAccountingYearReportsSaldoGet(accountingYear, organizationId, showZeroAccount, showAccountNo, includeSummaryAccount, includeLedgerEntries, showVatType, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReportsApi.v1OrganizationIdAccountingYearReportsSaldoGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ReportsApi - factory interface
 * @export
 */
export const ReportsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportsApiFp(configuration)
    return {
        /**
         * Get the balance report, which contains assetts and liabilities. Can only be fetched for an entire accounting year.
         * @summary Get balance report
         * @param {ReportsApiV1OrganizationIdAccountingYearReportsBalanceGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdAccountingYearReportsBalanceGet(requestParameters: ReportsApiV1OrganizationIdAccountingYearReportsBalanceGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<BalanceReportApiModel>> {
            return localVarFp.v1OrganizationIdAccountingYearReportsBalanceGet(requestParameters.accountingYear, requestParameters.organizationId, requestParameters.showZeroAccount, requestParameters.showAccountNo, requestParameters.includeLedgerEntries, requestParameters.showVatType, requestParameters.includeSummaryAccount, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the primo balance report for an accounting year. The primo balance is the balance the year starts with.
         * @summary Get Primo balance report
         * @param {ReportsApiV1OrganizationIdAccountingYearReportsPrimoGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdAccountingYearReportsPrimoGet(requestParameters: ReportsApiV1OrganizationIdAccountingYearReportsPrimoGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<PrimoBalanceApiModel>> {
            return localVarFp.v1OrganizationIdAccountingYearReportsPrimoGet(requestParameters.accountingYear, requestParameters.organizationId, requestParameters.showZeroAccount, requestParameters.showAccountNo, requestParameters.includeSummaryAccount, requestParameters.showVatType, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a result report, which contains income and expense accounts. Can only be fetched for an entire accounting year.
         * @summary Get result report
         * @param {ReportsApiV1OrganizationIdAccountingYearReportsResultGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdAccountingYearReportsResultGet(requestParameters: ReportsApiV1OrganizationIdAccountingYearReportsResultGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<ResultReportApiModel>> {
            return localVarFp.v1OrganizationIdAccountingYearReportsResultGet(requestParameters.accountingYear, requestParameters.organizationId, requestParameters.showZeroAccount, requestParameters.showAccountNo, requestParameters.includeLedgerEntries, requestParameters.showVatType, requestParameters.includeSummaryAccount, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a saldobalance report which contains both the result and balance in one report. Can only be fetched for an entire accounting year.
         * @summary Get saldo balance report
         * @param {ReportsApiV1OrganizationIdAccountingYearReportsSaldoGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdAccountingYearReportsSaldoGet(requestParameters: ReportsApiV1OrganizationIdAccountingYearReportsSaldoGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<SaldoBalanceReportApiModel>> {
            return localVarFp.v1OrganizationIdAccountingYearReportsSaldoGet(requestParameters.accountingYear, requestParameters.organizationId, requestParameters.showZeroAccount, requestParameters.showAccountNo, requestParameters.includeSummaryAccount, requestParameters.includeLedgerEntries, requestParameters.showVatType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for v1OrganizationIdAccountingYearReportsBalanceGet operation in ReportsApi.
 * @export
 * @interface ReportsApiV1OrganizationIdAccountingYearReportsBalanceGetRequest
 */
export interface ReportsApiV1OrganizationIdAccountingYearReportsBalanceGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ReportsApiV1OrganizationIdAccountingYearReportsBalanceGet
     */
    readonly accountingYear: string

    /**
     * 
     * @type {string}
     * @memberof ReportsApiV1OrganizationIdAccountingYearReportsBalanceGet
     */
    readonly organizationId: string

    /**
     * 
     * @type {boolean}
     * @memberof ReportsApiV1OrganizationIdAccountingYearReportsBalanceGet
     */
    readonly showZeroAccount?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof ReportsApiV1OrganizationIdAccountingYearReportsBalanceGet
     */
    readonly showAccountNo?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof ReportsApiV1OrganizationIdAccountingYearReportsBalanceGet
     */
    readonly includeLedgerEntries?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof ReportsApiV1OrganizationIdAccountingYearReportsBalanceGet
     */
    readonly showVatType?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof ReportsApiV1OrganizationIdAccountingYearReportsBalanceGet
     */
    readonly includeSummaryAccount?: boolean
}

/**
 * Request parameters for v1OrganizationIdAccountingYearReportsPrimoGet operation in ReportsApi.
 * @export
 * @interface ReportsApiV1OrganizationIdAccountingYearReportsPrimoGetRequest
 */
export interface ReportsApiV1OrganizationIdAccountingYearReportsPrimoGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ReportsApiV1OrganizationIdAccountingYearReportsPrimoGet
     */
    readonly accountingYear: string

    /**
     * 
     * @type {string}
     * @memberof ReportsApiV1OrganizationIdAccountingYearReportsPrimoGet
     */
    readonly organizationId: string

    /**
     * 
     * @type {boolean}
     * @memberof ReportsApiV1OrganizationIdAccountingYearReportsPrimoGet
     */
    readonly showZeroAccount?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof ReportsApiV1OrganizationIdAccountingYearReportsPrimoGet
     */
    readonly showAccountNo?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof ReportsApiV1OrganizationIdAccountingYearReportsPrimoGet
     */
    readonly includeSummaryAccount?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof ReportsApiV1OrganizationIdAccountingYearReportsPrimoGet
     */
    readonly showVatType?: boolean
}

/**
 * Request parameters for v1OrganizationIdAccountingYearReportsResultGet operation in ReportsApi.
 * @export
 * @interface ReportsApiV1OrganizationIdAccountingYearReportsResultGetRequest
 */
export interface ReportsApiV1OrganizationIdAccountingYearReportsResultGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ReportsApiV1OrganizationIdAccountingYearReportsResultGet
     */
    readonly accountingYear: string

    /**
     * 
     * @type {string}
     * @memberof ReportsApiV1OrganizationIdAccountingYearReportsResultGet
     */
    readonly organizationId: string

    /**
     * 
     * @type {boolean}
     * @memberof ReportsApiV1OrganizationIdAccountingYearReportsResultGet
     */
    readonly showZeroAccount?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof ReportsApiV1OrganizationIdAccountingYearReportsResultGet
     */
    readonly showAccountNo?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof ReportsApiV1OrganizationIdAccountingYearReportsResultGet
     */
    readonly includeLedgerEntries?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof ReportsApiV1OrganizationIdAccountingYearReportsResultGet
     */
    readonly showVatType?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof ReportsApiV1OrganizationIdAccountingYearReportsResultGet
     */
    readonly includeSummaryAccount?: boolean
}

/**
 * Request parameters for v1OrganizationIdAccountingYearReportsSaldoGet operation in ReportsApi.
 * @export
 * @interface ReportsApiV1OrganizationIdAccountingYearReportsSaldoGetRequest
 */
export interface ReportsApiV1OrganizationIdAccountingYearReportsSaldoGetRequest {
    /**
     * 
     * @type {string}
     * @memberof ReportsApiV1OrganizationIdAccountingYearReportsSaldoGet
     */
    readonly accountingYear: string

    /**
     * 
     * @type {string}
     * @memberof ReportsApiV1OrganizationIdAccountingYearReportsSaldoGet
     */
    readonly organizationId: string

    /**
     * 
     * @type {boolean}
     * @memberof ReportsApiV1OrganizationIdAccountingYearReportsSaldoGet
     */
    readonly showZeroAccount?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof ReportsApiV1OrganizationIdAccountingYearReportsSaldoGet
     */
    readonly showAccountNo?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof ReportsApiV1OrganizationIdAccountingYearReportsSaldoGet
     */
    readonly includeSummaryAccount?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof ReportsApiV1OrganizationIdAccountingYearReportsSaldoGet
     */
    readonly includeLedgerEntries?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof ReportsApiV1OrganizationIdAccountingYearReportsSaldoGet
     */
    readonly showVatType?: boolean
}

/**
 * ReportsApi - object-oriented interface
 * @export
 * @class ReportsApi
 * @extends {BaseAPI}
 */
export class ReportsApi extends BaseAPI {
    /**
     * Get the balance report, which contains assetts and liabilities. Can only be fetched for an entire accounting year.
     * @summary Get balance report
     * @param {ReportsApiV1OrganizationIdAccountingYearReportsBalanceGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public v1OrganizationIdAccountingYearReportsBalanceGet(requestParameters: ReportsApiV1OrganizationIdAccountingYearReportsBalanceGetRequest, options?: RawAxiosRequestConfig) {
        return ReportsApiFp(this.configuration).v1OrganizationIdAccountingYearReportsBalanceGet(requestParameters.accountingYear, requestParameters.organizationId, requestParameters.showZeroAccount, requestParameters.showAccountNo, requestParameters.includeLedgerEntries, requestParameters.showVatType, requestParameters.includeSummaryAccount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the primo balance report for an accounting year. The primo balance is the balance the year starts with.
     * @summary Get Primo balance report
     * @param {ReportsApiV1OrganizationIdAccountingYearReportsPrimoGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public v1OrganizationIdAccountingYearReportsPrimoGet(requestParameters: ReportsApiV1OrganizationIdAccountingYearReportsPrimoGetRequest, options?: RawAxiosRequestConfig) {
        return ReportsApiFp(this.configuration).v1OrganizationIdAccountingYearReportsPrimoGet(requestParameters.accountingYear, requestParameters.organizationId, requestParameters.showZeroAccount, requestParameters.showAccountNo, requestParameters.includeSummaryAccount, requestParameters.showVatType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a result report, which contains income and expense accounts. Can only be fetched for an entire accounting year.
     * @summary Get result report
     * @param {ReportsApiV1OrganizationIdAccountingYearReportsResultGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public v1OrganizationIdAccountingYearReportsResultGet(requestParameters: ReportsApiV1OrganizationIdAccountingYearReportsResultGetRequest, options?: RawAxiosRequestConfig) {
        return ReportsApiFp(this.configuration).v1OrganizationIdAccountingYearReportsResultGet(requestParameters.accountingYear, requestParameters.organizationId, requestParameters.showZeroAccount, requestParameters.showAccountNo, requestParameters.includeLedgerEntries, requestParameters.showVatType, requestParameters.includeSummaryAccount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a saldobalance report which contains both the result and balance in one report. Can only be fetched for an entire accounting year.
     * @summary Get saldo balance report
     * @param {ReportsApiV1OrganizationIdAccountingYearReportsSaldoGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public v1OrganizationIdAccountingYearReportsSaldoGet(requestParameters: ReportsApiV1OrganizationIdAccountingYearReportsSaldoGetRequest, options?: RawAxiosRequestConfig) {
        return ReportsApiFp(this.configuration).v1OrganizationIdAccountingYearReportsSaldoGet(requestParameters.accountingYear, requestParameters.organizationId, requestParameters.showZeroAccount, requestParameters.showAccountNo, requestParameters.includeSummaryAccount, requestParameters.includeLedgerEntries, requestParameters.showVatType, options).then((request) => request(this.axios, this.basePath));
    }
}


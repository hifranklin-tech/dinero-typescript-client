/* tslint:disable */
/* eslint-disable */
/**
 * Dinero API
 * Welcome to our endpoint documentation. Please try to carefully read our general documentation found on <a href=\"https://developer.dinero.dk/\">developer.dinero.dk</a> for information regarding the authorization proces, status and errorcodes, FAQ, Postman tutorial etc. <br><br>Once authorized, you simply add \'Authorization: Bearer <access-token>\' to the header of your requests. On the page below, you\'ll find all our endpoints documented as well as possible, but if you have any questions regarding an endpoint, or an error in the description, please contact us on <a href=\"mailto:api@dinero.dk\">api@dinero.dk.</a> 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { SalesVoucherReadListModelDineroCollection } from '../model';
// @ts-ignore
import type { SalesVoucherSetttingsModel } from '../model';
/**
 * SalesApi - axios parameter creator
 * @export
 */
export const SalesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve a list of all invoices and credit notes for the organization. This can be a lengthy and demanding process on our end.  Therefore you should not use this endpoint often. Instead use the endpoint with the changesSince filter, to make sure you only get data that has changed since you last got the list.
         * @summary List invoices and credit notes
         * @param {string} organizationId 
         * @param {string} [startDate] Start date in format \&#39;YYYY-MM-DD\&#39; example \&#39;2015-01-01\&#39;. If you define a start date, you also need to define an end date.
         * @param {string} [endDate] End date in format \&#39;YYYY-MM-DD\&#39; example \&#39;2015-01-01\&#39;. If you define an end date, you also need to define a start date.
         * @param {string} [fields] A comma separated list of fields to include in the response.              Possible values are:              Type, Number, Guid, ExternalReference, ContactName, ContactGuid, Date, PaymentDate, Description, Currency, Status, MailOutStatus, LatestMailOutType              TotalExclVatInDkk, TotalInclVatInDkk, TotalExclVat, TotalInclVat, CreatedAt, UpdatedAt and DeletedAt.              If null, defaults to Guid,ContactName,Date,Description,Type.              Notice that it\&#39;s not case sensitive, the property name will be returned the way you request it.
         * @param {string} [freeTextSearch] A free text search performed on Number, ContactName, Description and TotalInclTax
         * @param {string} [statusFilter] Filter on Status. You can choose Draft, Booked, Paid, OverPaid or Overdue. You can add multible filters example: \&#39;Paid,OverPaid,Overdue\&#39;. If left empty no filter is applied.
         * @param {string} [queryFilter] Filtering can be applied to following fields:              ExternalReference, ContactGuid, Description. See API documentation for filtering format. If left empty no filtering is applied.
         * @param {string} [changesSince] [Generic Filter Option] Only return credit notes that was created, deleted or updated at or after given time.              If left empty, this filter will not be applied, and credit notes will be returned regardless of change history.              The time must be UTC and in the format \&#39;YYYY-MM-DDTHH:mm:ssZ\&#39; example: \&#39;2015-08-18T06:36:22Z\&#39;.
         * @param {boolean} [deletedOnly] [Generic Filter Option] Only select deleted credit notes. If left empty, will defaults to false.
         * @param {number} [page] The 0-based page number
         * @param {number} [pageSize] The maximum number of items to include in a page. Maximum 1000.
         * @param {string} [sort] A comma separated list of fields to sort on. Possible values are: VoucherNumber, VoucherDate, Status and Contact.
         * @param {string} [sortOrder] Sort order. Valid values are ascending and descending. Field Status is always sorted in the order Draft, Overdue, Booked, OverPaid and Paid.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdSalesGet: async (organizationId: string, startDate?: string, endDate?: string, fields?: string, freeTextSearch?: string, statusFilter?: string, queryFilter?: string, changesSince?: string, deletedOnly?: boolean, page?: number, pageSize?: number, sort?: string, sortOrder?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdSalesGet', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/sales`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (freeTextSearch !== undefined) {
                localVarQueryParameter['freeTextSearch'] = freeTextSearch;
            }

            if (statusFilter !== undefined) {
                localVarQueryParameter['statusFilter'] = statusFilter;
            }

            if (queryFilter !== undefined) {
                localVarQueryParameter['queryFilter'] = queryFilter;
            }

            if (changesSince !== undefined) {
                localVarQueryParameter['changesSince'] = changesSince;
            }

            if (deletedOnly !== undefined) {
                localVarQueryParameter['deletedOnly'] = deletedOnly;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a model containing the users default sales voucher setting preferences.  These are the settings that are applied when the user creates a new invoice in Dinero\'s web app.  The user can edit these setting under Settings>InvoiceSettings (Indstillinger>Faktura indstillinger).
         * @summary Get default settings
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdSalesSettingsGet: async (organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdSalesSettingsGet', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/sales/settings`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SalesApi - functional programming interface
 * @export
 */
export const SalesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SalesApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve a list of all invoices and credit notes for the organization. This can be a lengthy and demanding process on our end.  Therefore you should not use this endpoint often. Instead use the endpoint with the changesSince filter, to make sure you only get data that has changed since you last got the list.
         * @summary List invoices and credit notes
         * @param {string} organizationId 
         * @param {string} [startDate] Start date in format \&#39;YYYY-MM-DD\&#39; example \&#39;2015-01-01\&#39;. If you define a start date, you also need to define an end date.
         * @param {string} [endDate] End date in format \&#39;YYYY-MM-DD\&#39; example \&#39;2015-01-01\&#39;. If you define an end date, you also need to define a start date.
         * @param {string} [fields] A comma separated list of fields to include in the response.              Possible values are:              Type, Number, Guid, ExternalReference, ContactName, ContactGuid, Date, PaymentDate, Description, Currency, Status, MailOutStatus, LatestMailOutType              TotalExclVatInDkk, TotalInclVatInDkk, TotalExclVat, TotalInclVat, CreatedAt, UpdatedAt and DeletedAt.              If null, defaults to Guid,ContactName,Date,Description,Type.              Notice that it\&#39;s not case sensitive, the property name will be returned the way you request it.
         * @param {string} [freeTextSearch] A free text search performed on Number, ContactName, Description and TotalInclTax
         * @param {string} [statusFilter] Filter on Status. You can choose Draft, Booked, Paid, OverPaid or Overdue. You can add multible filters example: \&#39;Paid,OverPaid,Overdue\&#39;. If left empty no filter is applied.
         * @param {string} [queryFilter] Filtering can be applied to following fields:              ExternalReference, ContactGuid, Description. See API documentation for filtering format. If left empty no filtering is applied.
         * @param {string} [changesSince] [Generic Filter Option] Only return credit notes that was created, deleted or updated at or after given time.              If left empty, this filter will not be applied, and credit notes will be returned regardless of change history.              The time must be UTC and in the format \&#39;YYYY-MM-DDTHH:mm:ssZ\&#39; example: \&#39;2015-08-18T06:36:22Z\&#39;.
         * @param {boolean} [deletedOnly] [Generic Filter Option] Only select deleted credit notes. If left empty, will defaults to false.
         * @param {number} [page] The 0-based page number
         * @param {number} [pageSize] The maximum number of items to include in a page. Maximum 1000.
         * @param {string} [sort] A comma separated list of fields to sort on. Possible values are: VoucherNumber, VoucherDate, Status and Contact.
         * @param {string} [sortOrder] Sort order. Valid values are ascending and descending. Field Status is always sorted in the order Draft, Overdue, Booked, OverPaid and Paid.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdSalesGet(organizationId: string, startDate?: string, endDate?: string, fields?: string, freeTextSearch?: string, statusFilter?: string, queryFilter?: string, changesSince?: string, deletedOnly?: boolean, page?: number, pageSize?: number, sort?: string, sortOrder?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesVoucherReadListModelDineroCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdSalesGet(organizationId, startDate, endDate, fields, freeTextSearch, statusFilter, queryFilter, changesSince, deletedOnly, page, pageSize, sort, sortOrder, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesApi.v1OrganizationIdSalesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a model containing the users default sales voucher setting preferences.  These are the settings that are applied when the user creates a new invoice in Dinero\'s web app.  The user can edit these setting under Settings>InvoiceSettings (Indstillinger>Faktura indstillinger).
         * @summary Get default settings
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdSalesSettingsGet(organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesVoucherSetttingsModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdSalesSettingsGet(organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesApi.v1OrganizationIdSalesSettingsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SalesApi - factory interface
 * @export
 */
export const SalesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SalesApiFp(configuration)
    return {
        /**
         * Retrieve a list of all invoices and credit notes for the organization. This can be a lengthy and demanding process on our end.  Therefore you should not use this endpoint often. Instead use the endpoint with the changesSince filter, to make sure you only get data that has changed since you last got the list.
         * @summary List invoices and credit notes
         * @param {SalesApiV1OrganizationIdSalesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdSalesGet(requestParameters: SalesApiV1OrganizationIdSalesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<SalesVoucherReadListModelDineroCollection> {
            return localVarFp.v1OrganizationIdSalesGet(requestParameters.organizationId, requestParameters.startDate, requestParameters.endDate, requestParameters.fields, requestParameters.freeTextSearch, requestParameters.statusFilter, requestParameters.queryFilter, requestParameters.changesSince, requestParameters.deletedOnly, requestParameters.page, requestParameters.pageSize, requestParameters.sort, requestParameters.sortOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a model containing the users default sales voucher setting preferences.  These are the settings that are applied when the user creates a new invoice in Dinero\'s web app.  The user can edit these setting under Settings>InvoiceSettings (Indstillinger>Faktura indstillinger).
         * @summary Get default settings
         * @param {SalesApiV1OrganizationIdSalesSettingsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdSalesSettingsGet(requestParameters: SalesApiV1OrganizationIdSalesSettingsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<SalesVoucherSetttingsModel> {
            return localVarFp.v1OrganizationIdSalesSettingsGet(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for v1OrganizationIdSalesGet operation in SalesApi.
 * @export
 * @interface SalesApiV1OrganizationIdSalesGetRequest
 */
export interface SalesApiV1OrganizationIdSalesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof SalesApiV1OrganizationIdSalesGet
     */
    readonly organizationId: string

    /**
     * Start date in format \&#39;YYYY-MM-DD\&#39; example \&#39;2015-01-01\&#39;. If you define a start date, you also need to define an end date.
     * @type {string}
     * @memberof SalesApiV1OrganizationIdSalesGet
     */
    readonly startDate?: string

    /**
     * End date in format \&#39;YYYY-MM-DD\&#39; example \&#39;2015-01-01\&#39;. If you define an end date, you also need to define a start date.
     * @type {string}
     * @memberof SalesApiV1OrganizationIdSalesGet
     */
    readonly endDate?: string

    /**
     * A comma separated list of fields to include in the response.              Possible values are:              Type, Number, Guid, ExternalReference, ContactName, ContactGuid, Date, PaymentDate, Description, Currency, Status, MailOutStatus, LatestMailOutType              TotalExclVatInDkk, TotalInclVatInDkk, TotalExclVat, TotalInclVat, CreatedAt, UpdatedAt and DeletedAt.              If null, defaults to Guid,ContactName,Date,Description,Type.              Notice that it\&#39;s not case sensitive, the property name will be returned the way you request it.
     * @type {string}
     * @memberof SalesApiV1OrganizationIdSalesGet
     */
    readonly fields?: string

    /**
     * A free text search performed on Number, ContactName, Description and TotalInclTax
     * @type {string}
     * @memberof SalesApiV1OrganizationIdSalesGet
     */
    readonly freeTextSearch?: string

    /**
     * Filter on Status. You can choose Draft, Booked, Paid, OverPaid or Overdue. You can add multible filters example: \&#39;Paid,OverPaid,Overdue\&#39;. If left empty no filter is applied.
     * @type {string}
     * @memberof SalesApiV1OrganizationIdSalesGet
     */
    readonly statusFilter?: string

    /**
     * Filtering can be applied to following fields:              ExternalReference, ContactGuid, Description. See API documentation for filtering format. If left empty no filtering is applied.
     * @type {string}
     * @memberof SalesApiV1OrganizationIdSalesGet
     */
    readonly queryFilter?: string

    /**
     * [Generic Filter Option] Only return credit notes that was created, deleted or updated at or after given time.              If left empty, this filter will not be applied, and credit notes will be returned regardless of change history.              The time must be UTC and in the format \&#39;YYYY-MM-DDTHH:mm:ssZ\&#39; example: \&#39;2015-08-18T06:36:22Z\&#39;.
     * @type {string}
     * @memberof SalesApiV1OrganizationIdSalesGet
     */
    readonly changesSince?: string

    /**
     * [Generic Filter Option] Only select deleted credit notes. If left empty, will defaults to false.
     * @type {boolean}
     * @memberof SalesApiV1OrganizationIdSalesGet
     */
    readonly deletedOnly?: boolean

    /**
     * The 0-based page number
     * @type {number}
     * @memberof SalesApiV1OrganizationIdSalesGet
     */
    readonly page?: number

    /**
     * The maximum number of items to include in a page. Maximum 1000.
     * @type {number}
     * @memberof SalesApiV1OrganizationIdSalesGet
     */
    readonly pageSize?: number

    /**
     * A comma separated list of fields to sort on. Possible values are: VoucherNumber, VoucherDate, Status and Contact.
     * @type {string}
     * @memberof SalesApiV1OrganizationIdSalesGet
     */
    readonly sort?: string

    /**
     * Sort order. Valid values are ascending and descending. Field Status is always sorted in the order Draft, Overdue, Booked, OverPaid and Paid.
     * @type {string}
     * @memberof SalesApiV1OrganizationIdSalesGet
     */
    readonly sortOrder?: string
}

/**
 * Request parameters for v1OrganizationIdSalesSettingsGet operation in SalesApi.
 * @export
 * @interface SalesApiV1OrganizationIdSalesSettingsGetRequest
 */
export interface SalesApiV1OrganizationIdSalesSettingsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof SalesApiV1OrganizationIdSalesSettingsGet
     */
    readonly organizationId: string
}

/**
 * SalesApi - object-oriented interface
 * @export
 * @class SalesApi
 * @extends {BaseAPI}
 */
export class SalesApi extends BaseAPI {
    /**
     * Retrieve a list of all invoices and credit notes for the organization. This can be a lengthy and demanding process on our end.  Therefore you should not use this endpoint often. Instead use the endpoint with the changesSince filter, to make sure you only get data that has changed since you last got the list.
     * @summary List invoices and credit notes
     * @param {SalesApiV1OrganizationIdSalesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public v1OrganizationIdSalesGet(requestParameters: SalesApiV1OrganizationIdSalesGetRequest, options?: RawAxiosRequestConfig) {
        return SalesApiFp(this.configuration).v1OrganizationIdSalesGet(requestParameters.organizationId, requestParameters.startDate, requestParameters.endDate, requestParameters.fields, requestParameters.freeTextSearch, requestParameters.statusFilter, requestParameters.queryFilter, requestParameters.changesSince, requestParameters.deletedOnly, requestParameters.page, requestParameters.pageSize, requestParameters.sort, requestParameters.sortOrder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a model containing the users default sales voucher setting preferences.  These are the settings that are applied when the user creates a new invoice in Dinero\'s web app.  The user can edit these setting under Settings>InvoiceSettings (Indstillinger>Faktura indstillinger).
     * @summary Get default settings
     * @param {SalesApiV1OrganizationIdSalesSettingsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesApi
     */
    public v1OrganizationIdSalesSettingsGet(requestParameters: SalesApiV1OrganizationIdSalesSettingsGetRequest, options?: RawAxiosRequestConfig) {
        return SalesApiFp(this.configuration).v1OrganizationIdSalesSettingsGet(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }
}


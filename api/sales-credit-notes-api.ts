/* tslint:disable */
/* eslint-disable */
/**
 * Dinero API
 * Welcome to our endpoint documentation. Please try to carefully read our general documentation found on <a href=\"https://developer.dinero.dk/\">developer.dinero.dk</a> for information regarding the authorization proces, status and errorcodes, FAQ, Postman tutorial etc. <br><br>Once authorized, you simply add \'Authorization: Bearer <access-token>\' to the header of your requests. On the page below, you\'ll find all our endpoints documented as well as possible, but if you have any questions regarding an endpoint, or an error in the description, please contact us on <a href=\"mailto:api@dinero.dk\">api@dinero.dk.</a> 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiMailoutModel } from '../model';
// @ts-ignore
import type { BookModel } from '../model';
// @ts-ignore
import type { CreatedPaymentResponse } from '../model';
// @ts-ignore
import type { CreatedResponseModel } from '../model';
// @ts-ignore
import type { DeletedPaymentResponse } from '../model';
// @ts-ignore
import type { EanSendModel } from '../model';
// @ts-ignore
import type { EmailSentModel } from '../model';
// @ts-ignore
import type { InvoicePaymentsModel } from '../model';
// @ts-ignore
import type { InvoiceReadModel } from '../model';
// @ts-ignore
import type { MailoutTemplateReadModel } from '../model';
// @ts-ignore
import type { PaymentCreateModel } from '../model';
// @ts-ignore
import type { SalesCreditNoteCreateFetchModel } from '../model';
// @ts-ignore
import type { SalesCreditNoteCreateModel } from '../model';
// @ts-ignore
import type { SalesCreditNoteFetchReadModel } from '../model';
// @ts-ignore
import type { SalesCreditNoteReadModel } from '../model';
// @ts-ignore
import type { SalesCreditNoteUpdateModel } from '../model';
// @ts-ignore
import type { SalesVoucherReadListModelDineroCollection } from '../model';
// @ts-ignore
import type { TimestampObject } from '../model';
// @ts-ignore
import type { UpdatedResponseModel } from '../model';
// @ts-ignore
import type { VoucherMailoutReadModel } from '../model';
/**
 * SalesCreditNotesApi - axios parameter creator
 * @export
 */
export const SalesCreditNotesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Update an existing credit note. The credit note cannot be updated if booked. Note that the put request per rest standard will update the entire credit note and not only the fields you send.
         * @summary Update credit note
         * @param {string} guid Unique identifier for the credit note
         * @param {string} organizationId 
         * @param {SalesCreditNoteUpdateModel} [salesCreditNoteUpdateModel] Content of the credit note to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v12OrganizationIdSalesCreditnotesGuidPut: async (guid: string, organizationId: string, salesCreditNoteUpdateModel?: SalesCreditNoteUpdateModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('v12OrganizationIdSalesCreditnotesGuidPut', 'guid', guid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v12OrganizationIdSalesCreditnotesGuidPut', 'organizationId', organizationId)
            const localVarPath = `/v1.2/{organizationId}/sales/creditnotes/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(salesCreditNoteUpdateModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a credit note to get total and line sums calculations.
         * @summary Get credit note totals
         * @param {string} organizationId 
         * @param {SalesCreditNoteCreateFetchModel} [salesCreditNoteCreateFetchModel] Model of the credit note.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdSalesCreditnotesFetchPost: async (organizationId: string, salesCreditNoteCreateFetchModel?: SalesCreditNoteCreateFetchModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdSalesCreditnotesFetchPost', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/sales/creditnotes/fetch`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(salesCreditNoteCreateFetchModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of credit notes for the organization. This can return quite a long list of credit notes, consider using the changesSince filter to only return credit notes that have been changed since the last time you fetched the list.
         * @summary List credit notes
         * @param {string} organizationId 
         * @param {string} [startDate] Start date in format \&#39;YYYY-MM-DD\&#39; example \&#39;2015-01-01\&#39;. If you define a start date, you also need to define an end date.
         * @param {string} [endDate] End date in format \&#39;YYYY-MM-DD\&#39; example \&#39;2015-01-01\&#39;. If you define an end date, you also need to define a start date.
         * @param {string} [fields] A comma separated list of fields to include in the response.              Possible values are:              Number, Guid, ExternalReference, ContactName, ContactGuid, Date, PaymentDate, Description, Currency, Status, MailOutStatus,              TotalExclVatInDkk, TotalInclVatInDkk, TotalExclVat, TotalInclVat, CreatedAt, UpdatedAt and DeletedAt.              If null, defaults to Guid,ContactName,Date,Description,Type.              Notice that it\&#39;s not case sensitive, the property name will be returned the way you request it.
         * @param {string} [freeTextSearch] A free text search performed on Number, ContactName, Description and TotalInclTax
         * @param {string} [statusFilter] Filter on Status. You can choose Draft, Booked, Paid, OverPaid or Overdue. You can add multible filters example: \&#39;Paid,OverPaid,Overdue\&#39;. If left empty no filter is applied.
         * @param {string} [queryFilter] Filtering can be applied to following fields:              ExternalReference, ContactGuid, Description. See API documentation for filtering format. If left empty no filtering is applied.
         * @param {string} [changesSince] [Generic Filter Option] Only return credit notes that was created, deleted or updated at or after given time.              If left empty, this filter will not be applied, and credit notes will be returned regardless of change history.              The time must be UTC and in the format \&#39;YYYY-MM-DDTHH:mm:ssZ\&#39; example: \&#39;2015-08-18T06:36:22Z\&#39;.
         * @param {boolean} [deletedOnly] [Generic Filter Option] Only select deleted credit notes. If left empty, will defaults to false.
         * @param {number} [page] The 0-based page number
         * @param {number} [pageSize] The maximum number of items to include in a page. Maximum 1000.
         * @param {string} [sort] A comma separated list of fields to sort on. Possible values are: VoucherNumber, VoucherDate, Status and Contact.
         * @param {string} [sortOrder] Sort order. Valid values are ascending and descending. Field Status is always sorted in the order Draft, Overdue, Booked, OverPaid and Paid.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdSalesCreditnotesGet: async (organizationId: string, startDate?: string, endDate?: string, fields?: string, freeTextSearch?: string, statusFilter?: string, queryFilter?: string, changesSince?: string, deletedOnly?: boolean, page?: number, pageSize?: number, sort?: string, sortOrder?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdSalesCreditnotesGet', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/sales/creditnotes`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (freeTextSearch !== undefined) {
                localVarQueryParameter['freeTextSearch'] = freeTextSearch;
            }

            if (statusFilter !== undefined) {
                localVarQueryParameter['statusFilter'] = statusFilter;
            }

            if (queryFilter !== undefined) {
                localVarQueryParameter['queryFilter'] = queryFilter;
            }

            if (changesSince !== undefined) {
                localVarQueryParameter['changesSince'] = changesSince;
            }

            if (deletedOnly !== undefined) {
                localVarQueryParameter['deletedOnly'] = deletedOnly;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Book credit note. Booking means actually posting the credit note to the accounts. A booked credit note can also be sent via email, sms or as an e-credit note.
         * @summary Book credit note
         * @param {string} guid Guid of the credit note to book
         * @param {string} organizationId 
         * @param {BookModel} [bookModel] Data used for the booking transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdSalesCreditnotesGuidBookPost: async (guid: string, organizationId: string, bookModel?: BookModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('v1OrganizationIdSalesCreditnotesGuidBookPost', 'guid', guid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdSalesCreditnotesGuidBookPost', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/sales/creditnotes/{guid}/book`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete credit note. The credit note should not be deleted if booked. In that case a new invoice would be the correct way to cancel the credit note.
         * @summary Delete credit note
         * @param {string} guid Unique identifier for the credit note
         * @param {string} organizationId 
         * @param {TimestampObject} [timestampObject] optional timestamp to verify version before deletion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdSalesCreditnotesGuidDelete: async (guid: string, organizationId: string, timestampObject?: TimestampObject, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('v1OrganizationIdSalesCreditnotesGuidDelete', 'guid', guid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdSalesCreditnotesGuidDelete', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/sales/creditnotes/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(timestampObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send an e-credit note to an EAN customer. This is a public system for electronic invoicing.
         * @summary Send credit note with EAN
         * @param {string} guid Guid of the credit note to send
         * @param {string} organizationId 
         * @param {EanSendModel} [eanSendModel] parameters for the Ean invoice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdSalesCreditnotesGuidECreditNotePost: async (guid: string, organizationId: string, eanSendModel?: EanSendModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('v1OrganizationIdSalesCreditnotesGuidECreditNotePost', 'guid', guid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdSalesCreditnotesGuidECreditNotePost', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/sales/creditnotes/{guid}/e-creditNote`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eanSendModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send an email with link to a public version of the credit note where it can be printed or downloaded as a pdf. The credit note must be booked.
         * @summary Send credit note
         * @param {string} guid Guid of the credit note to send
         * @param {string} organizationId 
         * @param {ApiMailoutModel} [apiMailoutModel] Model of the email to send
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdSalesCreditnotesGuidEmailPost: async (guid: string, organizationId: string, apiMailoutModel?: ApiMailoutModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('v1OrganizationIdSalesCreditnotesGuidEmailPost', 'guid', guid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdSalesCreditnotesGuidEmailPost', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/sales/creditnotes/{guid}/email`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiMailoutModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the email template for a credit note. This can be used to preview what will be sent out on the email. These standards can be overwritten during the sending phase.
         * @summary Get credit note email template
         * @param {string} guid Guid of the credit note to send
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdSalesCreditnotesGuidEmailTemplateGet: async (guid: string, organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('v1OrganizationIdSalesCreditnotesGuidEmailTemplateGet', 'guid', guid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdSalesCreditnotesGuidEmailTemplateGet', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/sales/creditnotes/{guid}/email/template`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get credit note as json or pdf. Define the Accept header of your request to either \'application/json\' or \'application/octet-stream\'. PDF\'s can only be generated from booked credit notes.
         * @summary Get credit note
         * @param {string} guid Guid of the credit note
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdSalesCreditnotesGuidGet: async (guid: string, organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('v1OrganizationIdSalesCreditnotesGuidGet', 'guid', guid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdSalesCreditnotesGuidGet', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/sales/creditnotes/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the mailouts for a specific credit note
         * @summary List mailouts
         * @param {string} guid 
         * @param {string} organizationId 
         * @param {string} [changesSince] [Generic Filter Option] Only return mailouts that was created or updated after a given time.              If left empty, this filter will not be applied, and mailouts will be returned regardless of change history.              The time must be UTC and in the format \&#39;YYYY-MM-DDTHH:mm:ssZ\&#39; example: \&#39;2015-08-18T06:36:22Z\&#39;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdSalesCreditnotesGuidMailoutsGet: async (guid: string, organizationId: string, changesSince?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('v1OrganizationIdSalesCreditnotesGuidMailoutsGet', 'guid', guid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdSalesCreditnotesGuidMailoutsGet', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/sales/creditnotes/{guid}/mailouts`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (changesSince !== undefined) {
                localVarQueryParameter['changesSince'] = changesSince;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the payments for an creditnote
         * @summary Get payments for creditnote
         * @param {string} guid Guid of the creditnote
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdSalesCreditnotesGuidPaymentsGet: async (guid: string, organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('v1OrganizationIdSalesCreditnotesGuidPaymentsGet', 'guid', guid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdSalesCreditnotesGuidPaymentsGet', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/sales/creditnotes/{guid}/payments`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a payment from an creditnote. Only booked creditnote can have payments.
         * @summary Delete payment from creditnote
         * @param {string} guid Guid of the creditnote
         * @param {string} paymentGuid The payment guid
         * @param {string} organizationId 
         * @param {TimestampObject} [timestampObject] Version of the invoice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdSalesCreditnotesGuidPaymentsPaymentGuidDelete: async (guid: string, paymentGuid: string, organizationId: string, timestampObject?: TimestampObject, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('v1OrganizationIdSalesCreditnotesGuidPaymentsPaymentGuidDelete', 'guid', guid)
            // verify required parameter 'paymentGuid' is not null or undefined
            assertParamExists('v1OrganizationIdSalesCreditnotesGuidPaymentsPaymentGuidDelete', 'paymentGuid', paymentGuid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdSalesCreditnotesGuidPaymentsPaymentGuidDelete', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/sales/creditnotes/{guid}/payments/{paymentGuid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)))
                .replace(`{${"paymentGuid"}}`, encodeURIComponent(String(paymentGuid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(timestampObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a payment for an creditnote. Payments can only be added to a booked creditnote.
         * @summary Add payment to creditnote
         * @param {string} guid Guid of the creditnote
         * @param {string} organizationId 
         * @param {PaymentCreateModel} [paymentCreateModel] The payment details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdSalesCreditnotesGuidPaymentsPost: async (guid: string, organizationId: string, paymentCreateModel?: PaymentCreateModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('v1OrganizationIdSalesCreditnotesGuidPaymentsPost', 'guid', guid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdSalesCreditnotesGuidPaymentsPost', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/sales/creditnotes/{guid}/payments`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(paymentCreateModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a creditnote as PDF
         * @summary Get credit note as pdf
         * @param {string} guid Guid of the booked credit note to create a PDF from
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdSalesCreditnotesGuidPdfGet: async (guid: string, organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('v1OrganizationIdSalesCreditnotesGuidPdfGet', 'guid', guid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdSalesCreditnotesGuidPdfGet', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/sales/creditnotes/{guid}/pdf`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new draft credit note in Dinero. This credit note can be found in the \"Salg\" section of Dinero. A draft credit note will not count in the accounts untill booked.  Think about using the book and send endpoints after the draft has been created to further automate the booking process for the user. Also note that the date on the credit note, should always be the date the credit note is sent to the customer.
         * @summary Create credit note
         * @param {string} organizationId 
         * @param {SalesCreditNoteCreateModel} [salesCreditNoteCreateModel] Model of the credit note to save.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdSalesCreditnotesPost: async (organizationId: string, salesCreditNoteCreateModel?: SalesCreditNoteCreateModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdSalesCreditnotesPost', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/sales/creditnotes`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(salesCreditNoteCreateModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SalesCreditNotesApi - functional programming interface
 * @export
 */
export const SalesCreditNotesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SalesCreditNotesApiAxiosParamCreator(configuration)
    return {
        /**
         * Update an existing credit note. The credit note cannot be updated if booked. Note that the put request per rest standard will update the entire credit note and not only the fields you send.
         * @summary Update credit note
         * @param {string} guid Unique identifier for the credit note
         * @param {string} organizationId 
         * @param {SalesCreditNoteUpdateModel} [salesCreditNoteUpdateModel] Content of the credit note to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v12OrganizationIdSalesCreditnotesGuidPut(guid: string, organizationId: string, salesCreditNoteUpdateModel?: SalesCreditNoteUpdateModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdatedResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v12OrganizationIdSalesCreditnotesGuidPut(guid, organizationId, salesCreditNoteUpdateModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesCreditNotesApi.v12OrganizationIdSalesCreditnotesGuidPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch a credit note to get total and line sums calculations.
         * @summary Get credit note totals
         * @param {string} organizationId 
         * @param {SalesCreditNoteCreateFetchModel} [salesCreditNoteCreateFetchModel] Model of the credit note.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdSalesCreditnotesFetchPost(organizationId: string, salesCreditNoteCreateFetchModel?: SalesCreditNoteCreateFetchModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesCreditNoteFetchReadModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdSalesCreditnotesFetchPost(organizationId, salesCreditNoteCreateFetchModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesCreditNotesApi.v1OrganizationIdSalesCreditnotesFetchPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a list of credit notes for the organization. This can return quite a long list of credit notes, consider using the changesSince filter to only return credit notes that have been changed since the last time you fetched the list.
         * @summary List credit notes
         * @param {string} organizationId 
         * @param {string} [startDate] Start date in format \&#39;YYYY-MM-DD\&#39; example \&#39;2015-01-01\&#39;. If you define a start date, you also need to define an end date.
         * @param {string} [endDate] End date in format \&#39;YYYY-MM-DD\&#39; example \&#39;2015-01-01\&#39;. If you define an end date, you also need to define a start date.
         * @param {string} [fields] A comma separated list of fields to include in the response.              Possible values are:              Number, Guid, ExternalReference, ContactName, ContactGuid, Date, PaymentDate, Description, Currency, Status, MailOutStatus,              TotalExclVatInDkk, TotalInclVatInDkk, TotalExclVat, TotalInclVat, CreatedAt, UpdatedAt and DeletedAt.              If null, defaults to Guid,ContactName,Date,Description,Type.              Notice that it\&#39;s not case sensitive, the property name will be returned the way you request it.
         * @param {string} [freeTextSearch] A free text search performed on Number, ContactName, Description and TotalInclTax
         * @param {string} [statusFilter] Filter on Status. You can choose Draft, Booked, Paid, OverPaid or Overdue. You can add multible filters example: \&#39;Paid,OverPaid,Overdue\&#39;. If left empty no filter is applied.
         * @param {string} [queryFilter] Filtering can be applied to following fields:              ExternalReference, ContactGuid, Description. See API documentation for filtering format. If left empty no filtering is applied.
         * @param {string} [changesSince] [Generic Filter Option] Only return credit notes that was created, deleted or updated at or after given time.              If left empty, this filter will not be applied, and credit notes will be returned regardless of change history.              The time must be UTC and in the format \&#39;YYYY-MM-DDTHH:mm:ssZ\&#39; example: \&#39;2015-08-18T06:36:22Z\&#39;.
         * @param {boolean} [deletedOnly] [Generic Filter Option] Only select deleted credit notes. If left empty, will defaults to false.
         * @param {number} [page] The 0-based page number
         * @param {number} [pageSize] The maximum number of items to include in a page. Maximum 1000.
         * @param {string} [sort] A comma separated list of fields to sort on. Possible values are: VoucherNumber, VoucherDate, Status and Contact.
         * @param {string} [sortOrder] Sort order. Valid values are ascending and descending. Field Status is always sorted in the order Draft, Overdue, Booked, OverPaid and Paid.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdSalesCreditnotesGet(organizationId: string, startDate?: string, endDate?: string, fields?: string, freeTextSearch?: string, statusFilter?: string, queryFilter?: string, changesSince?: string, deletedOnly?: boolean, page?: number, pageSize?: number, sort?: string, sortOrder?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesVoucherReadListModelDineroCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdSalesCreditnotesGet(organizationId, startDate, endDate, fields, freeTextSearch, statusFilter, queryFilter, changesSince, deletedOnly, page, pageSize, sort, sortOrder, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesCreditNotesApi.v1OrganizationIdSalesCreditnotesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Book credit note. Booking means actually posting the credit note to the accounts. A booked credit note can also be sent via email, sms or as an e-credit note.
         * @summary Book credit note
         * @param {string} guid Guid of the credit note to book
         * @param {string} organizationId 
         * @param {BookModel} [bookModel] Data used for the booking transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdSalesCreditnotesGuidBookPost(guid: string, organizationId: string, bookModel?: BookModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvoiceReadModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdSalesCreditnotesGuidBookPost(guid, organizationId, bookModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesCreditNotesApi.v1OrganizationIdSalesCreditnotesGuidBookPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete credit note. The credit note should not be deleted if booked. In that case a new invoice would be the correct way to cancel the credit note.
         * @summary Delete credit note
         * @param {string} guid Unique identifier for the credit note
         * @param {string} organizationId 
         * @param {TimestampObject} [timestampObject] optional timestamp to verify version before deletion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdSalesCreditnotesGuidDelete(guid: string, organizationId: string, timestampObject?: TimestampObject, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdSalesCreditnotesGuidDelete(guid, organizationId, timestampObject, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesCreditNotesApi.v1OrganizationIdSalesCreditnotesGuidDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Send an e-credit note to an EAN customer. This is a public system for electronic invoicing.
         * @summary Send credit note with EAN
         * @param {string} guid Guid of the credit note to send
         * @param {string} organizationId 
         * @param {EanSendModel} [eanSendModel] parameters for the Ean invoice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdSalesCreditnotesGuidECreditNotePost(guid: string, organizationId: string, eanSendModel?: EanSendModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdSalesCreditnotesGuidECreditNotePost(guid, organizationId, eanSendModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesCreditNotesApi.v1OrganizationIdSalesCreditnotesGuidECreditNotePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Send an email with link to a public version of the credit note where it can be printed or downloaded as a pdf. The credit note must be booked.
         * @summary Send credit note
         * @param {string} guid Guid of the credit note to send
         * @param {string} organizationId 
         * @param {ApiMailoutModel} [apiMailoutModel] Model of the email to send
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdSalesCreditnotesGuidEmailPost(guid: string, organizationId: string, apiMailoutModel?: ApiMailoutModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailSentModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdSalesCreditnotesGuidEmailPost(guid, organizationId, apiMailoutModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesCreditNotesApi.v1OrganizationIdSalesCreditnotesGuidEmailPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Gets the email template for a credit note. This can be used to preview what will be sent out on the email. These standards can be overwritten during the sending phase.
         * @summary Get credit note email template
         * @param {string} guid Guid of the credit note to send
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdSalesCreditnotesGuidEmailTemplateGet(guid: string, organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MailoutTemplateReadModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdSalesCreditnotesGuidEmailTemplateGet(guid, organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesCreditNotesApi.v1OrganizationIdSalesCreditnotesGuidEmailTemplateGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get credit note as json or pdf. Define the Accept header of your request to either \'application/json\' or \'application/octet-stream\'. PDF\'s can only be generated from booked credit notes.
         * @summary Get credit note
         * @param {string} guid Guid of the credit note
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdSalesCreditnotesGuidGet(guid: string, organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SalesCreditNoteReadModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdSalesCreditnotesGuidGet(guid, organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesCreditNotesApi.v1OrganizationIdSalesCreditnotesGuidGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List the mailouts for a specific credit note
         * @summary List mailouts
         * @param {string} guid 
         * @param {string} organizationId 
         * @param {string} [changesSince] [Generic Filter Option] Only return mailouts that was created or updated after a given time.              If left empty, this filter will not be applied, and mailouts will be returned regardless of change history.              The time must be UTC and in the format \&#39;YYYY-MM-DDTHH:mm:ssZ\&#39; example: \&#39;2015-08-18T06:36:22Z\&#39;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdSalesCreditnotesGuidMailoutsGet(guid: string, organizationId: string, changesSince?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoucherMailoutReadModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdSalesCreditnotesGuidMailoutsGet(guid, organizationId, changesSince, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesCreditNotesApi.v1OrganizationIdSalesCreditnotesGuidMailoutsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get the payments for an creditnote
         * @summary Get payments for creditnote
         * @param {string} guid Guid of the creditnote
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdSalesCreditnotesGuidPaymentsGet(guid: string, organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvoicePaymentsModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdSalesCreditnotesGuidPaymentsGet(guid, organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesCreditNotesApi.v1OrganizationIdSalesCreditnotesGuidPaymentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a payment from an creditnote. Only booked creditnote can have payments.
         * @summary Delete payment from creditnote
         * @param {string} guid Guid of the creditnote
         * @param {string} paymentGuid The payment guid
         * @param {string} organizationId 
         * @param {TimestampObject} [timestampObject] Version of the invoice
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdSalesCreditnotesGuidPaymentsPaymentGuidDelete(guid: string, paymentGuid: string, organizationId: string, timestampObject?: TimestampObject, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeletedPaymentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdSalesCreditnotesGuidPaymentsPaymentGuidDelete(guid, paymentGuid, organizationId, timestampObject, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesCreditNotesApi.v1OrganizationIdSalesCreditnotesGuidPaymentsPaymentGuidDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a payment for an creditnote. Payments can only be added to a booked creditnote.
         * @summary Add payment to creditnote
         * @param {string} guid Guid of the creditnote
         * @param {string} organizationId 
         * @param {PaymentCreateModel} [paymentCreateModel] The payment details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdSalesCreditnotesGuidPaymentsPost(guid: string, organizationId: string, paymentCreateModel?: PaymentCreateModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatedPaymentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdSalesCreditnotesGuidPaymentsPost(guid, organizationId, paymentCreateModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesCreditNotesApi.v1OrganizationIdSalesCreditnotesGuidPaymentsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a creditnote as PDF
         * @summary Get credit note as pdf
         * @param {string} guid Guid of the booked credit note to create a PDF from
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdSalesCreditnotesGuidPdfGet(guid: string, organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdSalesCreditnotesGuidPdfGet(guid, organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesCreditNotesApi.v1OrganizationIdSalesCreditnotesGuidPdfGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new draft credit note in Dinero. This credit note can be found in the \"Salg\" section of Dinero. A draft credit note will not count in the accounts untill booked.  Think about using the book and send endpoints after the draft has been created to further automate the booking process for the user. Also note that the date on the credit note, should always be the date the credit note is sent to the customer.
         * @summary Create credit note
         * @param {string} organizationId 
         * @param {SalesCreditNoteCreateModel} [salesCreditNoteCreateModel] Model of the credit note to save.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdSalesCreditnotesPost(organizationId: string, salesCreditNoteCreateModel?: SalesCreditNoteCreateModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatedResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdSalesCreditnotesPost(organizationId, salesCreditNoteCreateModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SalesCreditNotesApi.v1OrganizationIdSalesCreditnotesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SalesCreditNotesApi - factory interface
 * @export
 */
export const SalesCreditNotesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SalesCreditNotesApiFp(configuration)
    return {
        /**
         * Update an existing credit note. The credit note cannot be updated if booked. Note that the put request per rest standard will update the entire credit note and not only the fields you send.
         * @summary Update credit note
         * @param {SalesCreditNotesApiV12OrganizationIdSalesCreditnotesGuidPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v12OrganizationIdSalesCreditnotesGuidPut(requestParameters: SalesCreditNotesApiV12OrganizationIdSalesCreditnotesGuidPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<UpdatedResponseModel> {
            return localVarFp.v12OrganizationIdSalesCreditnotesGuidPut(requestParameters.guid, requestParameters.organizationId, requestParameters.salesCreditNoteUpdateModel, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a credit note to get total and line sums calculations.
         * @summary Get credit note totals
         * @param {SalesCreditNotesApiV1OrganizationIdSalesCreditnotesFetchPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdSalesCreditnotesFetchPost(requestParameters: SalesCreditNotesApiV1OrganizationIdSalesCreditnotesFetchPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<SalesCreditNoteFetchReadModel> {
            return localVarFp.v1OrganizationIdSalesCreditnotesFetchPost(requestParameters.organizationId, requestParameters.salesCreditNoteCreateFetchModel, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of credit notes for the organization. This can return quite a long list of credit notes, consider using the changesSince filter to only return credit notes that have been changed since the last time you fetched the list.
         * @summary List credit notes
         * @param {SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdSalesCreditnotesGet(requestParameters: SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<SalesVoucherReadListModelDineroCollection> {
            return localVarFp.v1OrganizationIdSalesCreditnotesGet(requestParameters.organizationId, requestParameters.startDate, requestParameters.endDate, requestParameters.fields, requestParameters.freeTextSearch, requestParameters.statusFilter, requestParameters.queryFilter, requestParameters.changesSince, requestParameters.deletedOnly, requestParameters.page, requestParameters.pageSize, requestParameters.sort, requestParameters.sortOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * Book credit note. Booking means actually posting the credit note to the accounts. A booked credit note can also be sent via email, sms or as an e-credit note.
         * @summary Book credit note
         * @param {SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidBookPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdSalesCreditnotesGuidBookPost(requestParameters: SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidBookPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<InvoiceReadModel> {
            return localVarFp.v1OrganizationIdSalesCreditnotesGuidBookPost(requestParameters.guid, requestParameters.organizationId, requestParameters.bookModel, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete credit note. The credit note should not be deleted if booked. In that case a new invoice would be the correct way to cancel the credit note.
         * @summary Delete credit note
         * @param {SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdSalesCreditnotesGuidDelete(requestParameters: SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1OrganizationIdSalesCreditnotesGuidDelete(requestParameters.guid, requestParameters.organizationId, requestParameters.timestampObject, options).then((request) => request(axios, basePath));
        },
        /**
         * Send an e-credit note to an EAN customer. This is a public system for electronic invoicing.
         * @summary Send credit note with EAN
         * @param {SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidECreditNotePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdSalesCreditnotesGuidECreditNotePost(requestParameters: SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidECreditNotePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1OrganizationIdSalesCreditnotesGuidECreditNotePost(requestParameters.guid, requestParameters.organizationId, requestParameters.eanSendModel, options).then((request) => request(axios, basePath));
        },
        /**
         * Send an email with link to a public version of the credit note where it can be printed or downloaded as a pdf. The credit note must be booked.
         * @summary Send credit note
         * @param {SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidEmailPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdSalesCreditnotesGuidEmailPost(requestParameters: SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidEmailPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmailSentModel> {
            return localVarFp.v1OrganizationIdSalesCreditnotesGuidEmailPost(requestParameters.guid, requestParameters.organizationId, requestParameters.apiMailoutModel, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the email template for a credit note. This can be used to preview what will be sent out on the email. These standards can be overwritten during the sending phase.
         * @summary Get credit note email template
         * @param {SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidEmailTemplateGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdSalesCreditnotesGuidEmailTemplateGet(requestParameters: SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidEmailTemplateGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<MailoutTemplateReadModel> {
            return localVarFp.v1OrganizationIdSalesCreditnotesGuidEmailTemplateGet(requestParameters.guid, requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get credit note as json or pdf. Define the Accept header of your request to either \'application/json\' or \'application/octet-stream\'. PDF\'s can only be generated from booked credit notes.
         * @summary Get credit note
         * @param {SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdSalesCreditnotesGuidGet(requestParameters: SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<SalesCreditNoteReadModel> {
            return localVarFp.v1OrganizationIdSalesCreditnotesGuidGet(requestParameters.guid, requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * List the mailouts for a specific credit note
         * @summary List mailouts
         * @param {SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidMailoutsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdSalesCreditnotesGuidMailoutsGet(requestParameters: SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidMailoutsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<VoucherMailoutReadModel> {
            return localVarFp.v1OrganizationIdSalesCreditnotesGuidMailoutsGet(requestParameters.guid, requestParameters.organizationId, requestParameters.changesSince, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the payments for an creditnote
         * @summary Get payments for creditnote
         * @param {SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidPaymentsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdSalesCreditnotesGuidPaymentsGet(requestParameters: SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidPaymentsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<InvoicePaymentsModel> {
            return localVarFp.v1OrganizationIdSalesCreditnotesGuidPaymentsGet(requestParameters.guid, requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a payment from an creditnote. Only booked creditnote can have payments.
         * @summary Delete payment from creditnote
         * @param {SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidPaymentsPaymentGuidDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdSalesCreditnotesGuidPaymentsPaymentGuidDelete(requestParameters: SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidPaymentsPaymentGuidDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeletedPaymentResponse> {
            return localVarFp.v1OrganizationIdSalesCreditnotesGuidPaymentsPaymentGuidDelete(requestParameters.guid, requestParameters.paymentGuid, requestParameters.organizationId, requestParameters.timestampObject, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a payment for an creditnote. Payments can only be added to a booked creditnote.
         * @summary Add payment to creditnote
         * @param {SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidPaymentsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdSalesCreditnotesGuidPaymentsPost(requestParameters: SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidPaymentsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreatedPaymentResponse> {
            return localVarFp.v1OrganizationIdSalesCreditnotesGuidPaymentsPost(requestParameters.guid, requestParameters.organizationId, requestParameters.paymentCreateModel, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a creditnote as PDF
         * @summary Get credit note as pdf
         * @param {SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidPdfGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdSalesCreditnotesGuidPdfGet(requestParameters: SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidPdfGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1OrganizationIdSalesCreditnotesGuidPdfGet(requestParameters.guid, requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new draft credit note in Dinero. This credit note can be found in the \"Salg\" section of Dinero. A draft credit note will not count in the accounts untill booked.  Think about using the book and send endpoints after the draft has been created to further automate the booking process for the user. Also note that the date on the credit note, should always be the date the credit note is sent to the customer.
         * @summary Create credit note
         * @param {SalesCreditNotesApiV1OrganizationIdSalesCreditnotesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdSalesCreditnotesPost(requestParameters: SalesCreditNotesApiV1OrganizationIdSalesCreditnotesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreatedResponseModel> {
            return localVarFp.v1OrganizationIdSalesCreditnotesPost(requestParameters.organizationId, requestParameters.salesCreditNoteCreateModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for v12OrganizationIdSalesCreditnotesGuidPut operation in SalesCreditNotesApi.
 * @export
 * @interface SalesCreditNotesApiV12OrganizationIdSalesCreditnotesGuidPutRequest
 */
export interface SalesCreditNotesApiV12OrganizationIdSalesCreditnotesGuidPutRequest {
    /**
     * Unique identifier for the credit note
     * @type {string}
     * @memberof SalesCreditNotesApiV12OrganizationIdSalesCreditnotesGuidPut
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof SalesCreditNotesApiV12OrganizationIdSalesCreditnotesGuidPut
     */
    readonly organizationId: string

    /**
     * Content of the credit note to update
     * @type {SalesCreditNoteUpdateModel}
     * @memberof SalesCreditNotesApiV12OrganizationIdSalesCreditnotesGuidPut
     */
    readonly salesCreditNoteUpdateModel?: SalesCreditNoteUpdateModel
}

/**
 * Request parameters for v1OrganizationIdSalesCreditnotesFetchPost operation in SalesCreditNotesApi.
 * @export
 * @interface SalesCreditNotesApiV1OrganizationIdSalesCreditnotesFetchPostRequest
 */
export interface SalesCreditNotesApiV1OrganizationIdSalesCreditnotesFetchPostRequest {
    /**
     * 
     * @type {string}
     * @memberof SalesCreditNotesApiV1OrganizationIdSalesCreditnotesFetchPost
     */
    readonly organizationId: string

    /**
     * Model of the credit note.
     * @type {SalesCreditNoteCreateFetchModel}
     * @memberof SalesCreditNotesApiV1OrganizationIdSalesCreditnotesFetchPost
     */
    readonly salesCreditNoteCreateFetchModel?: SalesCreditNoteCreateFetchModel
}

/**
 * Request parameters for v1OrganizationIdSalesCreditnotesGet operation in SalesCreditNotesApi.
 * @export
 * @interface SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGetRequest
 */
export interface SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGet
     */
    readonly organizationId: string

    /**
     * Start date in format \&#39;YYYY-MM-DD\&#39; example \&#39;2015-01-01\&#39;. If you define a start date, you also need to define an end date.
     * @type {string}
     * @memberof SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGet
     */
    readonly startDate?: string

    /**
     * End date in format \&#39;YYYY-MM-DD\&#39; example \&#39;2015-01-01\&#39;. If you define an end date, you also need to define a start date.
     * @type {string}
     * @memberof SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGet
     */
    readonly endDate?: string

    /**
     * A comma separated list of fields to include in the response.              Possible values are:              Number, Guid, ExternalReference, ContactName, ContactGuid, Date, PaymentDate, Description, Currency, Status, MailOutStatus,              TotalExclVatInDkk, TotalInclVatInDkk, TotalExclVat, TotalInclVat, CreatedAt, UpdatedAt and DeletedAt.              If null, defaults to Guid,ContactName,Date,Description,Type.              Notice that it\&#39;s not case sensitive, the property name will be returned the way you request it.
     * @type {string}
     * @memberof SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGet
     */
    readonly fields?: string

    /**
     * A free text search performed on Number, ContactName, Description and TotalInclTax
     * @type {string}
     * @memberof SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGet
     */
    readonly freeTextSearch?: string

    /**
     * Filter on Status. You can choose Draft, Booked, Paid, OverPaid or Overdue. You can add multible filters example: \&#39;Paid,OverPaid,Overdue\&#39;. If left empty no filter is applied.
     * @type {string}
     * @memberof SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGet
     */
    readonly statusFilter?: string

    /**
     * Filtering can be applied to following fields:              ExternalReference, ContactGuid, Description. See API documentation for filtering format. If left empty no filtering is applied.
     * @type {string}
     * @memberof SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGet
     */
    readonly queryFilter?: string

    /**
     * [Generic Filter Option] Only return credit notes that was created, deleted or updated at or after given time.              If left empty, this filter will not be applied, and credit notes will be returned regardless of change history.              The time must be UTC and in the format \&#39;YYYY-MM-DDTHH:mm:ssZ\&#39; example: \&#39;2015-08-18T06:36:22Z\&#39;.
     * @type {string}
     * @memberof SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGet
     */
    readonly changesSince?: string

    /**
     * [Generic Filter Option] Only select deleted credit notes. If left empty, will defaults to false.
     * @type {boolean}
     * @memberof SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGet
     */
    readonly deletedOnly?: boolean

    /**
     * The 0-based page number
     * @type {number}
     * @memberof SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGet
     */
    readonly page?: number

    /**
     * The maximum number of items to include in a page. Maximum 1000.
     * @type {number}
     * @memberof SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGet
     */
    readonly pageSize?: number

    /**
     * A comma separated list of fields to sort on. Possible values are: VoucherNumber, VoucherDate, Status and Contact.
     * @type {string}
     * @memberof SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGet
     */
    readonly sort?: string

    /**
     * Sort order. Valid values are ascending and descending. Field Status is always sorted in the order Draft, Overdue, Booked, OverPaid and Paid.
     * @type {string}
     * @memberof SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGet
     */
    readonly sortOrder?: string
}

/**
 * Request parameters for v1OrganizationIdSalesCreditnotesGuidBookPost operation in SalesCreditNotesApi.
 * @export
 * @interface SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidBookPostRequest
 */
export interface SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidBookPostRequest {
    /**
     * Guid of the credit note to book
     * @type {string}
     * @memberof SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidBookPost
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidBookPost
     */
    readonly organizationId: string

    /**
     * Data used for the booking transaction
     * @type {BookModel}
     * @memberof SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidBookPost
     */
    readonly bookModel?: BookModel
}

/**
 * Request parameters for v1OrganizationIdSalesCreditnotesGuidDelete operation in SalesCreditNotesApi.
 * @export
 * @interface SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidDeleteRequest
 */
export interface SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidDeleteRequest {
    /**
     * Unique identifier for the credit note
     * @type {string}
     * @memberof SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidDelete
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidDelete
     */
    readonly organizationId: string

    /**
     * optional timestamp to verify version before deletion
     * @type {TimestampObject}
     * @memberof SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidDelete
     */
    readonly timestampObject?: TimestampObject
}

/**
 * Request parameters for v1OrganizationIdSalesCreditnotesGuidECreditNotePost operation in SalesCreditNotesApi.
 * @export
 * @interface SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidECreditNotePostRequest
 */
export interface SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidECreditNotePostRequest {
    /**
     * Guid of the credit note to send
     * @type {string}
     * @memberof SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidECreditNotePost
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidECreditNotePost
     */
    readonly organizationId: string

    /**
     * parameters for the Ean invoice
     * @type {EanSendModel}
     * @memberof SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidECreditNotePost
     */
    readonly eanSendModel?: EanSendModel
}

/**
 * Request parameters for v1OrganizationIdSalesCreditnotesGuidEmailPost operation in SalesCreditNotesApi.
 * @export
 * @interface SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidEmailPostRequest
 */
export interface SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidEmailPostRequest {
    /**
     * Guid of the credit note to send
     * @type {string}
     * @memberof SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidEmailPost
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidEmailPost
     */
    readonly organizationId: string

    /**
     * Model of the email to send
     * @type {ApiMailoutModel}
     * @memberof SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidEmailPost
     */
    readonly apiMailoutModel?: ApiMailoutModel
}

/**
 * Request parameters for v1OrganizationIdSalesCreditnotesGuidEmailTemplateGet operation in SalesCreditNotesApi.
 * @export
 * @interface SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidEmailTemplateGetRequest
 */
export interface SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidEmailTemplateGetRequest {
    /**
     * Guid of the credit note to send
     * @type {string}
     * @memberof SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidEmailTemplateGet
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidEmailTemplateGet
     */
    readonly organizationId: string
}

/**
 * Request parameters for v1OrganizationIdSalesCreditnotesGuidGet operation in SalesCreditNotesApi.
 * @export
 * @interface SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidGetRequest
 */
export interface SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidGetRequest {
    /**
     * Guid of the credit note
     * @type {string}
     * @memberof SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidGet
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidGet
     */
    readonly organizationId: string
}

/**
 * Request parameters for v1OrganizationIdSalesCreditnotesGuidMailoutsGet operation in SalesCreditNotesApi.
 * @export
 * @interface SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidMailoutsGetRequest
 */
export interface SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidMailoutsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidMailoutsGet
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidMailoutsGet
     */
    readonly organizationId: string

    /**
     * [Generic Filter Option] Only return mailouts that was created or updated after a given time.              If left empty, this filter will not be applied, and mailouts will be returned regardless of change history.              The time must be UTC and in the format \&#39;YYYY-MM-DDTHH:mm:ssZ\&#39; example: \&#39;2015-08-18T06:36:22Z\&#39;.
     * @type {string}
     * @memberof SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidMailoutsGet
     */
    readonly changesSince?: string
}

/**
 * Request parameters for v1OrganizationIdSalesCreditnotesGuidPaymentsGet operation in SalesCreditNotesApi.
 * @export
 * @interface SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidPaymentsGetRequest
 */
export interface SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidPaymentsGetRequest {
    /**
     * Guid of the creditnote
     * @type {string}
     * @memberof SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidPaymentsGet
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidPaymentsGet
     */
    readonly organizationId: string
}

/**
 * Request parameters for v1OrganizationIdSalesCreditnotesGuidPaymentsPaymentGuidDelete operation in SalesCreditNotesApi.
 * @export
 * @interface SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidPaymentsPaymentGuidDeleteRequest
 */
export interface SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidPaymentsPaymentGuidDeleteRequest {
    /**
     * Guid of the creditnote
     * @type {string}
     * @memberof SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidPaymentsPaymentGuidDelete
     */
    readonly guid: string

    /**
     * The payment guid
     * @type {string}
     * @memberof SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidPaymentsPaymentGuidDelete
     */
    readonly paymentGuid: string

    /**
     * 
     * @type {string}
     * @memberof SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidPaymentsPaymentGuidDelete
     */
    readonly organizationId: string

    /**
     * Version of the invoice
     * @type {TimestampObject}
     * @memberof SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidPaymentsPaymentGuidDelete
     */
    readonly timestampObject?: TimestampObject
}

/**
 * Request parameters for v1OrganizationIdSalesCreditnotesGuidPaymentsPost operation in SalesCreditNotesApi.
 * @export
 * @interface SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidPaymentsPostRequest
 */
export interface SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidPaymentsPostRequest {
    /**
     * Guid of the creditnote
     * @type {string}
     * @memberof SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidPaymentsPost
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidPaymentsPost
     */
    readonly organizationId: string

    /**
     * The payment details
     * @type {PaymentCreateModel}
     * @memberof SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidPaymentsPost
     */
    readonly paymentCreateModel?: PaymentCreateModel
}

/**
 * Request parameters for v1OrganizationIdSalesCreditnotesGuidPdfGet operation in SalesCreditNotesApi.
 * @export
 * @interface SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidPdfGetRequest
 */
export interface SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidPdfGetRequest {
    /**
     * Guid of the booked credit note to create a PDF from
     * @type {string}
     * @memberof SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidPdfGet
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidPdfGet
     */
    readonly organizationId: string
}

/**
 * Request parameters for v1OrganizationIdSalesCreditnotesPost operation in SalesCreditNotesApi.
 * @export
 * @interface SalesCreditNotesApiV1OrganizationIdSalesCreditnotesPostRequest
 */
export interface SalesCreditNotesApiV1OrganizationIdSalesCreditnotesPostRequest {
    /**
     * 
     * @type {string}
     * @memberof SalesCreditNotesApiV1OrganizationIdSalesCreditnotesPost
     */
    readonly organizationId: string

    /**
     * Model of the credit note to save.
     * @type {SalesCreditNoteCreateModel}
     * @memberof SalesCreditNotesApiV1OrganizationIdSalesCreditnotesPost
     */
    readonly salesCreditNoteCreateModel?: SalesCreditNoteCreateModel
}

/**
 * SalesCreditNotesApi - object-oriented interface
 * @export
 * @class SalesCreditNotesApi
 * @extends {BaseAPI}
 */
export class SalesCreditNotesApi extends BaseAPI {
    /**
     * Update an existing credit note. The credit note cannot be updated if booked. Note that the put request per rest standard will update the entire credit note and not only the fields you send.
     * @summary Update credit note
     * @param {SalesCreditNotesApiV12OrganizationIdSalesCreditnotesGuidPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesCreditNotesApi
     */
    public v12OrganizationIdSalesCreditnotesGuidPut(requestParameters: SalesCreditNotesApiV12OrganizationIdSalesCreditnotesGuidPutRequest, options?: RawAxiosRequestConfig) {
        return SalesCreditNotesApiFp(this.configuration).v12OrganizationIdSalesCreditnotesGuidPut(requestParameters.guid, requestParameters.organizationId, requestParameters.salesCreditNoteUpdateModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch a credit note to get total and line sums calculations.
     * @summary Get credit note totals
     * @param {SalesCreditNotesApiV1OrganizationIdSalesCreditnotesFetchPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesCreditNotesApi
     */
    public v1OrganizationIdSalesCreditnotesFetchPost(requestParameters: SalesCreditNotesApiV1OrganizationIdSalesCreditnotesFetchPostRequest, options?: RawAxiosRequestConfig) {
        return SalesCreditNotesApiFp(this.configuration).v1OrganizationIdSalesCreditnotesFetchPost(requestParameters.organizationId, requestParameters.salesCreditNoteCreateFetchModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of credit notes for the organization. This can return quite a long list of credit notes, consider using the changesSince filter to only return credit notes that have been changed since the last time you fetched the list.
     * @summary List credit notes
     * @param {SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesCreditNotesApi
     */
    public v1OrganizationIdSalesCreditnotesGet(requestParameters: SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGetRequest, options?: RawAxiosRequestConfig) {
        return SalesCreditNotesApiFp(this.configuration).v1OrganizationIdSalesCreditnotesGet(requestParameters.organizationId, requestParameters.startDate, requestParameters.endDate, requestParameters.fields, requestParameters.freeTextSearch, requestParameters.statusFilter, requestParameters.queryFilter, requestParameters.changesSince, requestParameters.deletedOnly, requestParameters.page, requestParameters.pageSize, requestParameters.sort, requestParameters.sortOrder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Book credit note. Booking means actually posting the credit note to the accounts. A booked credit note can also be sent via email, sms or as an e-credit note.
     * @summary Book credit note
     * @param {SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidBookPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesCreditNotesApi
     */
    public v1OrganizationIdSalesCreditnotesGuidBookPost(requestParameters: SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidBookPostRequest, options?: RawAxiosRequestConfig) {
        return SalesCreditNotesApiFp(this.configuration).v1OrganizationIdSalesCreditnotesGuidBookPost(requestParameters.guid, requestParameters.organizationId, requestParameters.bookModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete credit note. The credit note should not be deleted if booked. In that case a new invoice would be the correct way to cancel the credit note.
     * @summary Delete credit note
     * @param {SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesCreditNotesApi
     */
    public v1OrganizationIdSalesCreditnotesGuidDelete(requestParameters: SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidDeleteRequest, options?: RawAxiosRequestConfig) {
        return SalesCreditNotesApiFp(this.configuration).v1OrganizationIdSalesCreditnotesGuidDelete(requestParameters.guid, requestParameters.organizationId, requestParameters.timestampObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Send an e-credit note to an EAN customer. This is a public system for electronic invoicing.
     * @summary Send credit note with EAN
     * @param {SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidECreditNotePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesCreditNotesApi
     */
    public v1OrganizationIdSalesCreditnotesGuidECreditNotePost(requestParameters: SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidECreditNotePostRequest, options?: RawAxiosRequestConfig) {
        return SalesCreditNotesApiFp(this.configuration).v1OrganizationIdSalesCreditnotesGuidECreditNotePost(requestParameters.guid, requestParameters.organizationId, requestParameters.eanSendModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Send an email with link to a public version of the credit note where it can be printed or downloaded as a pdf. The credit note must be booked.
     * @summary Send credit note
     * @param {SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidEmailPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesCreditNotesApi
     */
    public v1OrganizationIdSalesCreditnotesGuidEmailPost(requestParameters: SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidEmailPostRequest, options?: RawAxiosRequestConfig) {
        return SalesCreditNotesApiFp(this.configuration).v1OrganizationIdSalesCreditnotesGuidEmailPost(requestParameters.guid, requestParameters.organizationId, requestParameters.apiMailoutModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the email template for a credit note. This can be used to preview what will be sent out on the email. These standards can be overwritten during the sending phase.
     * @summary Get credit note email template
     * @param {SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidEmailTemplateGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesCreditNotesApi
     */
    public v1OrganizationIdSalesCreditnotesGuidEmailTemplateGet(requestParameters: SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidEmailTemplateGetRequest, options?: RawAxiosRequestConfig) {
        return SalesCreditNotesApiFp(this.configuration).v1OrganizationIdSalesCreditnotesGuidEmailTemplateGet(requestParameters.guid, requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get credit note as json or pdf. Define the Accept header of your request to either \'application/json\' or \'application/octet-stream\'. PDF\'s can only be generated from booked credit notes.
     * @summary Get credit note
     * @param {SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesCreditNotesApi
     */
    public v1OrganizationIdSalesCreditnotesGuidGet(requestParameters: SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidGetRequest, options?: RawAxiosRequestConfig) {
        return SalesCreditNotesApiFp(this.configuration).v1OrganizationIdSalesCreditnotesGuidGet(requestParameters.guid, requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the mailouts for a specific credit note
     * @summary List mailouts
     * @param {SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidMailoutsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesCreditNotesApi
     */
    public v1OrganizationIdSalesCreditnotesGuidMailoutsGet(requestParameters: SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidMailoutsGetRequest, options?: RawAxiosRequestConfig) {
        return SalesCreditNotesApiFp(this.configuration).v1OrganizationIdSalesCreditnotesGuidMailoutsGet(requestParameters.guid, requestParameters.organizationId, requestParameters.changesSince, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the payments for an creditnote
     * @summary Get payments for creditnote
     * @param {SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidPaymentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesCreditNotesApi
     */
    public v1OrganizationIdSalesCreditnotesGuidPaymentsGet(requestParameters: SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidPaymentsGetRequest, options?: RawAxiosRequestConfig) {
        return SalesCreditNotesApiFp(this.configuration).v1OrganizationIdSalesCreditnotesGuidPaymentsGet(requestParameters.guid, requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a payment from an creditnote. Only booked creditnote can have payments.
     * @summary Delete payment from creditnote
     * @param {SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidPaymentsPaymentGuidDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesCreditNotesApi
     */
    public v1OrganizationIdSalesCreditnotesGuidPaymentsPaymentGuidDelete(requestParameters: SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidPaymentsPaymentGuidDeleteRequest, options?: RawAxiosRequestConfig) {
        return SalesCreditNotesApiFp(this.configuration).v1OrganizationIdSalesCreditnotesGuidPaymentsPaymentGuidDelete(requestParameters.guid, requestParameters.paymentGuid, requestParameters.organizationId, requestParameters.timestampObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a payment for an creditnote. Payments can only be added to a booked creditnote.
     * @summary Add payment to creditnote
     * @param {SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidPaymentsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesCreditNotesApi
     */
    public v1OrganizationIdSalesCreditnotesGuidPaymentsPost(requestParameters: SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidPaymentsPostRequest, options?: RawAxiosRequestConfig) {
        return SalesCreditNotesApiFp(this.configuration).v1OrganizationIdSalesCreditnotesGuidPaymentsPost(requestParameters.guid, requestParameters.organizationId, requestParameters.paymentCreateModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a creditnote as PDF
     * @summary Get credit note as pdf
     * @param {SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidPdfGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesCreditNotesApi
     */
    public v1OrganizationIdSalesCreditnotesGuidPdfGet(requestParameters: SalesCreditNotesApiV1OrganizationIdSalesCreditnotesGuidPdfGetRequest, options?: RawAxiosRequestConfig) {
        return SalesCreditNotesApiFp(this.configuration).v1OrganizationIdSalesCreditnotesGuidPdfGet(requestParameters.guid, requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new draft credit note in Dinero. This credit note can be found in the \"Salg\" section of Dinero. A draft credit note will not count in the accounts untill booked.  Think about using the book and send endpoints after the draft has been created to further automate the booking process for the user. Also note that the date on the credit note, should always be the date the credit note is sent to the customer.
     * @summary Create credit note
     * @param {SalesCreditNotesApiV1OrganizationIdSalesCreditnotesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SalesCreditNotesApi
     */
    public v1OrganizationIdSalesCreditnotesPost(requestParameters: SalesCreditNotesApiV1OrganizationIdSalesCreditnotesPostRequest, options?: RawAxiosRequestConfig) {
        return SalesCreditNotesApiFp(this.configuration).v1OrganizationIdSalesCreditnotesPost(requestParameters.organizationId, requestParameters.salesCreditNoteCreateModel, options).then((request) => request(this.axios, this.basePath));
    }
}


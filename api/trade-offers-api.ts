/* tslint:disable */
/* eslint-disable */
/**
 * Dinero API
 * Welcome to our endpoint documentation. Please try to carefully read our general documentation found on <a href=\"https://developer.dinero.dk/\">developer.dinero.dk</a> for information regarding the authorization proces, status and errorcodes, FAQ, Postman tutorial etc. <br><br>Once authorized, you simply add \'Authorization: Bearer <access-token>\' to the header of your requests. On the page below, you\'ll find all our endpoints documented as well as possible, but if you have any questions regarding an endpoint, or an error in the description, please contact us on <a href=\"mailto:api@dinero.dk\">api@dinero.dk.</a> 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ApiMailoutModel } from '../model';
// @ts-ignore
import type { CreatedResponseModel } from '../model';
// @ts-ignore
import type { EmailSentModel } from '../model';
// @ts-ignore
import type { MailoutTemplateReadModel } from '../model';
// @ts-ignore
import type { TimestampObject } from '../model';
// @ts-ignore
import type { TradeOfferCreateFetchModel } from '../model';
// @ts-ignore
import type { TradeOfferCreateModel } from '../model';
// @ts-ignore
import type { TradeOfferFetchReadModel } from '../model';
// @ts-ignore
import type { TradeOfferReadModel } from '../model';
// @ts-ignore
import type { TradeOfferReadModelDineroCollection } from '../model';
// @ts-ignore
import type { TradeOfferUpdateModel } from '../model';
// @ts-ignore
import type { UpdatedResponseModel } from '../model';
// @ts-ignore
import type { VoucherMailoutReadModel } from '../model';
/**
 * TradeOffersApi - axios parameter creator
 * @export
 */
export const TradeOffersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Update an existing trade offer. Due to danish legislation, you should not update an already accepted or rejected trade offer, instead you should create a new one.
         * @summary Update trade offer
         * @param {string} guid Unique identifier for the trade offer information
         * @param {string} organizationId 
         * @param {TradeOfferUpdateModel} [tradeOfferUpdateModel] Content of the trade offer to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v12OrganizationIdTradeoffersGuidPut: async (guid: string, organizationId: string, tradeOfferUpdateModel?: TradeOfferUpdateModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('v12OrganizationIdTradeoffersGuidPut', 'guid', guid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v12OrganizationIdTradeoffersGuidPut', 'organizationId', organizationId)
            const localVarPath = `/v1.2/{organizationId}/tradeoffers/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tradeOfferUpdateModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a trade offer to get total and line sums.
         * @summary Get trade offer totals
         * @param {string} organizationId 
         * @param {TradeOfferCreateFetchModel} [tradeOfferCreateFetchModel] Model of the trade offer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdTradeoffersFetchPost: async (organizationId: string, tradeOfferCreateFetchModel?: TradeOfferCreateFetchModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdTradeoffersFetchPost', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/tradeoffers/fetch`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tradeOfferCreateFetchModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of trade offers for the organization. This can be used as an overview or to get the id of a specific trade offer.
         * @summary List trade offers
         * @param {string} organizationId 
         * @param {string} [fields] A comma separated list of fields to include in the response.              Possible values are:              Number, Guid, TimeStamp, ContactName, ContactGuid, Address, Date, Comment, Description, ExternalReference, Language, Currency,              TotalExclVat, TotalVatableAmount, TotalInclVat, TotalNonVatableAmount, TotalVat, HasGeneratedAnyVouchers, Status, MailOutStatus, LatestMailOutType              CreatedAt, UpdatedAt and DeletedAt. If left empty it defaults to guid, contactName, date, description,  Note that ProductLines and TotalLines are NOT available when fetching a list.               Notice that it\&#39;s not case sensitive, the property name will be returned the way you request it. If null, defaults to \&#39;guid,contactName,date,description\&#39; (notice small start letter).
         * @param {string} [queryFilter] Filter specific for trade offers. Filtering can be applied to following fields:              ExternalReference, ContactName, Address, Comment, Description, HasGeneratedAnyVouchers, Currency, Date and Number.              See API documentation for filtering format.              If left empty no filtering is applied.
         * @param {string} [changesSince] [Generic Filter Option] Only return trade offers that was created, deleted or updated at or after given time.              If left empty, this filter will not be applied, and trade offers will be returned regardless of change history.              The time must be UTC and in the format \&#39;YYYY-MM-DDTHH:mm:ssZ\&#39; example: \&#39;2015-08-18T06:36:22Z\&#39;.
         * @param {boolean} [deletedOnly] [Generic Filter Option] Only select deleted trade offers. If left empty, will defaults to false.
         * @param {string} [freeTextSearch] A free text search performed on Number, ContactName, Description and TotalInclTax
         * @param {number} [page] The 0-based page number
         * @param {number} [pageSize] The maximum number of items to include in a page. Maximum 1000.
         * @param {string} [sort] A comma separated list of fields to sort on. Possible values are: TradeOfferNumber, TradeOfferDate, Status and ContactName.
         * @param {string} [sortOrder] Valid values are ascending or descending.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdTradeoffersGet: async (organizationId: string, fields?: string, queryFilter?: string, changesSince?: string, deletedOnly?: boolean, freeTextSearch?: string, page?: number, pageSize?: number, sort?: string, sortOrder?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdTradeoffersGet', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/tradeoffers`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (queryFilter !== undefined) {
                localVarQueryParameter['queryFilter'] = queryFilter;
            }

            if (changesSince !== undefined) {
                localVarQueryParameter['changesSince'] = changesSince;
            }

            if (deletedOnly !== undefined) {
                localVarQueryParameter['deletedOnly'] = deletedOnly;
            }

            if (freeTextSearch !== undefined) {
                localVarQueryParameter['freeTextSearch'] = freeTextSearch;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete trade offer. Please note that already accepted trade offers should not be deleted, as these are binding as per danish legislation.
         * @summary Delete trade offer
         * @param {string} guid Unique identifier for the trade offer
         * @param {string} organizationId 
         * @param {TimestampObject} [timestampObject] optional timestamp to verify version before deletion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdTradeoffersGuidDelete: async (guid: string, organizationId: string, timestampObject?: TimestampObject, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('v1OrganizationIdTradeoffersGuidDelete', 'guid', guid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdTradeoffersGuidDelete', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/tradeoffers/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(timestampObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends the trade offer as an email with a link to a public version of the reminder. Here the default message, receivers etc. can be overwritten. If you want the user to preview these options, use the Get reminder email template endpoint.
         * @summary Send trade offer email
         * @param {string} guid Guid of the tradeoffer to send
         * @param {string} organizationId 
         * @param {ApiMailoutModel} [apiMailoutModel] Model of the email to send
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdTradeoffersGuidEmailPost: async (guid: string, organizationId: string, apiMailoutModel?: ApiMailoutModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('v1OrganizationIdTradeoffersGuidEmailPost', 'guid', guid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdTradeoffersGuidEmailPost', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/tradeoffers/{guid}/email`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiMailoutModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the email template for a trade offer. This can be used to preview what will be sent out on the email. These standards can be overwritten during the sending phase.
         * @summary Get trade offer email template
         * @param {string} guid Guid of the trade offer to send
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdTradeoffersGuidEmailTemplateGet: async (guid: string, organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('v1OrganizationIdTradeoffersGuidEmailTemplateGet', 'guid', guid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdTradeoffersGuidEmailTemplateGet', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/tradeoffers/{guid}/email/template`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate an invoice draft of a given trade offer. (OBS Generating a invoice of the trade offer, will trigger a new timestamp on the trade offer). Also do note that the invoice must be booked to have any effect on the books, and be able to be sent.
         * @summary Create invoice from trade offer
         * @param {string} guid Guid of the trade offer
         * @param {string} organizationId 
         * @param {TimestampObject} [timestampObject] Optional timestamp. If given validate that you got the latest version.              This can be used to ensure that the trade offer has not been changed since you last fetched it.              Defaults to latest version of the TradeOffer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdTradeoffersGuidGenerateInvoicePost: async (guid: string, organizationId: string, timestampObject?: TimestampObject, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('v1OrganizationIdTradeoffersGuidGenerateInvoicePost', 'guid', guid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdTradeoffersGuidGenerateInvoicePost', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/tradeoffers/{guid}/generate-invoice`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(timestampObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get tradeoffer as json or pdf.  Define the Accept header of your request to either \'application/json\' or \'application/octet-stream\'.
         * @summary Get trade offer as json or pdf
         * @param {string} guid Guid of the tradeoffer
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdTradeoffersGuidGet: async (guid: string, organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('v1OrganizationIdTradeoffersGuidGet', 'guid', guid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdTradeoffersGuidGet', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/tradeoffers/{guid}`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the mailouts for a specific trade offer.
         * @summary List mailouts
         * @param {string} guid 
         * @param {string} organizationId 
         * @param {string} [changesSince] [Generic Filter Option] Only return mailouts that was created or updated after a given time.              If left empty, this filter will not be applied, and mailouts will be returned regardless of change history.              The time must be UTC and in the format \&#39;YYYY-MM-DDTHH:mm:ssZ\&#39; example:\&#39;2015-08-18T06:36:22Z\&#39;.
         * @param {boolean} [includeSms] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdTradeoffersGuidMailoutsGet: async (guid: string, organizationId: string, changesSince?: string, includeSms?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guid' is not null or undefined
            assertParamExists('v1OrganizationIdTradeoffersGuidMailoutsGet', 'guid', guid)
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdTradeoffersGuidMailoutsGet', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/tradeoffers/{guid}/mailouts`
                .replace(`{${"guid"}}`, encodeURIComponent(String(guid)))
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (changesSince !== undefined) {
                localVarQueryParameter['changesSince'] = changesSince;
            }

            if (includeSms !== undefined) {
                localVarQueryParameter['includeSms'] = includeSms;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a draft of a trade offer(tilbud). The trade offer will not have any effect on bookkeeping, and as such cannot be booked like other voucher types. The trade offer is binding under danish law though, so make sure you fill it out with the correct information.
         * @summary Create trade offer
         * @param {string} organizationId 
         * @param {TradeOfferCreateModel} [tradeOfferCreateModel] Model of the trade offer to save.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdTradeoffersPost: async (organizationId: string, tradeOfferCreateModel?: TradeOfferCreateModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdTradeoffersPost', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/tradeoffers`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tradeOfferCreateModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TradeOffersApi - functional programming interface
 * @export
 */
export const TradeOffersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TradeOffersApiAxiosParamCreator(configuration)
    return {
        /**
         * Update an existing trade offer. Due to danish legislation, you should not update an already accepted or rejected trade offer, instead you should create a new one.
         * @summary Update trade offer
         * @param {string} guid Unique identifier for the trade offer information
         * @param {string} organizationId 
         * @param {TradeOfferUpdateModel} [tradeOfferUpdateModel] Content of the trade offer to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v12OrganizationIdTradeoffersGuidPut(guid: string, organizationId: string, tradeOfferUpdateModel?: TradeOfferUpdateModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdatedResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v12OrganizationIdTradeoffersGuidPut(guid, organizationId, tradeOfferUpdateModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeOffersApi.v12OrganizationIdTradeoffersGuidPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch a trade offer to get total and line sums.
         * @summary Get trade offer totals
         * @param {string} organizationId 
         * @param {TradeOfferCreateFetchModel} [tradeOfferCreateFetchModel] Model of the trade offer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdTradeoffersFetchPost(organizationId: string, tradeOfferCreateFetchModel?: TradeOfferCreateFetchModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TradeOfferFetchReadModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdTradeoffersFetchPost(organizationId, tradeOfferCreateFetchModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeOffersApi.v1OrganizationIdTradeoffersFetchPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a list of trade offers for the organization. This can be used as an overview or to get the id of a specific trade offer.
         * @summary List trade offers
         * @param {string} organizationId 
         * @param {string} [fields] A comma separated list of fields to include in the response.              Possible values are:              Number, Guid, TimeStamp, ContactName, ContactGuid, Address, Date, Comment, Description, ExternalReference, Language, Currency,              TotalExclVat, TotalVatableAmount, TotalInclVat, TotalNonVatableAmount, TotalVat, HasGeneratedAnyVouchers, Status, MailOutStatus, LatestMailOutType              CreatedAt, UpdatedAt and DeletedAt. If left empty it defaults to guid, contactName, date, description,  Note that ProductLines and TotalLines are NOT available when fetching a list.               Notice that it\&#39;s not case sensitive, the property name will be returned the way you request it. If null, defaults to \&#39;guid,contactName,date,description\&#39; (notice small start letter).
         * @param {string} [queryFilter] Filter specific for trade offers. Filtering can be applied to following fields:              ExternalReference, ContactName, Address, Comment, Description, HasGeneratedAnyVouchers, Currency, Date and Number.              See API documentation for filtering format.              If left empty no filtering is applied.
         * @param {string} [changesSince] [Generic Filter Option] Only return trade offers that was created, deleted or updated at or after given time.              If left empty, this filter will not be applied, and trade offers will be returned regardless of change history.              The time must be UTC and in the format \&#39;YYYY-MM-DDTHH:mm:ssZ\&#39; example: \&#39;2015-08-18T06:36:22Z\&#39;.
         * @param {boolean} [deletedOnly] [Generic Filter Option] Only select deleted trade offers. If left empty, will defaults to false.
         * @param {string} [freeTextSearch] A free text search performed on Number, ContactName, Description and TotalInclTax
         * @param {number} [page] The 0-based page number
         * @param {number} [pageSize] The maximum number of items to include in a page. Maximum 1000.
         * @param {string} [sort] A comma separated list of fields to sort on. Possible values are: TradeOfferNumber, TradeOfferDate, Status and ContactName.
         * @param {string} [sortOrder] Valid values are ascending or descending.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdTradeoffersGet(organizationId: string, fields?: string, queryFilter?: string, changesSince?: string, deletedOnly?: boolean, freeTextSearch?: string, page?: number, pageSize?: number, sort?: string, sortOrder?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TradeOfferReadModelDineroCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdTradeoffersGet(organizationId, fields, queryFilter, changesSince, deletedOnly, freeTextSearch, page, pageSize, sort, sortOrder, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeOffersApi.v1OrganizationIdTradeoffersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete trade offer. Please note that already accepted trade offers should not be deleted, as these are binding as per danish legislation.
         * @summary Delete trade offer
         * @param {string} guid Unique identifier for the trade offer
         * @param {string} organizationId 
         * @param {TimestampObject} [timestampObject] optional timestamp to verify version before deletion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdTradeoffersGuidDelete(guid: string, organizationId: string, timestampObject?: TimestampObject, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdTradeoffersGuidDelete(guid, organizationId, timestampObject, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeOffersApi.v1OrganizationIdTradeoffersGuidDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Sends the trade offer as an email with a link to a public version of the reminder. Here the default message, receivers etc. can be overwritten. If you want the user to preview these options, use the Get reminder email template endpoint.
         * @summary Send trade offer email
         * @param {string} guid Guid of the tradeoffer to send
         * @param {string} organizationId 
         * @param {ApiMailoutModel} [apiMailoutModel] Model of the email to send
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdTradeoffersGuidEmailPost(guid: string, organizationId: string, apiMailoutModel?: ApiMailoutModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailSentModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdTradeoffersGuidEmailPost(guid, organizationId, apiMailoutModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeOffersApi.v1OrganizationIdTradeoffersGuidEmailPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Gets the email template for a trade offer. This can be used to preview what will be sent out on the email. These standards can be overwritten during the sending phase.
         * @summary Get trade offer email template
         * @param {string} guid Guid of the trade offer to send
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdTradeoffersGuidEmailTemplateGet(guid: string, organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MailoutTemplateReadModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdTradeoffersGuidEmailTemplateGet(guid, organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeOffersApi.v1OrganizationIdTradeoffersGuidEmailTemplateGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Generate an invoice draft of a given trade offer. (OBS Generating a invoice of the trade offer, will trigger a new timestamp on the trade offer). Also do note that the invoice must be booked to have any effect on the books, and be able to be sent.
         * @summary Create invoice from trade offer
         * @param {string} guid Guid of the trade offer
         * @param {string} organizationId 
         * @param {TimestampObject} [timestampObject] Optional timestamp. If given validate that you got the latest version.              This can be used to ensure that the trade offer has not been changed since you last fetched it.              Defaults to latest version of the TradeOffer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdTradeoffersGuidGenerateInvoicePost(guid: string, organizationId: string, timestampObject?: TimestampObject, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatedResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdTradeoffersGuidGenerateInvoicePost(guid, organizationId, timestampObject, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeOffersApi.v1OrganizationIdTradeoffersGuidGenerateInvoicePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get tradeoffer as json or pdf.  Define the Accept header of your request to either \'application/json\' or \'application/octet-stream\'.
         * @summary Get trade offer as json or pdf
         * @param {string} guid Guid of the tradeoffer
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdTradeoffersGuidGet(guid: string, organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TradeOfferReadModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdTradeoffersGuidGet(guid, organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeOffersApi.v1OrganizationIdTradeoffersGuidGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List the mailouts for a specific trade offer.
         * @summary List mailouts
         * @param {string} guid 
         * @param {string} organizationId 
         * @param {string} [changesSince] [Generic Filter Option] Only return mailouts that was created or updated after a given time.              If left empty, this filter will not be applied, and mailouts will be returned regardless of change history.              The time must be UTC and in the format \&#39;YYYY-MM-DDTHH:mm:ssZ\&#39; example:\&#39;2015-08-18T06:36:22Z\&#39;.
         * @param {boolean} [includeSms] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdTradeoffersGuidMailoutsGet(guid: string, organizationId: string, changesSince?: string, includeSms?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VoucherMailoutReadModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdTradeoffersGuidMailoutsGet(guid, organizationId, changesSince, includeSms, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeOffersApi.v1OrganizationIdTradeoffersGuidMailoutsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a draft of a trade offer(tilbud). The trade offer will not have any effect on bookkeeping, and as such cannot be booked like other voucher types. The trade offer is binding under danish law though, so make sure you fill it out with the correct information.
         * @summary Create trade offer
         * @param {string} organizationId 
         * @param {TradeOfferCreateModel} [tradeOfferCreateModel] Model of the trade offer to save.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdTradeoffersPost(organizationId: string, tradeOfferCreateModel?: TradeOfferCreateModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatedResponseModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdTradeoffersPost(organizationId, tradeOfferCreateModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TradeOffersApi.v1OrganizationIdTradeoffersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TradeOffersApi - factory interface
 * @export
 */
export const TradeOffersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TradeOffersApiFp(configuration)
    return {
        /**
         * Update an existing trade offer. Due to danish legislation, you should not update an already accepted or rejected trade offer, instead you should create a new one.
         * @summary Update trade offer
         * @param {TradeOffersApiV12OrganizationIdTradeoffersGuidPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v12OrganizationIdTradeoffersGuidPut(requestParameters: TradeOffersApiV12OrganizationIdTradeoffersGuidPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<UpdatedResponseModel> {
            return localVarFp.v12OrganizationIdTradeoffersGuidPut(requestParameters.guid, requestParameters.organizationId, requestParameters.tradeOfferUpdateModel, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a trade offer to get total and line sums.
         * @summary Get trade offer totals
         * @param {TradeOffersApiV1OrganizationIdTradeoffersFetchPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdTradeoffersFetchPost(requestParameters: TradeOffersApiV1OrganizationIdTradeoffersFetchPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<TradeOfferFetchReadModel> {
            return localVarFp.v1OrganizationIdTradeoffersFetchPost(requestParameters.organizationId, requestParameters.tradeOfferCreateFetchModel, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of trade offers for the organization. This can be used as an overview or to get the id of a specific trade offer.
         * @summary List trade offers
         * @param {TradeOffersApiV1OrganizationIdTradeoffersGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdTradeoffersGet(requestParameters: TradeOffersApiV1OrganizationIdTradeoffersGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<TradeOfferReadModelDineroCollection> {
            return localVarFp.v1OrganizationIdTradeoffersGet(requestParameters.organizationId, requestParameters.fields, requestParameters.queryFilter, requestParameters.changesSince, requestParameters.deletedOnly, requestParameters.freeTextSearch, requestParameters.page, requestParameters.pageSize, requestParameters.sort, requestParameters.sortOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete trade offer. Please note that already accepted trade offers should not be deleted, as these are binding as per danish legislation.
         * @summary Delete trade offer
         * @param {TradeOffersApiV1OrganizationIdTradeoffersGuidDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdTradeoffersGuidDelete(requestParameters: TradeOffersApiV1OrganizationIdTradeoffersGuidDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1OrganizationIdTradeoffersGuidDelete(requestParameters.guid, requestParameters.organizationId, requestParameters.timestampObject, options).then((request) => request(axios, basePath));
        },
        /**
         * Sends the trade offer as an email with a link to a public version of the reminder. Here the default message, receivers etc. can be overwritten. If you want the user to preview these options, use the Get reminder email template endpoint.
         * @summary Send trade offer email
         * @param {TradeOffersApiV1OrganizationIdTradeoffersGuidEmailPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdTradeoffersGuidEmailPost(requestParameters: TradeOffersApiV1OrganizationIdTradeoffersGuidEmailPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmailSentModel> {
            return localVarFp.v1OrganizationIdTradeoffersGuidEmailPost(requestParameters.guid, requestParameters.organizationId, requestParameters.apiMailoutModel, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the email template for a trade offer. This can be used to preview what will be sent out on the email. These standards can be overwritten during the sending phase.
         * @summary Get trade offer email template
         * @param {TradeOffersApiV1OrganizationIdTradeoffersGuidEmailTemplateGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdTradeoffersGuidEmailTemplateGet(requestParameters: TradeOffersApiV1OrganizationIdTradeoffersGuidEmailTemplateGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<MailoutTemplateReadModel> {
            return localVarFp.v1OrganizationIdTradeoffersGuidEmailTemplateGet(requestParameters.guid, requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Generate an invoice draft of a given trade offer. (OBS Generating a invoice of the trade offer, will trigger a new timestamp on the trade offer). Also do note that the invoice must be booked to have any effect on the books, and be able to be sent.
         * @summary Create invoice from trade offer
         * @param {TradeOffersApiV1OrganizationIdTradeoffersGuidGenerateInvoicePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdTradeoffersGuidGenerateInvoicePost(requestParameters: TradeOffersApiV1OrganizationIdTradeoffersGuidGenerateInvoicePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreatedResponseModel> {
            return localVarFp.v1OrganizationIdTradeoffersGuidGenerateInvoicePost(requestParameters.guid, requestParameters.organizationId, requestParameters.timestampObject, options).then((request) => request(axios, basePath));
        },
        /**
         * Get tradeoffer as json or pdf.  Define the Accept header of your request to either \'application/json\' or \'application/octet-stream\'.
         * @summary Get trade offer as json or pdf
         * @param {TradeOffersApiV1OrganizationIdTradeoffersGuidGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdTradeoffersGuidGet(requestParameters: TradeOffersApiV1OrganizationIdTradeoffersGuidGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<TradeOfferReadModel> {
            return localVarFp.v1OrganizationIdTradeoffersGuidGet(requestParameters.guid, requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * List the mailouts for a specific trade offer.
         * @summary List mailouts
         * @param {TradeOffersApiV1OrganizationIdTradeoffersGuidMailoutsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdTradeoffersGuidMailoutsGet(requestParameters: TradeOffersApiV1OrganizationIdTradeoffersGuidMailoutsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<VoucherMailoutReadModel> {
            return localVarFp.v1OrganizationIdTradeoffersGuidMailoutsGet(requestParameters.guid, requestParameters.organizationId, requestParameters.changesSince, requestParameters.includeSms, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a draft of a trade offer(tilbud). The trade offer will not have any effect on bookkeeping, and as such cannot be booked like other voucher types. The trade offer is binding under danish law though, so make sure you fill it out with the correct information.
         * @summary Create trade offer
         * @param {TradeOffersApiV1OrganizationIdTradeoffersPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdTradeoffersPost(requestParameters: TradeOffersApiV1OrganizationIdTradeoffersPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreatedResponseModel> {
            return localVarFp.v1OrganizationIdTradeoffersPost(requestParameters.organizationId, requestParameters.tradeOfferCreateModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for v12OrganizationIdTradeoffersGuidPut operation in TradeOffersApi.
 * @export
 * @interface TradeOffersApiV12OrganizationIdTradeoffersGuidPutRequest
 */
export interface TradeOffersApiV12OrganizationIdTradeoffersGuidPutRequest {
    /**
     * Unique identifier for the trade offer information
     * @type {string}
     * @memberof TradeOffersApiV12OrganizationIdTradeoffersGuidPut
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof TradeOffersApiV12OrganizationIdTradeoffersGuidPut
     */
    readonly organizationId: string

    /**
     * Content of the trade offer to update
     * @type {TradeOfferUpdateModel}
     * @memberof TradeOffersApiV12OrganizationIdTradeoffersGuidPut
     */
    readonly tradeOfferUpdateModel?: TradeOfferUpdateModel
}

/**
 * Request parameters for v1OrganizationIdTradeoffersFetchPost operation in TradeOffersApi.
 * @export
 * @interface TradeOffersApiV1OrganizationIdTradeoffersFetchPostRequest
 */
export interface TradeOffersApiV1OrganizationIdTradeoffersFetchPostRequest {
    /**
     * 
     * @type {string}
     * @memberof TradeOffersApiV1OrganizationIdTradeoffersFetchPost
     */
    readonly organizationId: string

    /**
     * Model of the trade offer.
     * @type {TradeOfferCreateFetchModel}
     * @memberof TradeOffersApiV1OrganizationIdTradeoffersFetchPost
     */
    readonly tradeOfferCreateFetchModel?: TradeOfferCreateFetchModel
}

/**
 * Request parameters for v1OrganizationIdTradeoffersGet operation in TradeOffersApi.
 * @export
 * @interface TradeOffersApiV1OrganizationIdTradeoffersGetRequest
 */
export interface TradeOffersApiV1OrganizationIdTradeoffersGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TradeOffersApiV1OrganizationIdTradeoffersGet
     */
    readonly organizationId: string

    /**
     * A comma separated list of fields to include in the response.              Possible values are:              Number, Guid, TimeStamp, ContactName, ContactGuid, Address, Date, Comment, Description, ExternalReference, Language, Currency,              TotalExclVat, TotalVatableAmount, TotalInclVat, TotalNonVatableAmount, TotalVat, HasGeneratedAnyVouchers, Status, MailOutStatus, LatestMailOutType              CreatedAt, UpdatedAt and DeletedAt. If left empty it defaults to guid, contactName, date, description,  Note that ProductLines and TotalLines are NOT available when fetching a list.               Notice that it\&#39;s not case sensitive, the property name will be returned the way you request it. If null, defaults to \&#39;guid,contactName,date,description\&#39; (notice small start letter).
     * @type {string}
     * @memberof TradeOffersApiV1OrganizationIdTradeoffersGet
     */
    readonly fields?: string

    /**
     * Filter specific for trade offers. Filtering can be applied to following fields:              ExternalReference, ContactName, Address, Comment, Description, HasGeneratedAnyVouchers, Currency, Date and Number.              See API documentation for filtering format.              If left empty no filtering is applied.
     * @type {string}
     * @memberof TradeOffersApiV1OrganizationIdTradeoffersGet
     */
    readonly queryFilter?: string

    /**
     * [Generic Filter Option] Only return trade offers that was created, deleted or updated at or after given time.              If left empty, this filter will not be applied, and trade offers will be returned regardless of change history.              The time must be UTC and in the format \&#39;YYYY-MM-DDTHH:mm:ssZ\&#39; example: \&#39;2015-08-18T06:36:22Z\&#39;.
     * @type {string}
     * @memberof TradeOffersApiV1OrganizationIdTradeoffersGet
     */
    readonly changesSince?: string

    /**
     * [Generic Filter Option] Only select deleted trade offers. If left empty, will defaults to false.
     * @type {boolean}
     * @memberof TradeOffersApiV1OrganizationIdTradeoffersGet
     */
    readonly deletedOnly?: boolean

    /**
     * A free text search performed on Number, ContactName, Description and TotalInclTax
     * @type {string}
     * @memberof TradeOffersApiV1OrganizationIdTradeoffersGet
     */
    readonly freeTextSearch?: string

    /**
     * The 0-based page number
     * @type {number}
     * @memberof TradeOffersApiV1OrganizationIdTradeoffersGet
     */
    readonly page?: number

    /**
     * The maximum number of items to include in a page. Maximum 1000.
     * @type {number}
     * @memberof TradeOffersApiV1OrganizationIdTradeoffersGet
     */
    readonly pageSize?: number

    /**
     * A comma separated list of fields to sort on. Possible values are: TradeOfferNumber, TradeOfferDate, Status and ContactName.
     * @type {string}
     * @memberof TradeOffersApiV1OrganizationIdTradeoffersGet
     */
    readonly sort?: string

    /**
     * Valid values are ascending or descending.
     * @type {string}
     * @memberof TradeOffersApiV1OrganizationIdTradeoffersGet
     */
    readonly sortOrder?: string
}

/**
 * Request parameters for v1OrganizationIdTradeoffersGuidDelete operation in TradeOffersApi.
 * @export
 * @interface TradeOffersApiV1OrganizationIdTradeoffersGuidDeleteRequest
 */
export interface TradeOffersApiV1OrganizationIdTradeoffersGuidDeleteRequest {
    /**
     * Unique identifier for the trade offer
     * @type {string}
     * @memberof TradeOffersApiV1OrganizationIdTradeoffersGuidDelete
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof TradeOffersApiV1OrganizationIdTradeoffersGuidDelete
     */
    readonly organizationId: string

    /**
     * optional timestamp to verify version before deletion
     * @type {TimestampObject}
     * @memberof TradeOffersApiV1OrganizationIdTradeoffersGuidDelete
     */
    readonly timestampObject?: TimestampObject
}

/**
 * Request parameters for v1OrganizationIdTradeoffersGuidEmailPost operation in TradeOffersApi.
 * @export
 * @interface TradeOffersApiV1OrganizationIdTradeoffersGuidEmailPostRequest
 */
export interface TradeOffersApiV1OrganizationIdTradeoffersGuidEmailPostRequest {
    /**
     * Guid of the tradeoffer to send
     * @type {string}
     * @memberof TradeOffersApiV1OrganizationIdTradeoffersGuidEmailPost
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof TradeOffersApiV1OrganizationIdTradeoffersGuidEmailPost
     */
    readonly organizationId: string

    /**
     * Model of the email to send
     * @type {ApiMailoutModel}
     * @memberof TradeOffersApiV1OrganizationIdTradeoffersGuidEmailPost
     */
    readonly apiMailoutModel?: ApiMailoutModel
}

/**
 * Request parameters for v1OrganizationIdTradeoffersGuidEmailTemplateGet operation in TradeOffersApi.
 * @export
 * @interface TradeOffersApiV1OrganizationIdTradeoffersGuidEmailTemplateGetRequest
 */
export interface TradeOffersApiV1OrganizationIdTradeoffersGuidEmailTemplateGetRequest {
    /**
     * Guid of the trade offer to send
     * @type {string}
     * @memberof TradeOffersApiV1OrganizationIdTradeoffersGuidEmailTemplateGet
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof TradeOffersApiV1OrganizationIdTradeoffersGuidEmailTemplateGet
     */
    readonly organizationId: string
}

/**
 * Request parameters for v1OrganizationIdTradeoffersGuidGenerateInvoicePost operation in TradeOffersApi.
 * @export
 * @interface TradeOffersApiV1OrganizationIdTradeoffersGuidGenerateInvoicePostRequest
 */
export interface TradeOffersApiV1OrganizationIdTradeoffersGuidGenerateInvoicePostRequest {
    /**
     * Guid of the trade offer
     * @type {string}
     * @memberof TradeOffersApiV1OrganizationIdTradeoffersGuidGenerateInvoicePost
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof TradeOffersApiV1OrganizationIdTradeoffersGuidGenerateInvoicePost
     */
    readonly organizationId: string

    /**
     * Optional timestamp. If given validate that you got the latest version.              This can be used to ensure that the trade offer has not been changed since you last fetched it.              Defaults to latest version of the TradeOffer.
     * @type {TimestampObject}
     * @memberof TradeOffersApiV1OrganizationIdTradeoffersGuidGenerateInvoicePost
     */
    readonly timestampObject?: TimestampObject
}

/**
 * Request parameters for v1OrganizationIdTradeoffersGuidGet operation in TradeOffersApi.
 * @export
 * @interface TradeOffersApiV1OrganizationIdTradeoffersGuidGetRequest
 */
export interface TradeOffersApiV1OrganizationIdTradeoffersGuidGetRequest {
    /**
     * Guid of the tradeoffer
     * @type {string}
     * @memberof TradeOffersApiV1OrganizationIdTradeoffersGuidGet
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof TradeOffersApiV1OrganizationIdTradeoffersGuidGet
     */
    readonly organizationId: string
}

/**
 * Request parameters for v1OrganizationIdTradeoffersGuidMailoutsGet operation in TradeOffersApi.
 * @export
 * @interface TradeOffersApiV1OrganizationIdTradeoffersGuidMailoutsGetRequest
 */
export interface TradeOffersApiV1OrganizationIdTradeoffersGuidMailoutsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof TradeOffersApiV1OrganizationIdTradeoffersGuidMailoutsGet
     */
    readonly guid: string

    /**
     * 
     * @type {string}
     * @memberof TradeOffersApiV1OrganizationIdTradeoffersGuidMailoutsGet
     */
    readonly organizationId: string

    /**
     * [Generic Filter Option] Only return mailouts that was created or updated after a given time.              If left empty, this filter will not be applied, and mailouts will be returned regardless of change history.              The time must be UTC and in the format \&#39;YYYY-MM-DDTHH:mm:ssZ\&#39; example:\&#39;2015-08-18T06:36:22Z\&#39;.
     * @type {string}
     * @memberof TradeOffersApiV1OrganizationIdTradeoffersGuidMailoutsGet
     */
    readonly changesSince?: string

    /**
     * 
     * @type {boolean}
     * @memberof TradeOffersApiV1OrganizationIdTradeoffersGuidMailoutsGet
     */
    readonly includeSms?: boolean
}

/**
 * Request parameters for v1OrganizationIdTradeoffersPost operation in TradeOffersApi.
 * @export
 * @interface TradeOffersApiV1OrganizationIdTradeoffersPostRequest
 */
export interface TradeOffersApiV1OrganizationIdTradeoffersPostRequest {
    /**
     * 
     * @type {string}
     * @memberof TradeOffersApiV1OrganizationIdTradeoffersPost
     */
    readonly organizationId: string

    /**
     * Model of the trade offer to save.
     * @type {TradeOfferCreateModel}
     * @memberof TradeOffersApiV1OrganizationIdTradeoffersPost
     */
    readonly tradeOfferCreateModel?: TradeOfferCreateModel
}

/**
 * TradeOffersApi - object-oriented interface
 * @export
 * @class TradeOffersApi
 * @extends {BaseAPI}
 */
export class TradeOffersApi extends BaseAPI {
    /**
     * Update an existing trade offer. Due to danish legislation, you should not update an already accepted or rejected trade offer, instead you should create a new one.
     * @summary Update trade offer
     * @param {TradeOffersApiV12OrganizationIdTradeoffersGuidPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeOffersApi
     */
    public v12OrganizationIdTradeoffersGuidPut(requestParameters: TradeOffersApiV12OrganizationIdTradeoffersGuidPutRequest, options?: RawAxiosRequestConfig) {
        return TradeOffersApiFp(this.configuration).v12OrganizationIdTradeoffersGuidPut(requestParameters.guid, requestParameters.organizationId, requestParameters.tradeOfferUpdateModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch a trade offer to get total and line sums.
     * @summary Get trade offer totals
     * @param {TradeOffersApiV1OrganizationIdTradeoffersFetchPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeOffersApi
     */
    public v1OrganizationIdTradeoffersFetchPost(requestParameters: TradeOffersApiV1OrganizationIdTradeoffersFetchPostRequest, options?: RawAxiosRequestConfig) {
        return TradeOffersApiFp(this.configuration).v1OrganizationIdTradeoffersFetchPost(requestParameters.organizationId, requestParameters.tradeOfferCreateFetchModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of trade offers for the organization. This can be used as an overview or to get the id of a specific trade offer.
     * @summary List trade offers
     * @param {TradeOffersApiV1OrganizationIdTradeoffersGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeOffersApi
     */
    public v1OrganizationIdTradeoffersGet(requestParameters: TradeOffersApiV1OrganizationIdTradeoffersGetRequest, options?: RawAxiosRequestConfig) {
        return TradeOffersApiFp(this.configuration).v1OrganizationIdTradeoffersGet(requestParameters.organizationId, requestParameters.fields, requestParameters.queryFilter, requestParameters.changesSince, requestParameters.deletedOnly, requestParameters.freeTextSearch, requestParameters.page, requestParameters.pageSize, requestParameters.sort, requestParameters.sortOrder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete trade offer. Please note that already accepted trade offers should not be deleted, as these are binding as per danish legislation.
     * @summary Delete trade offer
     * @param {TradeOffersApiV1OrganizationIdTradeoffersGuidDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeOffersApi
     */
    public v1OrganizationIdTradeoffersGuidDelete(requestParameters: TradeOffersApiV1OrganizationIdTradeoffersGuidDeleteRequest, options?: RawAxiosRequestConfig) {
        return TradeOffersApiFp(this.configuration).v1OrganizationIdTradeoffersGuidDelete(requestParameters.guid, requestParameters.organizationId, requestParameters.timestampObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sends the trade offer as an email with a link to a public version of the reminder. Here the default message, receivers etc. can be overwritten. If you want the user to preview these options, use the Get reminder email template endpoint.
     * @summary Send trade offer email
     * @param {TradeOffersApiV1OrganizationIdTradeoffersGuidEmailPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeOffersApi
     */
    public v1OrganizationIdTradeoffersGuidEmailPost(requestParameters: TradeOffersApiV1OrganizationIdTradeoffersGuidEmailPostRequest, options?: RawAxiosRequestConfig) {
        return TradeOffersApiFp(this.configuration).v1OrganizationIdTradeoffersGuidEmailPost(requestParameters.guid, requestParameters.organizationId, requestParameters.apiMailoutModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the email template for a trade offer. This can be used to preview what will be sent out on the email. These standards can be overwritten during the sending phase.
     * @summary Get trade offer email template
     * @param {TradeOffersApiV1OrganizationIdTradeoffersGuidEmailTemplateGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeOffersApi
     */
    public v1OrganizationIdTradeoffersGuidEmailTemplateGet(requestParameters: TradeOffersApiV1OrganizationIdTradeoffersGuidEmailTemplateGetRequest, options?: RawAxiosRequestConfig) {
        return TradeOffersApiFp(this.configuration).v1OrganizationIdTradeoffersGuidEmailTemplateGet(requestParameters.guid, requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate an invoice draft of a given trade offer. (OBS Generating a invoice of the trade offer, will trigger a new timestamp on the trade offer). Also do note that the invoice must be booked to have any effect on the books, and be able to be sent.
     * @summary Create invoice from trade offer
     * @param {TradeOffersApiV1OrganizationIdTradeoffersGuidGenerateInvoicePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeOffersApi
     */
    public v1OrganizationIdTradeoffersGuidGenerateInvoicePost(requestParameters: TradeOffersApiV1OrganizationIdTradeoffersGuidGenerateInvoicePostRequest, options?: RawAxiosRequestConfig) {
        return TradeOffersApiFp(this.configuration).v1OrganizationIdTradeoffersGuidGenerateInvoicePost(requestParameters.guid, requestParameters.organizationId, requestParameters.timestampObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get tradeoffer as json or pdf.  Define the Accept header of your request to either \'application/json\' or \'application/octet-stream\'.
     * @summary Get trade offer as json or pdf
     * @param {TradeOffersApiV1OrganizationIdTradeoffersGuidGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeOffersApi
     */
    public v1OrganizationIdTradeoffersGuidGet(requestParameters: TradeOffersApiV1OrganizationIdTradeoffersGuidGetRequest, options?: RawAxiosRequestConfig) {
        return TradeOffersApiFp(this.configuration).v1OrganizationIdTradeoffersGuidGet(requestParameters.guid, requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the mailouts for a specific trade offer.
     * @summary List mailouts
     * @param {TradeOffersApiV1OrganizationIdTradeoffersGuidMailoutsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeOffersApi
     */
    public v1OrganizationIdTradeoffersGuidMailoutsGet(requestParameters: TradeOffersApiV1OrganizationIdTradeoffersGuidMailoutsGetRequest, options?: RawAxiosRequestConfig) {
        return TradeOffersApiFp(this.configuration).v1OrganizationIdTradeoffersGuidMailoutsGet(requestParameters.guid, requestParameters.organizationId, requestParameters.changesSince, requestParameters.includeSms, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a draft of a trade offer(tilbud). The trade offer will not have any effect on bookkeeping, and as such cannot be booked like other voucher types. The trade offer is binding under danish law though, so make sure you fill it out with the correct information.
     * @summary Create trade offer
     * @param {TradeOffersApiV1OrganizationIdTradeoffersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TradeOffersApi
     */
    public v1OrganizationIdTradeoffersPost(requestParameters: TradeOffersApiV1OrganizationIdTradeoffersPostRequest, options?: RawAxiosRequestConfig) {
        return TradeOffersApiFp(this.configuration).v1OrganizationIdTradeoffersPost(requestParameters.organizationId, requestParameters.tradeOfferCreateModel, options).then((request) => request(this.axios, this.basePath));
    }
}


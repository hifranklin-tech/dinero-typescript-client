/* tslint:disable */
/* eslint-disable */
/**
 * Dinero API
 * Welcome to our endpoint documentation. Please try to carefully read our general documentation found on <a href=\"https://developer.dinero.dk/\">developer.dinero.dk</a> for information regarding the authorization proces, status and errorcodes, FAQ, Postman tutorial etc. <br><br>Once authorized, you simply add \'Authorization: Bearer <access-token>\' to the header of your requests. On the page below, you\'ll find all our endpoints documented as well as possible, but if you have any questions regarding an endpoint, or an error in the description, please contact us on <a href=\"mailto:api@dinero.dk\">api@dinero.dk.</a> 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { VatTypeReadModel } from '../model';
/**
 * VatTypesApi - axios parameter creator
 * @export
 */
export const VatTypesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Gets a list of all of the organization\'s VAT types. Most organizations will have the same, although users can create their own partial purchase vats.
         * @summary List vat types
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdVatTypesGet: async (organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdVatTypesGet', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/vatTypes`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VatTypesApi - functional programming interface
 * @export
 */
export const VatTypesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VatTypesApiAxiosParamCreator(configuration)
    return {
        /**
         * Gets a list of all of the organization\'s VAT types. Most organizations will have the same, although users can create their own partial purchase vats.
         * @summary List vat types
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdVatTypesGet(organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VatTypeReadModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdVatTypesGet(organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['VatTypesApi.v1OrganizationIdVatTypesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * VatTypesApi - factory interface
 * @export
 */
export const VatTypesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VatTypesApiFp(configuration)
    return {
        /**
         * Gets a list of all of the organization\'s VAT types. Most organizations will have the same, although users can create their own partial purchase vats.
         * @summary List vat types
         * @param {VatTypesApiV1OrganizationIdVatTypesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdVatTypesGet(requestParameters: VatTypesApiV1OrganizationIdVatTypesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<VatTypeReadModel>> {
            return localVarFp.v1OrganizationIdVatTypesGet(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for v1OrganizationIdVatTypesGet operation in VatTypesApi.
 * @export
 * @interface VatTypesApiV1OrganizationIdVatTypesGetRequest
 */
export interface VatTypesApiV1OrganizationIdVatTypesGetRequest {
    /**
     * 
     * @type {string}
     * @memberof VatTypesApiV1OrganizationIdVatTypesGet
     */
    readonly organizationId: string
}

/**
 * VatTypesApi - object-oriented interface
 * @export
 * @class VatTypesApi
 * @extends {BaseAPI}
 */
export class VatTypesApi extends BaseAPI {
    /**
     * Gets a list of all of the organization\'s VAT types. Most organizations will have the same, although users can create their own partial purchase vats.
     * @summary List vat types
     * @param {VatTypesApiV1OrganizationIdVatTypesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VatTypesApi
     */
    public v1OrganizationIdVatTypesGet(requestParameters: VatTypesApiV1OrganizationIdVatTypesGetRequest, options?: RawAxiosRequestConfig) {
        return VatTypesApiFp(this.configuration).v1OrganizationIdVatTypesGet(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }
}


/* tslint:disable */
/* eslint-disable */
/**
 * Dinero API
 * Welcome to our endpoint documentation. Please try to carefully read our general documentation found on <a href=\"https://developer.dinero.dk/\">developer.dinero.dk</a> for information regarding the authorization proces, status and errorcodes, FAQ, Postman tutorial etc. <br><br>Once authorized, you simply add \'Authorization: Bearer <access-token>\' to the header of your requests. On the page below, you\'ll find all our endpoints documented as well as possible, but if you have any questions regarding an endpoint, or an error in the description, please contact us on <a href=\"mailto:api@dinero.dk\">api@dinero.dk.</a> 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { SubscribeToWebhookModel } from '../model';
// @ts-ignore
import type { UnsubscribeFromWebhookModel } from '../model';
/**
 * WebhooksApi - axios parameter creator
 * @export
 */
export const WebhooksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get list of available webhook events to subscribe to for an organization
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdWebhooksEventsGet: async (organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdWebhooksEventsGet', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/webhooks/events`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Subscribe to webhook
         * @param {string} organizationId 
         * @param {SubscribeToWebhookModel} [subscribeToWebhookModel] Event id of webhook to subscribe to and url for webhook destination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdWebhooksSubscribePost: async (organizationId: string, subscribeToWebhookModel?: SubscribeToWebhookModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdWebhooksSubscribePost', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/webhooks/subscribe`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(subscribeToWebhookModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get active webhook subscriptions for an organization
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdWebhooksSubscriptionsGet: async (organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdWebhooksSubscriptionsGet', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/webhooks/subscriptions`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Unsubscribe specific webhook event
         * @param {string} organizationId 
         * @param {UnsubscribeFromWebhookModel} [unsubscribeFromWebhookModel] Event id of webhook to unsubscribe
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdWebhooksUnsubscribeDelete: async (organizationId: string, unsubscribeFromWebhookModel?: UnsubscribeFromWebhookModel, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationId' is not null or undefined
            assertParamExists('v1OrganizationIdWebhooksUnsubscribeDelete', 'organizationId', organizationId)
            const localVarPath = `/v1/{organizationId}/webhooks/unsubscribe`
                .replace(`{${"organizationId"}}`, encodeURIComponent(String(organizationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(unsubscribeFromWebhookModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebhooksApi - functional programming interface
 * @export
 */
export const WebhooksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WebhooksApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get list of available webhook events to subscribe to for an organization
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdWebhooksEventsGet(organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdWebhooksEventsGet(organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebhooksApi.v1OrganizationIdWebhooksEventsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Subscribe to webhook
         * @param {string} organizationId 
         * @param {SubscribeToWebhookModel} [subscribeToWebhookModel] Event id of webhook to subscribe to and url for webhook destination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdWebhooksSubscribePost(organizationId: string, subscribeToWebhookModel?: SubscribeToWebhookModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdWebhooksSubscribePost(organizationId, subscribeToWebhookModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebhooksApi.v1OrganizationIdWebhooksSubscribePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get active webhook subscriptions for an organization
         * @param {string} organizationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdWebhooksSubscriptionsGet(organizationId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdWebhooksSubscriptionsGet(organizationId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebhooksApi.v1OrganizationIdWebhooksSubscriptionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Unsubscribe specific webhook event
         * @param {string} organizationId 
         * @param {UnsubscribeFromWebhookModel} [unsubscribeFromWebhookModel] Event id of webhook to unsubscribe
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationIdWebhooksUnsubscribeDelete(organizationId: string, unsubscribeFromWebhookModel?: UnsubscribeFromWebhookModel, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationIdWebhooksUnsubscribeDelete(organizationId, unsubscribeFromWebhookModel, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebhooksApi.v1OrganizationIdWebhooksUnsubscribeDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WebhooksApi - factory interface
 * @export
 */
export const WebhooksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WebhooksApiFp(configuration)
    return {
        /**
         * 
         * @summary Get list of available webhook events to subscribe to for an organization
         * @param {WebhooksApiV1OrganizationIdWebhooksEventsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdWebhooksEventsGet(requestParameters: WebhooksApiV1OrganizationIdWebhooksEventsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1OrganizationIdWebhooksEventsGet(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Subscribe to webhook
         * @param {WebhooksApiV1OrganizationIdWebhooksSubscribePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdWebhooksSubscribePost(requestParameters: WebhooksApiV1OrganizationIdWebhooksSubscribePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1OrganizationIdWebhooksSubscribePost(requestParameters.organizationId, requestParameters.subscribeToWebhookModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get active webhook subscriptions for an organization
         * @param {WebhooksApiV1OrganizationIdWebhooksSubscriptionsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdWebhooksSubscriptionsGet(requestParameters: WebhooksApiV1OrganizationIdWebhooksSubscriptionsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1OrganizationIdWebhooksSubscriptionsGet(requestParameters.organizationId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Unsubscribe specific webhook event
         * @param {WebhooksApiV1OrganizationIdWebhooksUnsubscribeDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationIdWebhooksUnsubscribeDelete(requestParameters: WebhooksApiV1OrganizationIdWebhooksUnsubscribeDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.v1OrganizationIdWebhooksUnsubscribeDelete(requestParameters.organizationId, requestParameters.unsubscribeFromWebhookModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for v1OrganizationIdWebhooksEventsGet operation in WebhooksApi.
 * @export
 * @interface WebhooksApiV1OrganizationIdWebhooksEventsGetRequest
 */
export interface WebhooksApiV1OrganizationIdWebhooksEventsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof WebhooksApiV1OrganizationIdWebhooksEventsGet
     */
    readonly organizationId: string
}

/**
 * Request parameters for v1OrganizationIdWebhooksSubscribePost operation in WebhooksApi.
 * @export
 * @interface WebhooksApiV1OrganizationIdWebhooksSubscribePostRequest
 */
export interface WebhooksApiV1OrganizationIdWebhooksSubscribePostRequest {
    /**
     * 
     * @type {string}
     * @memberof WebhooksApiV1OrganizationIdWebhooksSubscribePost
     */
    readonly organizationId: string

    /**
     * Event id of webhook to subscribe to and url for webhook destination
     * @type {SubscribeToWebhookModel}
     * @memberof WebhooksApiV1OrganizationIdWebhooksSubscribePost
     */
    readonly subscribeToWebhookModel?: SubscribeToWebhookModel
}

/**
 * Request parameters for v1OrganizationIdWebhooksSubscriptionsGet operation in WebhooksApi.
 * @export
 * @interface WebhooksApiV1OrganizationIdWebhooksSubscriptionsGetRequest
 */
export interface WebhooksApiV1OrganizationIdWebhooksSubscriptionsGetRequest {
    /**
     * 
     * @type {string}
     * @memberof WebhooksApiV1OrganizationIdWebhooksSubscriptionsGet
     */
    readonly organizationId: string
}

/**
 * Request parameters for v1OrganizationIdWebhooksUnsubscribeDelete operation in WebhooksApi.
 * @export
 * @interface WebhooksApiV1OrganizationIdWebhooksUnsubscribeDeleteRequest
 */
export interface WebhooksApiV1OrganizationIdWebhooksUnsubscribeDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof WebhooksApiV1OrganizationIdWebhooksUnsubscribeDelete
     */
    readonly organizationId: string

    /**
     * Event id of webhook to unsubscribe
     * @type {UnsubscribeFromWebhookModel}
     * @memberof WebhooksApiV1OrganizationIdWebhooksUnsubscribeDelete
     */
    readonly unsubscribeFromWebhookModel?: UnsubscribeFromWebhookModel
}

/**
 * WebhooksApi - object-oriented interface
 * @export
 * @class WebhooksApi
 * @extends {BaseAPI}
 */
export class WebhooksApi extends BaseAPI {
    /**
     * 
     * @summary Get list of available webhook events to subscribe to for an organization
     * @param {WebhooksApiV1OrganizationIdWebhooksEventsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public v1OrganizationIdWebhooksEventsGet(requestParameters: WebhooksApiV1OrganizationIdWebhooksEventsGetRequest, options?: RawAxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).v1OrganizationIdWebhooksEventsGet(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Subscribe to webhook
     * @param {WebhooksApiV1OrganizationIdWebhooksSubscribePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public v1OrganizationIdWebhooksSubscribePost(requestParameters: WebhooksApiV1OrganizationIdWebhooksSubscribePostRequest, options?: RawAxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).v1OrganizationIdWebhooksSubscribePost(requestParameters.organizationId, requestParameters.subscribeToWebhookModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get active webhook subscriptions for an organization
     * @param {WebhooksApiV1OrganizationIdWebhooksSubscriptionsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public v1OrganizationIdWebhooksSubscriptionsGet(requestParameters: WebhooksApiV1OrganizationIdWebhooksSubscriptionsGetRequest, options?: RawAxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).v1OrganizationIdWebhooksSubscriptionsGet(requestParameters.organizationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Unsubscribe specific webhook event
     * @param {WebhooksApiV1OrganizationIdWebhooksUnsubscribeDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public v1OrganizationIdWebhooksUnsubscribeDelete(requestParameters: WebhooksApiV1OrganizationIdWebhooksUnsubscribeDeleteRequest, options?: RawAxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).v1OrganizationIdWebhooksUnsubscribeDelete(requestParameters.organizationId, requestParameters.unsubscribeFromWebhookModel, options).then((request) => request(this.axios, this.basePath));
    }
}


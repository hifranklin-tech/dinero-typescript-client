/* tslint:disable */
/* eslint-disable */
/**
 * Dinero API
 * Welcome to our endpoint documentation. Please try to carefully read our general documentation found on <a href=\"https://developer.dinero.dk/\">developer.dinero.dk</a> for information regarding the authorization proces, status and errorcodes, FAQ, Postman tutorial etc. <br><br>Once authorized, you simply add \'Authorization: Bearer <access-token>\' to the header of your requests. On the page below, you\'ll find all our endpoints documented as well as possible, but if you have any questions regarding an endpoint, or an error in the description, please contact us on <a href=\"mailto:api@dinero.dk\">api@dinero.dk.</a> 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// May contain unused imports in some cases
// @ts-ignore
import type { InvoiceLinesReadModel } from './invoice-lines-read-model';
// May contain unused imports in some cases
// @ts-ignore
import type { TotalLine } from './total-line';

/**
 * Represent a invoice
 * @export
 * @interface InvoiceReadModel
 */
export interface InvoiceReadModel {
    /**
     * The currency used on the voucher. Defaults to DKK if null. Dinero will assign days date currency rate for the given currency. Currencies are given in format: DKK, EUR, USD etc...
     * @type {string}
     * @memberof InvoiceReadModel
     */
    'currency'?: string | null;
    /**
     * The language to be used in the voucher. Available languages are \'da-DK\' and \'en-GB\'. Defaults to \'da-DK\'.
     * @type {string}
     * @memberof InvoiceReadModel
     */
    'language'?: string | null;
    /**
     * Your external id  This can be used for ID\'ing in external apps/services e.g. a web shop.  The maximum length is 128 characters
     * @type {string}
     * @memberof InvoiceReadModel
     */
    'externalReference'?: string | null;
    /**
     * User supplied description of the voucher e.g. \'Custom Invoice description\'. Defaults to document type e.g. \'Invoice\', \'Offer\', \'Creditnote\' using the selected language.
     * @type {string}
     * @memberof InvoiceReadModel
     */
    'description'?: string | null;
    /**
     * User supplied comment on the voucher
     * @type {string}
     * @memberof InvoiceReadModel
     */
    'comment'?: string | null;
    /**
     * The date of the creation/issuing. This should be in the format YYYY-MM-DD e.g. 2015-12-02. Defaults to today.
     * @type {string}
     * @memberof InvoiceReadModel
     */
    'date'?: string | null;
    /**
     * User supplied invoice lines. Minimum one.
     * @type {Array<InvoiceLinesReadModel>}
     * @memberof InvoiceReadModel
     */
    'productLines': Array<InvoiceLinesReadModel>;
    /**
     * Contact address (linebreaks are allowed \'\\n\'). When null is specified the address defaults to the contacts address.
     * @type {string}
     * @memberof InvoiceReadModel
     */
    'address'?: string | null;
    /**
     * The number of the voucher.
     * @type {number}
     * @memberof InvoiceReadModel
     */
    'number': number;
    /**
     * Contact name
     * @type {string}
     * @memberof InvoiceReadModel
     */
    'contactName'?: string | null;
    /**
     * If true, the user prefers the invoice to be displayed with lines incl vat.
     * @type {boolean}
     * @memberof InvoiceReadModel
     */
    'showLinesInclVat': boolean;
    /**
     * Total amount without vat
     * @type {number}
     * @memberof InvoiceReadModel
     */
    'totalExclVat': number;
    /**
     * Total amount to calculate the vat from
     * @type {number}
     * @memberof InvoiceReadModel
     */
    'totalVatableAmount': number;
    /**
     * Total amount incl. vat
     * @type {number}
     * @memberof InvoiceReadModel
     */
    'totalInclVat': number;
    /**
     * Total vat free amount
     * @type {number}
     * @memberof InvoiceReadModel
     */
    'totalNonVatableAmount': number;
    /**
     * Total vat amount
     * @type {number}
     * @memberof InvoiceReadModel
     */
    'totalVat': number;
    /**
     * Total lines. SubTotal, Vat and Total. Only lines valid for display in the current context are returned.
     * @type {Array<TotalLine>}
     * @memberof InvoiceReadModel
     */
    'totalLines'?: Array<TotalLine> | null;
    /**
     * Template id to use for design.
     * @type {string}
     * @memberof InvoiceReadModel
     */
    'invoiceTemplateId'?: string | null;
    /**
     * The guid of the voucher
     * @type {string}
     * @memberof InvoiceReadModel
     */
    'guid': string;
    /**
     * Timestamp of version. To avoid concurrency issues.
     * @type {string}
     * @memberof InvoiceReadModel
     */
    'timeStamp'?: string | null;
    /**
     * Time of creation
     * @type {string}
     * @memberof InvoiceReadModel
     */
    'createdAt'?: string | null;
    /**
     * Time of last update
     * @type {string}
     * @memberof InvoiceReadModel
     */
    'updatedAt'?: string | null;
    /**
     * Time of deletion. Null unless the object is deleted.
     * @type {string}
     * @memberof InvoiceReadModel
     */
    'deletedAt'?: string | null;
    /**
     * An sales voucher can have status Draft or Booked
     * @type {string}
     * @memberof InvoiceReadModel
     */
    'status'?: string | null;
    /**
     * Dinero contact guid.
     * @type {string}
     * @memberof InvoiceReadModel
     */
    'contactGuid'?: string | null;
    /**
     * The invoice\'s payment date. This should be in the format YYYY-MM-DD e.g. 2021-12-02
     * @type {string}
     * @memberof InvoiceReadModel
     */
    'paymentDate'?: string | null;
    /**
     * An invoice can have payment status Draft, Booked, Paid, OverPaid or Overdue
     * @type {string}
     * @memberof InvoiceReadModel
     */
    'paymentStatus'?: string | null;
    /**
     * Number of days until payment deadline.
     * @type {number}
     * @memberof InvoiceReadModel
     */
    'paymentConditionNumberOfDays': number;
    /**
     * Type of payment condition. Valid types are: Netto, NettoCash, CurrentMonthOut.   Note that if you use NettoCash, PaymentConditionNumberOfDays should be zero.
     * @type {string}
     * @memberof InvoiceReadModel
     */
    'paymentConditionType'?: string | null;
    /**
     * FIK code (FÃ¦lles Indbetalings Kort)
     * @type {string}
     * @memberof InvoiceReadModel
     */
    'fikCode'?: string | null;
    /**
     * The deposit account to register payments on
     * @type {number}
     * @memberof InvoiceReadModel
     */
    'depositAccountNumber'?: number | null;
    /**
     * The mailout can have following status:   NotSent, Sent or SeenByCustomer, Failed.  SeenByCustomer, means the user has clicked on the link in the mailout and viewed the sales voucher.   Any type of mailout (email, reminder, pre-reminder, e-invoice), will change the status from NotSent to Sent.
     * @type {string}
     * @memberof InvoiceReadModel
     */
    'mailOutStatus'?: string | null;
    /**
     * The mailout category can have following values:  Einvoice, ElectronicInvoiceReminder, Inkasso, Mailout, OrderConfirmation, PreReminder, Reminder, TradeOffer, None
     * @type {string}
     * @memberof InvoiceReadModel
     */
    'latestMailOutType'?: string | null;
    /**
     * Whether the invoice has been sent to debt collection, i.e. at least one of the sent reminders contains a debt collection warning
     * @type {boolean}
     * @memberof InvoiceReadModel
     */
    'isSentToDebtCollection': boolean;
    /**
     * Whether MobilePay Invoice has been enabled for the invoice
     * @type {boolean}
     * @memberof InvoiceReadModel
     */
    'isMobilePayInvoiceEnabled': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InvoiceReadModel
     */
    'isPensoPayEnabled': boolean;
}


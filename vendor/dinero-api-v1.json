{
  "openapi": "3.0.1",
  "info": {
    "title": "Dinero API",
    "description": "Welcome to our endpoint documentation. Please try to carefully read our general documentation found on <a href=\"https://developer.dinero.dk/\">developer.dinero.dk</a> for information regarding the authorization proces, status and errorcodes, FAQ, Postman tutorial etc. <br><br>Once authorized, you simply add 'Authorization: Bearer <access-token>' to the header of your requests. On the page below, you'll find all our endpoints documented as well as possible, but if you have any questions regarding an endpoint, or an error in the description, please contact us on <a href=\"mailto:api@dinero.dk\">api@dinero.dk.</a> ",
    "version": "v1"
  },
  "paths": {
    "/v1/{organizationId}/accounting-years/possibleenddates": { },
    "/v1/{organizationId}/accountingyears": {
      "get": {
        "tags": [
          "AccountingYears"
        ],
        "summary": "List Accounting years",
        "description": "Get a list of an organizations accounting years. You can create a new accouting year, by simply booking a voucher in the next possible accounting year. For instance, if 2023 is the most recent accouting year, 2024 can be created by booking a voucher in this year.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccountingYearReadModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/accounts/entry": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "List entry accounts",
        "description": "Get the list of entry accounts for the organization. Entry accounts are simply all accounts, and can exist in any range.",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "A comma separated list of fields to include in the response.\r\n            Possible values are Name, AccountNumber, VatCode and Category. Notice that it's not case sensitive, the property name will be returned the way you request it.\r\n            If left empty it defaults to AccountNumber and Name.",
            "schema": {
              "type": "string",
              "default": "AccountNumber,Name,IsHidden"
            }
          },
          {
            "name": "categoryFilter",
            "in": "query",
            "description": "Filters the accounts, so only accounts with the selected category are returned.\r\nPossible categories: Turnover, Variable Expenses, Salary, Sales Expenses, Property Expenses, Administration Expenses,\r\nTravel Expenses, Depreciation, Interest Income, Interest Expenses, Property, Turnover Assets, Financial Assets, Receivables,\r\nLiquid Assets, Equity, Long Term Debt, Short Term Debt, Vat Due, Salary Due, Analysis, Not Set, Tax, Charge, IntangibleProperty",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntryAccountReadModel"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Accounts"
        ],
        "summary": "Create entry account",
        "description": "Create a new entry account. Entry accounts are used for most common cases except deposits, and can exist in any range.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountCreateModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/{organizationId}/accounts/purchase": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "List purchase accounts",
        "description": "Get the list of purchase accounts for the organization. Purchase accounts are simply entry accounts, in the range from 2000 to 9399, which constitutes the expense before tax range. These accounts can be used while booking purchase vouchers.",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "A comma separated list of fields to include in the response.\r\n            Possible values are Name, AccountNumber, VatCode, Category and CategoryName. Notice that it's not case sensitive, the property name will be returned the way you request it.\r\n            If left empty it defaults to include all fields.",
            "schema": {
              "type": "string",
              "default": "AccountNumber,Name,VatCode,Category,CategoryName,IsHidden"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntryAccountReadModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/accounts/deposit": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "List deposit accounts",
        "description": "Get the list of deposit accounts for the organization. For more elaborate information, look at the create deposit account endpoint.",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "A comma separated list of fields to include in the response.\r\n            Possible values are Name, AccountNumber, IsDefault, IsHidden.\r\n            Notice that it's not case sensitive, the property name will be returned the way you request it.\r\n            If left empty it defaults to AccountNumber and Name.",
            "schema": {
              "type": "string",
              "default": "AccountNumber,Name"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DepositAccountReadModel"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Accounts"
        ],
        "summary": "Create deposit account",
        "description": "Create a new deposit account. Deposit accounts have some special properties over entry accounts. They can hold information about the registration and account number for the bankaccount in question. They can also be used for other types of deposits, such as Paypal, Zettle, Stripe etc. They will usually exist in the 55000-55999 range.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DepositCreateModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/{organizationId}/accounts/deposit/internal": { },
    "/v1/{organizationId}/attachments/bind/default/{documentGuid}/{documentType}": {
      "post": {
        "tags": [
          "Attachments"
        ],
        "summary": "Binds the default documents (given by the organization and the document type) from settings to the document\r\ngiven by the document Guid.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "ID of the organization performing the request",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "documentGuid",
            "in": "path",
            "description": "ID of the document that wants the default attachments bound to it",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "documentType",
            "in": "path",
            "description": "The document type (i.e. Invoice or TradeOffer)",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/{organizationId}/attachments/{documentGuid}": {
      "get": {
        "tags": [
          "Attachments"
        ],
        "summary": "Get document attachments",
        "description": "Get a list of attachments bound to an invoice, trade-offer or credit-note.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "The ID of the organization",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "documentGuid",
            "in": "path",
            "description": "Guid of invoice, trade-offer or credit-note",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentAttachmentReadModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/attachments/{documentGuid}/{fileGuid}/{fileName}": {
      "post": {
        "tags": [
          "Attachments"
        ],
        "summary": "Bind attachment with a document",
        "description": "You can bind a file with an invoice using this endpoint. The bound file will be sent with the invoice.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "The ID of the organization",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "documentGuid",
            "in": "path",
            "description": "Guid of invoice, trade-offer or credit-note",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileGuid",
            "in": "path",
            "description": "Attachment Guid",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileName",
            "in": "path",
            "description": "Attachment name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/{organizationId}/attachments/{documentGuid}/{fileGuid}": {
      "delete": {
        "tags": [
          "Attachments"
        ],
        "summary": "Remove attachment from document",
        "description": "You can unbind an already bound file to an invoice. It will no longer be sent with the invoice.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "The ID of the organization",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "documentGuid",
            "in": "path",
            "description": "Guid of invoice, trade-offer or credit-note",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fileGuid",
            "in": "path",
            "description": "Attachment Guid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/{organizationId}/{accountingYearKey}/businessgoals/yearly": { },
    "/v1/{organizationId}/{accountingYearKey}/businessgoals/yearly/performance": { },
    "/v1/{organizationId}/{accountingYearKey}/businessgoals/monthly": { },
    "/v1/{organizationId}/contacts/{contactGuid}/notes": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "List contact notes",
        "description": "Retrieve a list of notes for the contact ordered by NoteDate.",
        "parameters": [
          {
            "name": "contactGuid",
            "in": "path",
            "description": "Guid of the contact",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A comma separated list of fields to include in the response.\r\n            Possible values are Id, NoteDate, Text, AuthorName, AuthorEmail, CreatedAt, UpdatedAt and DeletedAt.\r\n            Notice that it's not case sensitive, the property name will be returned the way you request it.\r\n            If left empty it defaults to Id, NoteDate and Text.",
            "schema": {
              "type": "string",
              "default": "Id,NoteDate,Text"
            }
          },
          {
            "name": "deletedOnly",
            "in": "query",
            "description": "[Generic Filter Option] Only select deleted notes. If left empty, will default to false.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The 0-based page number",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The maximum number of items to include in a page. Maximum 1000.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactNoteReadModelDineroCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Create contact note",
        "description": "Add a new note for the contact. A note is an internal tool for the user to add information about the customer for their own memory.",
        "parameters": [
          {
            "name": "contactGuid",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Content of the new note",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactNoteCreateModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactCreatedResult"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/contacts/{contactGuid}/notes/{noteGuid}": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Get contact note",
        "description": "Retrieve a specific note for a contact.",
        "parameters": [
          {
            "name": "contactGuid",
            "in": "path",
            "description": "Guid of the contact",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "noteGuid",
            "in": "path",
            "description": "Guid of the note",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactNoteReadModel"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Contacts"
        ],
        "summary": "Update contact note",
        "description": "Update an existing note. The new note will replace the old note, so incase you want to append something you must first fetch the original note and append the new message to it.",
        "parameters": [
          {
            "name": "contactGuid",
            "in": "path",
            "description": "Guid of the contact",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "noteGuid",
            "in": "path",
            "description": "Guid of the note",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Content of the note to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactNoteUpdateModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "Contacts"
        ],
        "summary": "Delete contact note",
        "description": "Delete a note from the contact.",
        "parameters": [
          {
            "name": "contactGuid",
            "in": "path",
            "description": "Guid of the contact",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "noteGuid",
            "in": "path",
            "description": "Guid of the note",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/{organizationId}/contacts": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "List contacts",
        "description": "Retrieve a list of contacts for the organization. Take note of your different options here. You can filter what fields you want and you can query for specific contacts. When you want to create a new contact, it's a good idea to query to see if something similar already exists and use that instead.",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "A comma separated list of fields to include in the response.\r\n            Possible values are Name, ContactGuid, ExternalReference, IsPerson, Street, ZipCode, City, CountryKey, Phone, Email, Webpage, AttPerson,\r\n            VatNumber, EanNumber, PaymentConditionType, PaymentConditionNumberOfDays, IsMember, MemberNumber, CompanyStatus, VatRegionKey, CreatedAt, UpdatedAt and DeletedAt.\r\n            Notice that it's not case sensitive, the property name will be returned the way you request it. If left empty it defaults to name and contactGuid (notice small start letter).",
            "schema": {
              "type": "string",
              "default": "name,contactGuid"
            }
          },
          {
            "name": "queryFilter",
            "in": "query",
            "description": "Filter specific for contacts. Filtering can be applied to following fields:\r\n            ExternalReference,Name, Email, VatNumber, EanNumber, IsPerson. See API documentation for filtering format. If left empty no filtering is applied.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "changesSince",
            "in": "query",
            "description": "[Generic Filter Option] Only return contacts that was created, deleted or updated at or after given time.\r\n            If left empty, this filter will not be applied, and contacts will be returned regardless of change history.\r\n            The time must be UTC and in the format 'YYYY-MM-DDTHH:mm:ssZ' example: '2015-08-18T06:36:22Z'.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deletedOnly",
            "in": "query",
            "description": "[Generic Filter Option] Only select deleted contacts. If left empty, will default to false.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The 0-based page number",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The maximum number of items to include in a page. Maximum 1000.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactReadModelDineroCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Create contact",
        "description": "Add a new contact to the organization. It's a good idea to query for a similar contact before creating a new one, by using the List contacts endpoint above. In the case of a company you can query to see if a similar company already exists as a contact, by using the queryFilter for VATnumber. For a privat contact you could check for instance name and/or email.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Content of the new contact",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactCreateModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactCreatedResult"
                }
              }
            }
          }
        }
      }
    },
    "/v2/{organizationId}/contacts": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "List contacts v2",
        "description": "Retrieve a list of contacts for the organization. Take note of your different options here. You can filter what fields you want and you can query for specific contacts. When you want to create a new contact, it's a good idea to query to see if something similar already exists and use that instead.",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "A comma separated list of fields to include in the response.\r\n            Possible values are Name, ContactGuid, ExternalReference, IsPerson, Street, ZipCode, City, CountryKey, Phone, Email, Webpage, AttPerson,\r\n            VatNumber, EanNumber, PaymentConditionType, PaymentConditionNumberOfDays, IsMember, MemberNumber, CompanyStatus, VatRegionKey, CreatedAt, UpdatedAt and DeletedAt.\r\n            Notice that it's not case sensitive, the property name will be returned the way you request it. If left empty it defaults to name and contactGuid (notice small start letter).",
            "schema": {
              "type": "string",
              "default": "name,contactGuid"
            }
          },
          {
            "name": "queryFilter",
            "in": "query",
            "description": "Filter specific for contacts. Filtering can be applied to following fields:\r\n            ExternalReference,Name, Email, VatNumber, EanNumber, IsPerson. See API documentation for filtering format. If left empty no filtering is applied.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "changesSince",
            "in": "query",
            "description": "[Generic Filter Option] Only return contacts that was created, deleted or updated at or after given time.\r\n            If left empty, this filter will not be applied, and contacts will be returned regardless of change history.\r\n            The time must be UTC and in the format 'YYYY-MM-DDTHH:mm:ssZ' example: '2015-08-18T06:36:22Z'.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deletedOnly",
            "in": "query",
            "description": "[Generic Filter Option] Only select deleted contacts. If left empty, will fetch deleted and not deleted contacts",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The 0-based page number",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The maximum number of items to include in a page. Maximum 1000.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactReadModelDineroCollection"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/contacts/{guid}": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Get Contact",
        "description": "Retrieves contact information for the specific contact with the given id. Here you will get more information than from the list. Useful in certain situations when the list doesn't provide enough information.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Unique identifier for the contact information",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactReadModel"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Contacts"
        ],
        "summary": "Update contact",
        "description": "Update an existing contact. Do note that PUT requests will replace the original content as per REST standard, so include all information. If you want to add to existing data then first get the specific contact and the append and PUT the data all together.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Unique identifier for the contact information",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Content of the contact to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactUpdateModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "deprecated": true
      },
      "delete": {
        "tags": [
          "Contacts"
        ],
        "summary": "Delete contact",
        "description": "Delete a contact from the given organization.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Unique identifier for the contact information",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v2/{organizationId}/contacts/{guid}": {
      "put": {
        "tags": [
          "Contacts"
        ],
        "summary": "Update contact",
        "description": "Update an existing contact. Do note that PUT requests will replace the original content as per REST standard, so include all information. If you want to add to existing data then first get the specific contact and the append and PUT the data all together.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Unique identifier for the contact information",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Content of the contact to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactUpdateModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/{organizationId}/contacts/{guid}/restore": {
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Restore deleted contact",
        "description": "Restore a deleted contact from the given organization. You can see if a contact is deleted by using the Get Contact endpoint. A deleted contact will have a deletedAt value.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Unique identifier for the contact information",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/{organizationId}/state-of-account/{guid}": {
      "get": {
        "tags": [
          "ContactStateOfAccount"
        ],
        "summary": "Get contacts state of account",
        "description": "Returns the income, expenses and related entries for a contact in the given period (or all time if no period is defined).",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Unique identifier for the contact",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Include entries after this date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "Include entries before this date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "hideClosed",
            "in": "query",
            "description": "Whether to exclude closed entries",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactStateOfAccount"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/state-of-account/{guid}/pdf": {
      "get": {
        "tags": [
          "ContactStateOfAccount"
        ],
        "summary": "Get contacts state of account as PDF",
        "description": "The same as the above endpoint, but as a PDF file.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Unique identifier for the contact",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Include entries after this date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "Include entries before this date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "hideClosed",
            "in": "query",
            "description": "Whether to exclude closed entries",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/{organizationId}/state-of-account/{guid}/email": {
      "post": {
        "tags": [
          "ContactStateOfAccount"
        ],
        "summary": "Send the contacts state of account as an email",
        "description": "You can send a contacts state of account to the contact in question by using this endpoint. It will default to the standard email of the contact if no other is specified.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Unique identifier for the contact",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The mail out data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactStateOfAccountMailoutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/countries": {
      "get": {
        "tags": [
          "Countries"
        ],
        "summary": "List countries",
        "description": "Get a list of countries. Mostly useful for making sure you have a valid country for a contact.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CountryModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/create-organization": { },
    "/v1/{organizationId}/electronic-invoice/validate-recipient": { },
    "/v1/{organizationId}/entries": {
      "get": {
        "tags": [
          "Entry"
        ],
        "summary": "List entries",
        "description": "Get a list of all entries for a given period. This can be a very lengthy and demanding process on our end. Therefore this is only used initially. After that you must use the \"List changes\" endpoint below, to only get changes that have been made since the initial synchronization. Cannot cross accounting years.",
        "parameters": [
          {
            "name": "fromDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "includePrimo",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntryReadModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/entries/changes": {
      "get": {
        "tags": [
          "Entry"
        ],
        "summary": "List changes",
        "description": "Get a list of all Entries added in a given time range, the time range cannot be longer than 31 days.\r\n            \r\nPrimo entries will be returned if they have been updated in the time range. The value of the primo entry will be the current total for that account and accounting year, not the changes made in the time range.\r\nThe guid of a primo entry will be the same for an accounting year, but the value might be updated.",
        "parameters": [
          {
            "name": "changesFrom",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "changesTo",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "includePrimo",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntryReadModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/files": {
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Upload file",
        "description": "Accepts a posted image. If the file is accepted status code 200 will be returned with info\r\non the file's id and the id of the organization owning file. It might take a second for the\r\nfile to be accessible.\r\nIn case that the file size is above 6 MB, then a status code 400 will be returned.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/formdata": {
              "encoding": {
                "file": { }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileSavedReadModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "List files",
        "description": "Lists all files in file archive, either so it can be used to bind with a document or to download the file.",
        "parameters": [
          {
            "name": "extensions",
            "in": "query",
            "description": "(optional) limits the search to the given file extension(s)\r\n                Several extensions can be specified by separating values with comma. Ex. ?extensions=pdf,png,csv",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "uploadedBefore",
            "in": "query",
            "description": "(optional) limits the search to the given after. Format: yyyy/MM/dd",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uploadedAfter",
            "in": "query",
            "description": "(optional) limits the search to the given before date. Format: yyyy/MM/dd",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileStatus",
            "in": "query",
            "description": "(optional) limits the search to the specified file status, available values are: All, Used or Unused",
            "schema": {
              "$ref": "#/components/schemas/FileStatus"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "(optional) specifies page number",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "(optional) specifies page size",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1000
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FilteredFileReadModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/files/{fileGuid}": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Download the specified file",
        "description": "Returns the file with a certain file guid.",
        "parameters": [
          {
            "name": "fileGuid",
            "in": "path",
            "description": "Specifies the file to be downloaded",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/{organizationId}/integrations": { },
    "/v1/{organizationId}/integrations/mobilepay-invoice/start": { },
    "/v2/{organizationId}/integrations/mobilepay-invoice/start": { },
    "/v1/{organizationId}/integrations/mobilepay-invoice/accounting-access": { },
    "/v1/{organizationId}/integrations/mobilepay-invoice/activate": { },
    "/v1/{organizationId}/integrations/mobilepay-invoice/deactivate": { },
    "/v1/{organizationId}/integrations/pensopay/start": { },
    "/v1/{organizationId}/integrations/pensopay/reactivate": { },
    "/v1/{organizationId}/integrations/pensopay/deactivate": { },
    "/v1/{organizationId}/integrations/pensopay": { },
    "/v1/{organizationId}/invoices": {
      "post": {
        "tags": [
          "Invoices"
        ],
        "summary": "Create invoice",
        "description": "Create a new draft invoice. This invoice can be found in the \"Salg\" section of Dinero. A draft invoice will not count in the accounts untill booked.\r\nThink about using the book and send endpoints after the draft has been created to further automate the booking process for the user.\r\nAlso note that the date on the invoice, should always be the date the invoice is sent to the customer.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Model of the invoice to save.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceCreateModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedResponseModel"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Invoices"
        ],
        "summary": "List invoices",
        "description": "Retrieve a list of invoices for the organization.\r\nThis can return quite a long list of invoices, consider using the changesSince filter to only return invoices that have been changed since the last time you fetched the list.\r\nAlso note that deleted invoices will not be returned on this list per default.",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date in format 'YYYY-MM-DD' example '2015-01-01'. If you define a start date, you also need to define an end date. Note that drafts are not affected by this filter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date in format 'YYYY-MM-DD' example '2015-01-01'. If you define an end date, you also need to define a start date.  Note that drafts are not affected by this filter.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A comma separated list of fields to include in the response.\r\n            Possible values are:\r\n            Number, Guid, ExternalReference, ContactName, ContactGuid, Date, PaymentDate, Description, Currency, Status, MailOutStatus, LatestMailOutType, TotalExclVatInDkk, TotalInclVatInDkk\r\n            TotalExclVat, TotalInclVat, CreatedAt, UpdatedAt and DeletedAt.\r\n            If null, defaults to Guid,ContactName,Date,Description.\r\n            Notice that it's not case sensitive, the property name will be returned the way you request it.",
            "schema": {
              "type": "string",
              "default": "Guid,ContactName,Date,Description"
            }
          },
          {
            "name": "freeTextSearch",
            "in": "query",
            "description": "A free text search performed on Number, ContactName, Description and TotalInclTax",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "statusFilter",
            "in": "query",
            "description": "Filter on Status. You can choose Draft, Booked, Paid, OverPaid or Overdue. You can add multible filters example: 'Paid,OverPaid,Overdue'. If left empty no filter is applied.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "queryFilter",
            "in": "query",
            "description": "Filtering can be applied to following fields:\r\n            ExternalReference, ContactGuid, Description. See API documentation for filtering format. If left empty no filtering is applied.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "changesSince",
            "in": "query",
            "description": "[Generic Filter Option] Only return invoices that was created, deleted or updated at or after given time.\r\n            If left empty, this filter will not be applied, and invoices will be returned regardless of change history.\r\n            The time must be UTC and in the format 'YYYY-MM-DDTHH:mm:ssZ' example: '2015-08-18T06:36:22Z'.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deletedOnly",
            "in": "query",
            "description": "[Generic Filter Option] Only select deleted invoices. If left empty, will defaults to false.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The 0-based page number",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The maximum number of items to include in a page. Maximum 1000.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A comma separated list of fields to sort on. Possible values are: VoucherNumber, VoucherDate, Status and Contact.",
            "schema": {
              "type": "string",
              "default": "VoucherNumber,VoucherDate"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Sort order. Valid values are ascending and descending. Field Status is always sorted in the order Draft, Overdue, Booked, OverPaid and Paid.",
            "schema": {
              "type": "string",
              "default": "descending"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalesVoucherReadListModelDineroCollection"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/invoices/fetch": {
      "post": {
        "tags": [
          "Invoices"
        ],
        "summary": "Get invoice totals",
        "description": "Fetch a invoice to get total, line sums and payment date calculations.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Model of the invoice.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceCreateFetchModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceFetchReadModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/invoices/{guid}": {
      "get": {
        "tags": [
          "Invoices"
        ],
        "summary": "Get invoice as json or pdf",
        "description": "Get invoice as json or pdf.\r\nDefine the Accept header of your request to either 'application/json' or 'application/octet-stream'.\r\nPDF's can only be generated from booked invoices.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceReadModel"
                }
              },
              "application/octet-stream": { }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Invoices"
        ],
        "summary": "Delete invoice",
        "description": "Delete invoice. The invoice should not be deleted if booked. In that case a creditnote would be the correct way to cancel the invoice.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Unique identifier for the invoice",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "optional timestamp to verify version before deletion",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimestampObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/{organizationId}/invoices/{guid}/book": {
      "post": {
        "tags": [
          "Invoices"
        ],
        "summary": "Book invoice",
        "description": "Book invoice. Booking means actually posting the invoice to the accounts. A booked invoice can also be send via email, sms or as an e-invoice.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Guid of the invoice to book",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Data used for the booking transaction",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceReadModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/invoices/{guid}/email": {
      "post": {
        "tags": [
          "Invoices"
        ],
        "summary": "Send invoice email",
        "description": "Send an email with link to a public version of the invoice where it can be printed or downloaded as a pdf. The invoice must be booked.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Guid of the invoice to send",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Model of the email to send",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiMailoutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailSentModel"
                }
              }
            }
          }
        }
      }
    },
    "/v2/{organizationId}/invoices/{guid}/email/template": {
      "get": {
        "tags": [
          "Invoices"
        ],
        "summary": "Get invoice email template",
        "description": "Gets the email template for an invoice. This can be used to preview what will be sent out on the email. These standards can be overwritten during the sending phase.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Guid of the invoice to send",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailoutTemplateReadModelV2"
                }
              }
            }
          }
        }
      }
    },
    "/v2/{organizationId}/invoices/{guid}/email": { },
    "/v1/{organizationId}/invoices/{guid}/email/pre-reminder/template": {
      "get": {
        "tags": [
          "Invoices"
        ],
        "summary": "Get pre-reminder template",
        "description": "Gets the email template for a pre-reminder. This can be used to preview what will be sent out on the email. These standards can be overwritten during the sending phase.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Guid of the invoice to send",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailoutTemplateReadModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/invoices/{guid}/email/pre-reminder": {
      "post": {
        "tags": [
          "Invoices"
        ],
        "summary": "Send invoice prereminder",
        "description": "Send a pre reminder email with link to a public version of the invoice where it can be printed or downloaded as a pdf.\r\nThe invoice needs to be overdue to send the reminder.\r\nA pre-reminder is a mail reminding the customer, that the invoice is overdue. This will not cause a reminder to be created in Dinero, this is only a mailout.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Guid of the invoice to send",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Model of the email to send",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiMailoutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v2/{organizationId}/invoices/{guid}/email/pre-reminder/template": { },
    "/v2/{organizationId}/invoices/{guid}/email/pre-reminder": { },
    "/v2/{organizationId}/invoices/{guid}/e-invoice": {
      "post": {
        "tags": [
          "Invoices"
        ],
        "summary": "Send invoice with EAN",
        "description": "Send an e-invoice to an EAN customer. This is a public system for electronic invoicing.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Guid of the invoice to send",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "parameters for the Ean invoice",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EanSendModelV2"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v3/{organizationId}/invoices/{guid}/e-invoice": {
      "post": {
        "tags": [
          "Invoices"
        ],
        "summary": "Send electronic invoice",
        "description": "Send electronic invoice to following destinations: P, SE, EAN/GLN, Danish vat (CVR) -numbers",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Guid of the invoice to send",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "parameters for electronic invoice",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EInvoiceSendModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1.2/{organizationId}/invoices/{guid}": {
      "put": {
        "tags": [
          "Invoices"
        ],
        "summary": "Update invoice",
        "description": "Update an existing invoice. The invoice cannot be updated if booked. Note that the put request per rest standard will update the entire invoice and not only the fields you send.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Unique identifier for the invoice information",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Content of the invoice to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvoiceUpdateModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdatedResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/invoices/{guid}/payments": {
      "post": {
        "tags": [
          "Invoices"
        ],
        "summary": "Add payment to invoice",
        "description": "Create a payment for an invoice. Payments can only be added to a booked invoice.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Guid of the invoice",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The payment details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentCreateModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedPaymentResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/invoices/{guid}/payments/{paymentGuid}": {
      "delete": {
        "tags": [
          "Invoices"
        ],
        "summary": "Delete payment from invoice",
        "description": "Delete a payment from an invoice. Only booked invoices can have payments.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Guid of the invoice",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "paymentGuid",
            "in": "path",
            "description": "The payment guid",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Version of the invoice",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimestampObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedPaymentResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/{organizationId}/invoices/{guid}/payments": {
      "get": {
        "tags": [
          "Invoices"
        ],
        "summary": "Get payments for invoice",
        "description": "Get the payments for an invoice",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Guid of the invoice",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoicePaymentsModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/invoices/{guid}/generate-creditnote": {
      "post": {
        "tags": [
          "Invoices"
        ],
        "summary": "Create credit note from invoice",
        "description": "Generate and saves a creditnote draft of a given booked invoice. If you need to create a standalone creditnote or a partial creditnote, please look at the creditnote category further down the documentation. Remeber to also book and send the creditnote to fully automate the booking process.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Guid of the invoice",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Optional timestamp. If given validate that you got the latest version.\r\n            This can be used to ensure that the invoice has not been changed since you last fetched it.\r\n            Defaults to latest version of the invoice.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimestampObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/invoices/templates": {
      "get": {
        "tags": [
          "Invoices"
        ],
        "summary": "List invoice templates",
        "description": "Get possible templates for invoices, which change the design and look of the invoice. Only possible to customize in Dineros UI.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvoiceTemplateModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/invoices/{guid}/mailouts": {
      "get": {
        "tags": [
          "Invoices"
        ],
        "summary": "List mailouts",
        "description": "List the mailouts for a specific invoice.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "changesSince",
            "in": "query",
            "description": "[Generic Filter Option] Only return mailouts that was created or updated after a given time.\r\n            If left empty, this filter will not be applied, and mailouts will be returned regardless of change history.\r\n            The time must be UTC and in the format 'YYYY-MM-DDTHH:mm:ssZ' example: '2015-08-18T06:36:22Z'.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeSms",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoucherMailoutReadModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/invoices/{contactGuid}/validate-trustpilot": { },
    "/v1/{organizationId}/ledgeritems/ledgers": {
      "post": {
        "tags": [
          "LedgerItems"
        ],
        "summary": "Get ledger items",
        "description": "Get ledger items already in the ledger and still unbooked.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LedgerItemModel"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LedgerItemModelV2"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1.2/{organizationId}/ledgeritems": {
      "post": {
        "tags": [
          "LedgerItems"
        ],
        "summary": "Add ledger item",
        "description": "Add a new array of ledger items to the ledger. Do note that this an array of items. The maximum number of ledger items in the same ledger is 1000. Please be careful around this endpoint as you are responsible for the bookkeeping, and must follow all applicable concepts of debet, credit etc. If you are in doubt, please reach out or contact an accountant for assistance.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LedgerItemModelV2"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LedgerItemReadModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/ledgeritems": {
      "put": {
        "tags": [
          "LedgerItems"
        ],
        "summary": "Update ledger items",
        "description": "Update a ledger item to the ledger.\r\nIt is required to send version and id for each ledger item.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LedgerItemModelV2"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LedgerItemReadModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/ledgeritems/book": {
      "post": {
        "tags": [
          "LedgerItems"
        ],
        "summary": "Send ledger items to booking",
        "description": "Starts the asynchronous booking process. You will get a status 200 response, if the process has succesfully initiated.\r\nThis does not mean the booking was succesful, so please follow up with a request to get ledger item status. The booking can take several seconds or indeed minutes incase of a long queue on our ledger service.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of ledger item ids to book",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LedgerItemModel"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/{organizationId}/ledgeritems/status": {
      "post": {
        "tags": [
          "LedgerItems"
        ],
        "summary": "Get ledger item status",
        "description": "Get status for ledger items sent to booking. It is important to use this endpoint to make sure ledger items are actually booked.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of ledger item status models",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LedgerItemStatusModel"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LedgerItemStatusReadModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/ledgeritems/delete": {
      "delete": {
        "tags": [
          "LedgerItems"
        ],
        "summary": "Delete multiple ledger items",
        "description": "Deletes a list of ledger items",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "A list of ledger items",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/LedgerItemModel"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/organizations": {
      "get": {
        "tags": [
          "ListOrganizations"
        ],
        "summary": "List organization",
        "description": "Gets a list of the users' organizations. It is also used to validate if the users has a Pro subscription or not, which is a prerequsite to interact with the API. Incase a user does not have Pro every other request will return a 403 error.",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "A comma separated list of fields to include in the response. Possible values are Name, Id, Type, IsPro, IsPayingPro, IsVatFree, Email, Phone, Street, City, ZipCode, AttPerson, IsTaxFreeUnion and VatNumber. Notice that it's not case sensitive, the property name will be returned the way you request it. If left empty it defaults to name.",
            "schema": {
              "type": "string",
              "default": "id,name,isPro"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationReadModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1.1/organizations": {
      "get": {
        "tags": [
          "ListOrganizations"
        ],
        "summary": "List organization",
        "description": "/// Gets a list of the user's organizations. It is also used to validate if the user has a Pro subscription or not, which is a prerequisite to interact with the API. In case a user does not have Pro, every other request will return a 403 error.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationReadModelV2"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/vouchers/manuel": {
      "post": {
        "tags": [
          "ManuelVouchers"
        ],
        "summary": "Create manual voucher",
        "description": "Creates a manual voucher draft. In our application we call this \"finansbilag\" and will be found under the \"Bilagsoversigt\".\r\nDo note this will be created as a draft and have no impact on the books untill booked. Most user will most likely expect the integration to handle the booking.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The values of the voucher",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManuelVoucherCreateModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManuelVoucherReadModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/vouchers/manuel/{guid}": {
      "get": {
        "tags": [
          "ManuelVouchers"
        ],
        "summary": "Get manual voucher",
        "description": "Get the details of a specific manuel voucher that you know the guid of.\r\nIt is not possible to get a list. In case you wish to work with accounting data,\r\nuse the entries endpoints instead.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Identifier of a specific manuel voucher",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManuelVoucherReadModel"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "ManuelVouchers"
        ],
        "summary": "Update manual voucher",
        "description": "Updates a manuel voucher draft. Not possible once booked.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Identifier of the manuel voucher",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Model describing new values for the manuel voucher",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManuelVoucherUpdateModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManuelVoucherReadModel"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ManuelVouchers"
        ],
        "summary": "Delete manual voucher",
        "description": "Deletes a manuel voucher. If it is a draft, this will simply remove that draft. If already booked then it will add an offset entry for the manual voucher, so it will have no effect, but still be present in the bookkeeping, since it is not allowed under danish law to completely remove something, that has already been booked.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Guid of the manuel voucher to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Timestamp version of the voucher, used to validate concurrency",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequiredTimestampObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/{organizationId}/vouchers/manuel/{guid}/book": {
      "post": {
        "tags": [
          "ManuelVouchers"
        ],
        "summary": "Book manual voucher",
        "description": "Books a manuel voucher which will cause the voucher to have effect on the books.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Guid of the voucher to book",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Data used for the booking transaction",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManuelVoucherReadModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/organizations": { },
    "/v1/{organizationId}/organization/verification/is-verified": { },
    "/v1/{organizationId}/organization/verification": { },
    "/v1/{organizationId}/products/{guid}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get product",
        "description": "Gets Product Information for the product with the given Id.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Unique identifier for the Product",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductReadModel"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Products"
        ],
        "summary": "Update product",
        "description": "Update an existing product.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Unique identifier for the product",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Content of the product to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductUpdateModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "delete": {
        "tags": [
          "Products"
        ],
        "summary": "Delete product",
        "description": "Delete a product.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Unique identifier for the product",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/{organizationId}/products": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "List products",
        "description": "Retrieve a list of products for the organization order by UpdatedAt.",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "A comma separated list of fields to include in the response.\r\n            Possible values are Name,ProductNumber,Quantity,Unit,AccountNumber,BaseAmountValue,BaseAmountValueInclVat,TotalAmount,TotalAmountInclVat,ExternalReference,CreatedAt,UpdatedAt and DeletedAt.\r\n            Notice that it's not case sensitive, the property name will be returned the way you request it. If left empty it defaults to Name and ProductGuid.",
            "schema": {
              "type": "string",
              "default": "Name,ProductGuid"
            }
          },
          {
            "name": "freeTextSearch",
            "in": "query",
            "description": "A free text search performed on Name and ProductNumber. Can be left empty.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "queryFilter",
            "in": "query",
            "description": "Filter specific for products. Filtering can be applied to following fields: Name, ProductNumber, ExternalReference.\r\n            See API documentation for filtering format. If left empty no filtering is applied.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "changesSince",
            "in": "query",
            "description": "[Generic Filter Option] Only return products that was created, deleted or updated at or after given time.\r\n            If left empty, this filter will not be applied, and products will be returned regardless of change history.\r\n            The time must be UTC and in the format 'YYYY-MM-DDTHH:mm:ssZ' example: '2015-08-18T06:36:22Z'.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deletedOnly",
            "in": "query",
            "description": "[Generic Filter Option] Only select deleted products. If left empty, will default to false.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The 0-based page number",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The maximum number of items to include in a page. Maximum 1000.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductReadModelDineroCollection"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Create product",
        "description": "Add a new product to the organization. These can then be added to invoices.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Content of the new product",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductCreateModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductCreatedResult"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/vouchers/purchase/creditnotes": {
      "post": {
        "tags": [
          "PurchaseCreditNote"
        ],
        "summary": "Create purchase credit note",
        "description": "Creates a new purchase credit note draft. This will usually apply to a specific purchase voucher, in which case all potentiel payments are handle through the purchase itself where the credit note will be withdrawn from the amount due.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Data to create the credit note from",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseCreditNoteCreateModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/vouchers/purchase/creditnotes/{guid}": {
      "get": {
        "tags": [
          "PurchaseCreditNote"
        ],
        "summary": "Get purchase credit note",
        "description": "Gets a purchase credit note by its guid.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Guid of the purchase credit note to get",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseCreditNoteReadModel"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "PurchaseCreditNote"
        ],
        "summary": "Update purchase credit note",
        "description": "Update a purchase credit note draft.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Guid of the purchase credit note to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Data to update the credit note with",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseCreditNoteUpdateModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedResponseModel"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PurchaseCreditNote"
        ],
        "summary": "Delete purchase credit note",
        "description": "Delete a purchase credit note.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Guid of the credit note to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Timestamp used for version validation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimestampObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/{organizationId}/vouchers/purchase/creditnotes/{guid}/book": {
      "post": {
        "tags": [
          "PurchaseCreditNote"
        ],
        "summary": "Book purchase credit note",
        "description": "Book purchase credit note.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "guid",
            "in": "path",
            "description": "Guid of the credit note to book",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Data used for the booking transaction",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/{organizationId}/purchase-vouchers/{id}/payments": {
      "get": {
        "tags": [
          "PurchaseVoucherCreditPayments"
        ],
        "summary": "Get payments for credit purchase voucher or credit note",
        "description": "Get the payment from a credit purchase voucher or a purchase credit note which is not connected to a seperate purchase.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Guid for the voucher or purchase voucher credit note",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentReadModel"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "PurchaseVoucherCreditPayments"
        ],
        "summary": "Create payment for credit purchase voucher or credit note",
        "description": "Add a payment to a credit purchase voucher or a purchase credit note which is not connected to a seperate purchase.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Guid for the voucher",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The payment details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseVoucherCreditPaymentCreateModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedPaymentResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/purchase-vouchers/{id}/payments/v2": { },
    "/v1/{organizationId}/purchase-vouchers/{id}/payments/calculations": { },
    "/v1/{organizationId}/purchase-vouchers/{id}/payments/{paymentId}/{timestamp}": {
      "delete": {
        "tags": [
          "PurchaseVoucherCreditPayments"
        ],
        "summary": "Delete payment from credit purchase voucher or credit note",
        "description": "Delete a payment from a credit purchase voucher or a purchase credit note which is not connected to a seperate purchase.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Guid for the voucher",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "paymentId",
            "in": "path",
            "description": "The payment guid",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "timestamp",
            "in": "path",
            "description": "Version of the voucher",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedPaymentResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1.1/{organizationId}/vouchers/purchase": {
      "post": {
        "tags": [
          "PurchaseVouchers"
        ],
        "summary": "Create purchase voucher",
        "description": "Creates a new purchase voucher draft. This voucher will have no effect on the accounts untill booked, and can be found under \"Bilagsoversigt\" inside Dinero.\r\nMost users will likely expect this to be booked automatically incase it is created through the API.\r\nDo note that if the credit option is chosen, payments must be added afterwards through the add payment endpoints in the PurchaseVoucherCreditPayment section.\r\nDoes not support AccountTagName.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Data to create the voucher from",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseVoucherCreateModelV2"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseVoucherReadModelV2"
                }
              }
            }
          }
        }
      }
    },
    "/v1.2/{organizationId}/vouchers/purchase": {
      "post": {
        "tags": [
          "PurchaseVouchers"
        ],
        "summary": "Create purchase voucher V2",
        "description": "Creates a new purchase voucher draft. This voucher will have no effect on the accounts untill booked, and can be found under \"Bilagsoversigt\" inside Dinero.\r\nMost users will likely expect this to be booked automatically incase it is created through the API.\r\nDo note that if the credit option is chosen, payments must be added afterwards through the add payment endpoints in the PurchaseVoucherCreditPayment section.\r\nSupports AccountTagName.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Data to create the voucher from",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseVoucherCreateModelV2"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseVoucherReadModelV2"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/vouchers/purchase/fetch": {
      "post": {
        "tags": [
          "PurchaseVouchers"
        ],
        "summary": "Get purchase totals",
        "description": "Fetch a purchase to get totals.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Data to create the voucher from",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseVoucherCreateModelV2"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseVoucherFetchReadModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/vouchers/purchase/similar": {
      "post": {
        "tags": [
          "PurchaseVouchers"
        ],
        "summary": "Get similar purchase",
        "description": "Looks for similar purchase.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Data to create the voucher from",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseVoucherCreateModelV2"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimilarPurchaseVoucherReadModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/vouchers/purchase/{guid}": {
      "get": {
        "tags": [
          "PurchaseVouchers"
        ],
        "summary": "Get purchase voucher",
        "description": "Gets a purchase voucher by its guid.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Guid of the voucher to get",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseVoucherReadModelV2"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "PurchaseVouchers"
        ],
        "summary": "Update purchase voucher",
        "description": "Update a purchase voucher draft, you cannot update booked purchase vouchers.\r\nDoes not support AccountTagName on voucher lines.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Guid of the purchase voucher to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Data to update the purchase voucher with",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseVoucherUpdateModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseVoucherReadModelV2"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "PurchaseVouchers"
        ],
        "summary": "Delete purchase voucher",
        "description": "Delete a purchase voucher. Incase the voucher is a draft, the draft will simply be removed.\r\nIf already booked then it will add an offset entry for the purchase voucher so it will have no effect, but still be present in the bookkeeping, since it is not allowed under danish law to completely remove something, that has already been booked.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Guid of the voucher to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Timestamp used for version validation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimestampObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/{organizationId}/vouchers/purchase/fileguid/{fileGuid}": {
      "get": {
        "tags": [
          "PurchaseVouchers"
        ],
        "summary": "Get purchase draft Guid by fileGuid",
        "description": "Gets purchase voucher Guid by fileGuid.",
        "parameters": [
          {
            "name": "fileGuid",
            "in": "path",
            "description": "FileGuid used to find purchase",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1.1/{organizationId}/vouchers/purchase/{guid}": {
      "put": {
        "tags": [
          "PurchaseVouchers"
        ],
        "summary": "Update purchase voucher v2",
        "description": "Update a purchase voucher draft, you cannot update booked purchase vouchers.\r\nSupports AccountTagName on voucher lines.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Guid of the purchase voucher to update",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Data to update the purchase voucher with",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PurchaseVoucherUpdateModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseVoucherReadModelV2"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/vouchers/purchase/{guid}/book": {
      "post": {
        "tags": [
          "PurchaseVouchers"
        ],
        "summary": "Book purchase voucher",
        "description": "Book a purchase voucher.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "guid of the voucher to book",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Model containing timestamp and optional vouchernumber to use for booking",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PurchaseVoucherReadModelV2"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/vouchers/purchase/{guid}/generate-creditnote": {
      "post": {
        "tags": [
          "PurchaseVouchers"
        ],
        "summary": "Create credit note from purchase voucher",
        "description": "Generate and saves a credit note draft of a given booked purchase voucher.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Guid of the invoice",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Model containing optional timestamp, voucher date and file guid parameters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreditNoteForPurchaseVoucherRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/invoices/{voucherGuid}/reminders": {
      "get": {
        "tags": [
          "Reminders"
        ],
        "summary": "Get reminders",
        "description": "Get all reminders (rykkere) for a specific invoice. There can be up to three reminders per invoice. If you want a specific one of those reminders, look for the Get reminder endpoint.",
        "parameters": [
          {
            "name": "voucherGuid",
            "in": "path",
            "description": "Voucher guid",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "changesSince",
            "in": "query",
            "description": "[Generic Filter Option] Only return mailouts that was created or updated after a given time.\r\n            If left empty, this filter will not be applied, and reminders will be returned regardless of change history.\r\n            The time must be UTC and in the format 'YYYY-MM-DDTHH:mm:ssZ' example: '2015-08-18T06:36:22Z'.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReminderViewModel"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Reminders"
        ],
        "summary": "Add reminder",
        "description": "Add a reminder (rykker) to a specific invoice. The invoice in question must be overdue, in order for a reminder to be added, once 10 days have passed, another reminder can be added.\r\nYou need to follow the rules applied in Renteloven, when adding a reminder. If in doubt, try to use the standards of Dinero. Remeber to book the reminder in order for it to have any effect.",
        "parameters": [
          {
            "name": "voucherGuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReminderCreateModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReminderViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/invoices/{voucherGuid}/reminders/{id}": {
      "get": {
        "tags": [
          "Reminders"
        ],
        "summary": "Get reminder",
        "description": "Get a specific reminder (rykker) as either json or pdf. Define the Accept header of your request to either 'application/json' or 'application/octet-stream'.\r\nYou use the id to specify which reminder you want from an invoice, since there can be up to three per invoice. If you instead want the list of reminders for an invoice, then look for Get Reminders.",
        "parameters": [
          {
            "name": "voucherGuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReminderViewModel"
                }
              },
              "application/octet-stream": { }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Reminders"
        ],
        "summary": "Update reminder",
        "description": "Updates an unbooked reminder, incase you've created a draft you wish to change.",
        "parameters": [
          {
            "name": "voucherGuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReminderCreateModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReminderViewModel"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Reminders"
        ],
        "summary": "Delete reminder",
        "description": "Deletes a reminder. If unbooked this will just remove the draft.\r\nIf already booked then it will add an offset entry for the reminder so it will have no effect, but still be present in the bookkeeping, since it is not allowed under danish law to completely remove something, that has already been booked.",
        "parameters": [
          {
            "name": "voucherGuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReminderDeleteModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/{organizationId}/invoices/{voucherGuid}/reminders/next": {
      "get": {
        "tags": [
          "Reminders"
        ],
        "summary": "Get next reminder",
        "description": "Get the next reminder in line.",
        "parameters": [
          {
            "name": "voucherGuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReminderViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/invoices/{voucherGuid}/reminders/fetch": {
      "post": {
        "tags": [
          "Reminders"
        ],
        "summary": "Fetch reminder",
        "description": "Fetch a reminder matching the specified criteria.",
        "parameters": [
          {
            "name": "voucherGuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReminderFetchModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReminderViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/invoices/{voucherGuid}/reminders/{id}/book": {
      "post": {
        "tags": [
          "Reminders"
        ],
        "summary": "Book reminder",
        "description": "Books a reminder draft that has been added with the Add reminder endpoint. Only a booked reminder will have any effect and be able to be sent out.",
        "parameters": [
          {
            "name": "voucherGuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReminderBookModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReminderViewModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/invoices/{voucherGuid}/reminders/email/template": {
      "get": {
        "tags": [
          "Reminders"
        ],
        "summary": "Get reminder email template",
        "description": "Gets the email template for a reminder. This can be used to preview what will be sent out on the email. These standards can be overwritten during the sending phase.",
        "parameters": [
          {
            "name": "voucherGuid",
            "in": "path",
            "description": "Guid of the invoice",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailoutTemplateReadModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/invoices/{voucherGuid}/reminders/email": {
      "post": {
        "tags": [
          "Reminders"
        ],
        "summary": "Send reminder email",
        "description": "Sends the reminder as an email with a link to a public version of the reminder. Here the default message, receivers etc. can be overwritten. If you want the user to preview these options, use the Get reminder email template endpoint.",
        "parameters": [
          {
            "name": "voucherGuid",
            "in": "path",
            "description": "Guid of the invoice to send",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Model of the email to send",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiMailoutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailSentModel"
                }
              }
            }
          }
        }
      }
    },
    "/v2/{organizationId}/invoices/{voucherGuid}/reminders/email/template": { },
    "/v2/{organizationId}/invoices/{voucherGuid}/reminders/email": { },
    "/v1/{organizationId}/invoices/{voucherGuid}/reminders/{id}/e-reminder": {
      "post": {
        "tags": [
          "Reminders"
        ],
        "summary": "Send reminder with EAN",
        "description": "This simply sends the reminder as an electronic invoice. The customer must be able to receive invoices through either EAN, CVR or another means. This can be added to the contact in question.",
        "parameters": [
          {
            "name": "voucherGuid",
            "in": "path",
            "description": "Guid of the invoice",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Id of the reminder to send",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Parameters for the e-reminder",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EanReminderModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v2/{organizationId}/invoices/{voucherGuid}/reminders/{id}/e-reminder": { },
    "/v1/{organizationId}/{accountingYear}/reports/saldo": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Get saldo balance report",
        "description": "Get a saldobalance report which contains both the result and balance in one report. Can only be fetched for an entire accounting year.",
        "parameters": [
          {
            "name": "accountingYear",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "showZeroAccount",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "showAccountNo",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeSummaryAccount",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "includeLedgerEntries",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "showVatType",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SaldoBalanceReportApiModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/{accountingYear}/reports/result": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Get result report",
        "description": "Get a result report, which contains income and expense accounts. Can only be fetched for an entire accounting year.",
        "parameters": [
          {
            "name": "accountingYear",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "showZeroAccount",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "showAccountNo",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeLedgerEntries",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "showVatType",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "includeSummaryAccount",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResultReportApiModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/{accountingYear}/reports/primo": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Get Primo balance report",
        "description": "Get the primo balance report for an accounting year. The primo balance is the balance the year starts with.",
        "parameters": [
          {
            "name": "accountingYear",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "showZeroAccount",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "showAccountNo",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeSummaryAccount",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "showVatType",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PrimoBalanceApiModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/{accountingYear}/reports/balance": {
      "get": {
        "tags": [
          "Reports"
        ],
        "summary": "Get balance report",
        "description": "Get the balance report, which contains assetts and liabilities. Can only be fetched for an entire accounting year.",
        "parameters": [
          {
            "name": "accountingYear",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "showZeroAccount",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "showAccountNo",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeLedgerEntries",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "showVatType",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "includeSummaryAccount",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BalanceReportApiModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/sales": {
      "get": {
        "tags": [
          "Sales"
        ],
        "summary": "List invoices and credit notes",
        "description": "Retrieve a list of all invoices and credit notes for the organization. This can be a lengthy and demanding process on our end.\r\nTherefore you should not use this endpoint often. Instead use the endpoint with the changesSince filter, to make sure you only get data that has changed since you last got the list.",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date in format 'YYYY-MM-DD' example '2015-01-01'. If you define a start date, you also need to define an end date.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date in format 'YYYY-MM-DD' example '2015-01-01'. If you define an end date, you also need to define a start date.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A comma separated list of fields to include in the response.\r\n            Possible values are:\r\n            Type, Number, Guid, ExternalReference, ContactName, ContactGuid, Date, PaymentDate, Description, Currency, Status, MailOutStatus, LatestMailOutType\r\n            TotalExclVatInDkk, TotalInclVatInDkk, TotalExclVat, TotalInclVat, CreatedAt, UpdatedAt and DeletedAt.\r\n            If null, defaults to Guid,ContactName,Date,Description,Type.\r\n            Notice that it's not case sensitive, the property name will be returned the way you request it.",
            "schema": {
              "type": "string",
              "default": "Guid,ContactName,Date,Description,Type"
            }
          },
          {
            "name": "freeTextSearch",
            "in": "query",
            "description": "A free text search performed on Number, ContactName, Description and TotalInclTax",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "statusFilter",
            "in": "query",
            "description": "Filter on Status. You can choose Draft, Booked, Paid, OverPaid or Overdue. You can add multible filters example: 'Paid,OverPaid,Overdue'. If left empty no filter is applied.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "queryFilter",
            "in": "query",
            "description": "Filtering can be applied to following fields:\r\n            ExternalReference, ContactGuid, Description. See API documentation for filtering format. If left empty no filtering is applied.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "changesSince",
            "in": "query",
            "description": "[Generic Filter Option] Only return credit notes that was created, deleted or updated at or after given time.\r\n            If left empty, this filter will not be applied, and credit notes will be returned regardless of change history.\r\n            The time must be UTC and in the format 'YYYY-MM-DDTHH:mm:ssZ' example: '2015-08-18T06:36:22Z'.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deletedOnly",
            "in": "query",
            "description": "[Generic Filter Option] Only select deleted credit notes. If left empty, will defaults to false.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The 0-based page number",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The maximum number of items to include in a page. Maximum 1000.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A comma separated list of fields to sort on. Possible values are: VoucherNumber, VoucherDate, Status and Contact.",
            "schema": {
              "type": "string",
              "default": "VoucherNumber,VoucherDate"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Sort order. Valid values are ascending and descending. Field Status is always sorted in the order Draft, Overdue, Booked, OverPaid and Paid.",
            "schema": {
              "type": "string",
              "default": "descending"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalesVoucherReadListModelDineroCollection"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/sales/settings": {
      "get": {
        "tags": [
          "Sales"
        ],
        "summary": "Get default settings",
        "description": "Returns a model containing the users default sales voucher setting preferences.\r\nThese are the settings that are applied when the user creates a new invoice in Dinero's web app.\r\nThe user can edit these setting under Settings>InvoiceSettings (Indstillinger>Faktura indstillinger).",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalesVoucherSetttingsModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/sales/creditnotes": {
      "post": {
        "tags": [
          "SalesCreditNotes"
        ],
        "summary": "Create credit note",
        "description": "Create a new draft credit note in Dinero. This credit note can be found in the \"Salg\" section of Dinero. A draft credit note will not count in the accounts untill booked.\r\nThink about using the book and send endpoints after the draft has been created to further automate the booking process for the user. Also note that the date on the credit note, should always be the date the credit note is sent to the customer.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Model of the credit note to save.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SalesCreditNoteCreateModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedResponseModel"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "SalesCreditNotes"
        ],
        "summary": "List credit notes",
        "description": "Retrieve a list of credit notes for the organization. This can return quite a long list of credit notes, consider using the changesSince filter to only return credit notes that have been changed since the last time you fetched the list.",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date in format 'YYYY-MM-DD' example '2015-01-01'. If you define a start date, you also need to define an end date.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date in format 'YYYY-MM-DD' example '2015-01-01'. If you define an end date, you also need to define a start date.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "A comma separated list of fields to include in the response.\r\n            Possible values are:\r\n            Number, Guid, ExternalReference, ContactName, ContactGuid, Date, PaymentDate, Description, Currency, Status, MailOutStatus,\r\n            TotalExclVatInDkk, TotalInclVatInDkk, TotalExclVat, TotalInclVat, CreatedAt, UpdatedAt and DeletedAt.\r\n            If null, defaults to Guid,ContactName,Date,Description,Type.\r\n            Notice that it's not case sensitive, the property name will be returned the way you request it.",
            "schema": {
              "type": "string",
              "default": "Guid,ContactName,Date,Description,Type"
            }
          },
          {
            "name": "freeTextSearch",
            "in": "query",
            "description": "A free text search performed on Number, ContactName, Description and TotalInclTax",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "statusFilter",
            "in": "query",
            "description": "Filter on Status. You can choose Draft, Booked, Paid, OverPaid or Overdue. You can add multible filters example: 'Paid,OverPaid,Overdue'. If left empty no filter is applied.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "queryFilter",
            "in": "query",
            "description": "Filtering can be applied to following fields:\r\n            ExternalReference, ContactGuid, Description. See API documentation for filtering format. If left empty no filtering is applied.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "changesSince",
            "in": "query",
            "description": "[Generic Filter Option] Only return credit notes that was created, deleted or updated at or after given time.\r\n            If left empty, this filter will not be applied, and credit notes will be returned regardless of change history.\r\n            The time must be UTC and in the format 'YYYY-MM-DDTHH:mm:ssZ' example: '2015-08-18T06:36:22Z'.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deletedOnly",
            "in": "query",
            "description": "[Generic Filter Option] Only select deleted credit notes. If left empty, will defaults to false.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The 0-based page number",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The maximum number of items to include in a page. Maximum 1000.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A comma separated list of fields to sort on. Possible values are: VoucherNumber, VoucherDate, Status and Contact.",
            "schema": {
              "type": "string",
              "default": "VoucherNumber,VoucherDate"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Sort order. Valid values are ascending and descending. Field Status is always sorted in the order Draft, Overdue, Booked, OverPaid and Paid.",
            "schema": {
              "type": "string",
              "default": "descending"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalesVoucherReadListModelDineroCollection"
                }
              }
            }
          }
        }
      }
    },
    "/v1.2/{organizationId}/sales/creditnotes/{guid}": {
      "put": {
        "tags": [
          "SalesCreditNotes"
        ],
        "summary": "Update credit note",
        "description": "Update an existing credit note. The credit note cannot be updated if booked. Note that the put request per rest standard will update the entire credit note and not only the fields you send.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Unique identifier for the credit note",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Content of the credit note to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SalesCreditNoteUpdateModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdatedResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/sales/creditnotes/{guid}": {
      "delete": {
        "tags": [
          "SalesCreditNotes"
        ],
        "summary": "Delete credit note",
        "description": "Delete credit note. The credit note should not be deleted if booked. In that case a new invoice would be the correct way to cancel the credit note.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Unique identifier for the credit note",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "optional timestamp to verify version before deletion",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimestampObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      },
      "get": {
        "tags": [
          "SalesCreditNotes"
        ],
        "summary": "Get credit note",
        "description": "Get credit note as json or pdf. Define the Accept header of your request to either 'application/json' or 'application/octet-stream'. PDF's can only be generated from booked credit notes.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Guid of the credit note",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalesCreditNoteReadModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/sales/creditnotes/{guid}/book": {
      "post": {
        "tags": [
          "SalesCreditNotes"
        ],
        "summary": "Book credit note",
        "description": "Book credit note. Booking means actually posting the credit note to the accounts. A booked credit note can also be sent via email, sms or as an e-credit note.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Guid of the credit note to book",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Data used for the booking transaction",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceReadModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/sales/creditnotes/fetch": {
      "post": {
        "tags": [
          "SalesCreditNotes"
        ],
        "summary": "Get credit note totals",
        "description": "Fetch a credit note to get total and line sums calculations.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Model of the credit note.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SalesCreditNoteCreateFetchModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalesCreditNoteFetchReadModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/sales/creditnotes/{guid}/email/template": {
      "get": {
        "tags": [
          "SalesCreditNotes"
        ],
        "summary": "Get credit note email template",
        "description": "Gets the email template for a credit note. This can be used to preview what will be sent out on the email. These standards can be overwritten during the sending phase.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Guid of the credit note to send",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailoutTemplateReadModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/sales/creditnotes/{guid}/email": {
      "post": {
        "tags": [
          "SalesCreditNotes"
        ],
        "summary": "Send credit note",
        "description": "Send an email with link to a public version of the credit note where it can be printed or downloaded as a pdf. The credit note must be booked.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Guid of the credit note to send",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Model of the email to send",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiMailoutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailSentModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/sales/creditnotes/{guid}/pdf": {
      "get": {
        "tags": [
          "SalesCreditNotes"
        ],
        "summary": "Get credit note as pdf",
        "description": "Get a creditnote as PDF",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Guid of the booked credit note to create a PDF from",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/{organizationId}/sales/creditnotes/{guid}/e-creditNote": {
      "post": {
        "tags": [
          "SalesCreditNotes"
        ],
        "summary": "Send credit note with EAN",
        "description": "Send an e-credit note to an EAN customer. This is a public system for electronic invoicing.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Guid of the credit note to send",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "parameters for the Ean invoice",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EanSendModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v2/{organizationId}/sales/creditnotes/{guid}/e-creditNote": { },
    "/v1/{organizationId}/sales/creditnotes/{guid}/mailouts": {
      "get": {
        "tags": [
          "SalesCreditNotes"
        ],
        "summary": "List mailouts",
        "description": "List the mailouts for a specific credit note",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "changesSince",
            "in": "query",
            "description": "[Generic Filter Option] Only return mailouts that was created or updated after a given time.\r\n            If left empty, this filter will not be applied, and mailouts will be returned regardless of change history.\r\n            The time must be UTC and in the format 'YYYY-MM-DDTHH:mm:ssZ' example: '2015-08-18T06:36:22Z'.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoucherMailoutReadModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/sales/creditnotes/{guid}/payments": {
      "post": {
        "tags": [
          "SalesCreditNotes"
        ],
        "summary": "Add payment to creditnote",
        "description": "Create a payment for an creditnote. Payments can only be added to a booked creditnote.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Guid of the creditnote",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The payment details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentCreateModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedPaymentResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "SalesCreditNotes"
        ],
        "summary": "Get payments for creditnote",
        "description": "Get the payments for an creditnote",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Guid of the creditnote",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoicePaymentsModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/sales/creditnotes/{guid}/payments/{paymentGuid}": {
      "delete": {
        "tags": [
          "SalesCreditNotes"
        ],
        "summary": "Delete payment from creditnote",
        "description": "Delete a payment from an creditnote. Only booked creditnote can have payments.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Guid of the creditnote",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "paymentGuid",
            "in": "path",
            "description": "The payment guid",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Version of the invoice",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimestampObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedPaymentResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/settings/access": { },
    "/v1/{organizationId}/sms/validate": { },
    "/v1/{organizationId}/sms/{voucherGuid}/send-sms": {
      "post": {
        "tags": [
          "Sms"
        ],
        "summary": "Send sms with link to invoice",
        "description": "Sends a specific invoice with a link in an SMS to the customer. An invoice must be booked, before it can be sent. SMS has special terms and usage will be invoiced. By using our API, you accept these <a href=\"https://dinero.dk/sikkerhed/retningslinjer-og-vilkaar-for-api-partnere/\" target=\"_blank\">terms and conditions</a>.",
        "parameters": [
          {
            "name": "voucherGuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SmsSendModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/{organizationId}/tradeoffers": {
      "post": {
        "tags": [
          "TradeOffers"
        ],
        "summary": "Create trade offer",
        "description": "Creates a draft of a trade offer(tilbud). The trade offer will not have any effect on bookkeeping, and as such cannot be booked like other voucher types. The trade offer is binding under danish law though, so make sure you fill it out with the correct information.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Model of the trade offer to save.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TradeOfferCreateModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedResponseModel"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "TradeOffers"
        ],
        "summary": "List trade offers",
        "description": "Retrieve a list of trade offers for the organization. This can be used as an overview or to get the id of a specific trade offer.",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "A comma separated list of fields to include in the response.\r\n            Possible values are:\r\n            Number, Guid, TimeStamp, ContactName, ContactGuid, Address, Date, Comment, Description, ExternalReference, Language, Currency,\r\n            TotalExclVat, TotalVatableAmount, TotalInclVat, TotalNonVatableAmount, TotalVat, HasGeneratedAnyVouchers, Status, MailOutStatus, LatestMailOutType\r\n            CreatedAt, UpdatedAt and DeletedAt. If left empty it defaults to guid, contactName, date, description,  Note that ProductLines and TotalLines are NOT available when fetching a list.\r\n             Notice that it's not case sensitive, the property name will be returned the way you request it. If null, defaults to 'guid,contactName,date,description' (notice small start letter).",
            "schema": {
              "type": "string",
              "default": "guid,contactName,date,description"
            }
          },
          {
            "name": "queryFilter",
            "in": "query",
            "description": "Filter specific for trade offers. Filtering can be applied to following fields:\r\n            ExternalReference, ContactName, Address, Comment, Description, HasGeneratedAnyVouchers, Currency, Date and Number.\r\n            See API documentation for filtering format.\r\n            If left empty no filtering is applied.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "changesSince",
            "in": "query",
            "description": "[Generic Filter Option] Only return trade offers that was created, deleted or updated at or after given time.\r\n            If left empty, this filter will not be applied, and trade offers will be returned regardless of change history.\r\n            The time must be UTC and in the format 'YYYY-MM-DDTHH:mm:ssZ' example: '2015-08-18T06:36:22Z'.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deletedOnly",
            "in": "query",
            "description": "[Generic Filter Option] Only select deleted trade offers. If left empty, will defaults to false.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "freeTextSearch",
            "in": "query",
            "description": "A free text search performed on Number, ContactName, Description and TotalInclTax",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The 0-based page number",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The maximum number of items to include in a page. Maximum 1000.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "A comma separated list of fields to sort on. Possible values are: TradeOfferNumber, TradeOfferDate, Status and ContactName.",
            "schema": {
              "type": "string",
              "default": "TradeOfferNumber"
            }
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "Valid values are ascending or descending.",
            "schema": {
              "type": "string",
              "default": "descending"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradeOfferReadModelDineroCollection"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/tradeoffers/fetch": {
      "post": {
        "tags": [
          "TradeOffers"
        ],
        "summary": "Get trade offer totals",
        "description": "Fetch a trade offer to get total and line sums.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Model of the trade offer.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TradeOfferCreateFetchModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradeOfferFetchReadModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/tradeoffers/{guid}": {
      "get": {
        "tags": [
          "TradeOffers"
        ],
        "summary": "Get trade offer as json or pdf",
        "description": "Get tradeoffer as json or pdf.\r\nDefine the Accept header of your request to either 'application/json' or 'application/octet-stream'.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Guid of the tradeoffer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TradeOfferReadModel"
                }
              },
              "application/octet-stream": { }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TradeOffers"
        ],
        "summary": "Delete trade offer",
        "description": "Delete trade offer. Please note that already accepted trade offers should not be deleted, as these are binding as per danish legislation.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Unique identifier for the trade offer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "optional timestamp to verify version before deletion",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimestampObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/{organizationId}/tradeoffers/{guid}/email/template": {
      "get": {
        "tags": [
          "TradeOffers"
        ],
        "summary": "Get trade offer email template",
        "description": "Gets the email template for a trade offer. This can be used to preview what will be sent out on the email. These standards can be overwritten during the sending phase.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Guid of the trade offer to send",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailoutTemplateReadModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/tradeoffers/{guid}/email": {
      "post": {
        "tags": [
          "TradeOffers"
        ],
        "summary": "Send trade offer email",
        "description": "Sends the trade offer as an email with a link to a public version of the reminder. Here the default message, receivers etc. can be overwritten. If you want the user to preview these options, use the Get reminder email template endpoint.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Guid of the tradeoffer to send",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Model of the email to send",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiMailoutModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailSentModel"
                }
              }
            }
          }
        }
      }
    },
    "/v2/{organizationId}/tradeoffers/{guid}/email/template": { },
    "/v2/{organizationId}/tradeoffers/{guid}/email": { },
    "/v1/{organizationId}/tradeoffers/{guid}/generate-invoice": {
      "post": {
        "tags": [
          "TradeOffers"
        ],
        "summary": "Create invoice from trade offer",
        "description": "Generate an invoice draft of a given trade offer. (OBS Generating a invoice of the trade offer, will trigger a new timestamp on the trade offer). Also do note that the invoice must be booked to have any effect on the books, and be able to be sent.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Guid of the trade offer",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Optional timestamp. If given validate that you got the latest version.\r\n            This can be used to ensure that the trade offer has not been changed since you last fetched it.\r\n            Defaults to latest version of the TradeOffer.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimestampObject"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1.2/{organizationId}/tradeoffers/{guid}": {
      "put": {
        "tags": [
          "TradeOffers"
        ],
        "summary": "Update trade offer",
        "description": "Update an existing trade offer. Due to danish legislation, you should not update an already accepted or rejected trade offer, instead you should create a new one.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "Unique identifier for the trade offer information",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Content of the trade offer to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TradeOfferUpdateModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdatedResponseModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/tradeoffers/{guid}/mailouts": {
      "get": {
        "tags": [
          "TradeOffers"
        ],
        "summary": "List mailouts",
        "description": "List the mailouts for a specific trade offer.",
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "changesSince",
            "in": "query",
            "description": "[Generic Filter Option] Only return mailouts that was created or updated after a given time.\r\n            If left empty, this filter will not be applied, and mailouts will be returned regardless of change history.\r\n            The time must be UTC and in the format 'YYYY-MM-DDTHH:mm:ssZ' example:'2015-08-18T06:36:22Z'.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeSms",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoucherMailoutReadModel"
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/unifiedvouchers": { },
    "/v1/{organizationId}/vatTypes": {
      "get": {
        "tags": [
          "VatTypes"
        ],
        "summary": "List vat types",
        "description": "Gets a list of all of the organization's VAT types. Most organizations will have the same, although users can create their own partial purchase vats.",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VatTypeReadModel"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/{organizationId}/webhooks/subscribe": {
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Subscribe to webhook",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Event id of webhook to subscribe to and url for webhook destination",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscribeToWebhookModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/{organizationId}/webhooks/unsubscribe": {
      "delete": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Unsubscribe specific webhook event",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Event id of webhook to unsubscribe",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnsubscribeFromWebhookModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/{organizationId}/webhooks/subscriptions": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Get active webhook subscriptions for an organization",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/{organizationId}/webhooks/events": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Get list of available webhook events to subscribe to for an organization",
        "parameters": [
          {
            "name": "organizationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccountCreateModel": {
        "required": [
          "name",
          "number",
          "vatCode"
        ],
        "type": "object",
        "properties": {
          "number": {
            "type": "integer",
            "description": "Account number",
            "format": "int32",
            "example": 1020
          },
          "publicStandardNumber": {
            "type": "integer",
            "description": "Account number mapped to the public standard account",
            "format": "int32",
            "nullable": true,
            "example": 1010
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "Human friendly name of the account",
            "example": "Sales of specific goods with VAT"
          },
          "vatCode": {
            "minLength": 1,
            "type": "string",
            "description": "Vat code for the selected account number. The value should be an existing VAT code e.g. U25, I25, UVC, KUNS etc.\r\nThe account VAT type can be suppressed by providing the value \"none\"",
            "example": "U25"
          }
        },
        "additionalProperties": false,
        "description": "Model for creating a new ledger item"
      },
      "AccountingYearReadModel": {
        "required": [
          "salarySumTaxStateEnum"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Accounting year name",
            "nullable": true,
            "example": "2022"
          },
          "fromDate": {
            "type": "string",
            "description": "Accounting Year Start date",
            "nullable": true,
            "example": "2022-01-01"
          },
          "toDate": {
            "type": "string",
            "description": "Accounting Year End data",
            "nullable": true,
            "example": "2022-12-31"
          },
          "salarySumTaxStateEnum": {
            "$ref": "#/components/schemas/SalarySumTaxStateEnum"
          }
        },
        "additionalProperties": false,
        "description": "Accounting Year"
      },
      "AddressPlacement": {
        "enum": [
          "Right",
          "Left"
        ],
        "type": "string",
        "description": "Determine where the address is placed"
      },
      "ApiMailoutModel": {
        "required": [
          "shouldAddTrustPilotEmailAsBcc"
        ],
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "Optional timestamp of version.\r\nIf given validate that you got the latest version.\r\nThis can be used to ensure that the voucher has not been changed since you last fetched it.\r\nDefaults to latest version.",
            "nullable": true,
            "example": "00000000020A5EA8"
          },
          "sender": {
            "type": "string",
            "description": "Sender email. Defaults to organization email if left empty.",
            "nullable": true,
            "example": "my@company-email.dk"
          },
          "ccToSender": {
            "type": "boolean",
            "description": "Set to true, if copy should be send to sender. Defaults to false.",
            "nullable": true,
            "example": true
          },
          "receiver": {
            "type": "string",
            "description": "Receiver email. Defaults to contact email if left empty. If left empty, the contact needs to have an email, otherwise it will cause a bad request.\r\nFor multiple receivers a comma separated list is also allowed. Fx 'customer@dinero.dk,extrareceiver@dinero.dk'",
            "nullable": true,
            "example": "my@customer-email.dk"
          },
          "subject": {
            "type": "string",
            "description": "The subject of the email. Defaults to '{Type} {Number}' (according to the selected invoice language). Fx 'Invoice 3', 'Credit note 4' or 'Offer 12'.",
            "nullable": true,
            "example": "Email subject."
          },
          "message": {
            "type": "string",
            "description": "Body of the email. If set, then it must contain the tag: [link-to-pdf], so that a link to the pdf can be included.\r\nIf left empty, defaults to template created in dinero.",
            "nullable": true,
            "example": "Here is my personal text. Be sure to include a link tag! Link to PDF: [link-to-pdf]"
          },
          "addVoucherAsPdfAttachment": {
            "type": "boolean",
            "description": "Defaults to invoice settings (Fakturaindstillinger > Standard udsendelses-indstillinger). If true, the voucher will be attached to the email as pdf.",
            "nullable": true,
            "example": true
          },
          "shouldAddTrustPilotEmailAsBcc": {
            "type": "boolean",
            "description": "Defaults to false. Determines if TrustPilotEmail should be added as BCC or not.",
            "example": true
          }
        },
        "additionalProperties": false,
        "description": "Model for sending an email for an invoice."
      },
      "ApiMailoutModelV2": {
        "required": [
          "sendAsSms",
          "shouldAddTrustPilotEmailAsBcc"
        ],
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "Optional timestamp of version.\r\nIf given validate that you got the latest version.\r\nThis can be used to ensure that the voucher has not been changed since you last fetched it.\r\nDefaults to latest version.",
            "nullable": true,
            "example": "00000000020A5EA8"
          },
          "sender": {
            "type": "string",
            "description": "Sender email. Defaults to organization email if left empty.",
            "nullable": true,
            "example": "my@company-email.dk"
          },
          "ccToSender": {
            "type": "boolean",
            "description": "Set to true, if copy should be send to sender. Defaults to false.",
            "nullable": true,
            "example": true
          },
          "receiver": {
            "type": "string",
            "description": "Receiver email. Defaults to contact email if left empty. If left empty, the contact needs to have an email, otherwise it will cause a bad request.\r\nFor multiple receivers a comma separated list is also allowed. Fx 'customer@dinero.dk,extrareceiver@dinero.dk'",
            "nullable": true,
            "example": "my@customer-email.dk"
          },
          "subject": {
            "type": "string",
            "description": "The subject of the email. Defaults to '{Type} {Number}' (according to the selected invoice language). Fx 'Invoice 3', 'Credit note 4' or 'Offer 12'.",
            "nullable": true,
            "example": "Email subject."
          },
          "message": {
            "type": "string",
            "description": "Body of the email. If set, then it must contain the tag: [link-to-pdf], so that a link to the pdf can be included.\r\nIf left empty, defaults to template created in dinero.",
            "nullable": true,
            "example": "Here is my personal text. Be sure to include a link tag! Link to PDF: [link-to-pdf]"
          },
          "addVoucherAsPdfAttachment": {
            "type": "boolean",
            "description": "Defaults to invoice settings (Fakturaindstillinger > Standard udsendelses-indstillinger). If true, the voucher will be attached to the email as pdf.",
            "nullable": true,
            "example": true
          },
          "shouldAddTrustPilotEmailAsBcc": {
            "type": "boolean",
            "description": "Defaults to false. Determines if TrustPilotEmail should be added as BCC or not.",
            "example": true
          },
          "sendAsSms": {
            "type": "boolean",
            "description": "Indicates whether to send an SMS aswell as the email, SmsReceiverPhoneNumber must be set, and content cannot be more than 1000 characters, and must not include links"
          },
          "smsReceiverPhoneNumber": {
            "type": "string",
            "description": "Phone number of the receiver, only phone numbers from Denmark, The Faroe Islands, and Greenland are allowed",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Model for sending an email for an invoice."
      },
      "AuthorizationViewModel": {
        "type": "object",
        "properties": {
          "authUrl": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BalanceReportApiModel": {
        "required": [
          "accountNumber",
          "amount"
        ],
        "type": "object",
        "properties": {
          "accountName": {
            "type": "string",
            "description": "Account name",
            "nullable": true,
            "example": "Omsætning"
          },
          "accountNumber": {
            "type": "integer",
            "description": "Account number",
            "format": "int32",
            "example": 1300
          },
          "amount": {
            "type": "number",
            "description": "Total amount",
            "format": "double",
            "example": 0
          }
        },
        "additionalProperties": false
      },
      "BookModel": {
        "required": [
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "number": {
            "type": "integer",
            "description": "Optional. If specified, the voucher will be created with this number. If the number is already taken the booking of the voucher will fail.",
            "format": "int64",
            "nullable": true,
            "example": 42
          },
          "timestamp": {
            "minLength": 1,
            "type": "string",
            "description": "Timestamp to validate against. This is a safety measure to ensure that an API partner is only making changes to the latest version of the entity.\r\nThe timestamp is generated on Dinero's server every time the entity is updated, and is returned as a part of CreatedResponse and UpdatedResponse. It's also available on the entity itself.\r\nIf you get a timestamp outdated exception (error code 58), you will need to get the latest version of the entity and use its timestamp.",
            "example": "00000000020A5EA8"
          }
        },
        "additionalProperties": false,
        "description": "Timestamp container"
      },
      "CompanyTypeCodeViewModel": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContactCreateModel": {
        "required": [
          "countryKey",
          "isMember",
          "isPerson",
          "name",
          "useCvr"
        ],
        "type": "object",
        "properties": {
          "externalReference": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "Your external id\r\nThis can be used for ID'ing in external apps/services e.g. a web shop.\r\nThe maximum length is 128 characters",
            "nullable": true,
            "example": "Fx. WebShopID:42"
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "Name of the contact person or the company name",
            "example": "John Doe"
          },
          "street": {
            "type": "string",
            "description": "Street name",
            "nullable": true,
            "example": "Main road 42"
          },
          "zipCode": {
            "type": "string",
            "description": "Zip code",
            "nullable": true,
            "example": "2300"
          },
          "city": {
            "type": "string",
            "description": "City",
            "nullable": true,
            "example": "Copenhagen S"
          },
          "countryKey": {
            "minLength": 1,
            "type": "string",
            "description": "Country key\r\nTwo character string e.g. DK for Denmark, DE for Germany or SE for Sweden",
            "example": "DK"
          },
          "phone": {
            "type": "string",
            "description": "Phone number",
            "nullable": true,
            "example": "+45 99 99 99 99"
          },
          "email": {
            "type": "string",
            "description": "Email address",
            "nullable": true,
            "example": "test@test.com"
          },
          "webpage": {
            "type": "string",
            "description": "Webpage address",
            "nullable": true,
            "example": "test.com"
          },
          "attPerson": {
            "type": "string",
            "description": "Name of the att. person in cases here the contact is a company. If IsPerson this should be NULL.",
            "nullable": true,
            "example": "Jane Doe"
          },
          "vatNumber": {
            "type": "string",
            "description": "VAT number. If IsPerson this should be NULL.\r\nThis can be used for digital invoicing.",
            "nullable": true,
            "example": "12345674"
          },
          "eanNumber": {
            "type": "string",
            "description": "EAN number. This number is used for digital invoicing. If IsPerson this should be NULL.",
            "nullable": true,
            "example": "1111000022223"
          },
          "seNumber": {
            "type": "string",
            "description": "SE number. The number is used for digital invoicing. If IsPerson this should be NULL.",
            "nullable": true,
            "example": "12345678"
          },
          "pNumber": {
            "type": "string",
            "description": "P number. The number is used for digital invoicing. If IsPerson this should be NULL.",
            "nullable": true,
            "example": "1234567890"
          },
          "paymentConditionType": {
            "type": "string",
            "description": "Type of the payment condition for the contact. Netto, NettoCash or CurrentMonthOut. If NettoCash, then PaymentConditionNumberOfDays should be null. Defaults to type specified in voucher settings.",
            "nullable": true,
            "example": "Netto"
          },
          "paymentConditionNumberOfDays": {
            "type": "integer",
            "description": "Number of days for payment for the contact. E.g. that the contact has 7 days until\r\npayment has to be made. This field depends on PaymentConditionType. If left empty, defaults to the number of days specified in voucher settings.",
            "format": "int32",
            "nullable": true,
            "example": 8
          },
          "isPerson": {
            "type": "boolean",
            "description": "Boolean to indicate whether the contact is a private person or a company. If true, the contact is a person.",
            "example": false
          },
          "isMember": {
            "type": "boolean",
            "description": "Boolean to indicate whether the contact is a member. If true, the contact is a member else a private person of a company depending on IsPerson.\r\nOnly usable by unions.",
            "example": false
          },
          "memberNumber": {
            "type": "string",
            "description": "A membership number used if the contact is a member.\r\nOnly usable by unions.",
            "nullable": true,
            "example": "A-123"
          },
          "useCvr": {
            "type": "boolean",
            "description": "Boolean to indicate whether the contacts name and address should be updated with data from CVR.",
            "example": false
          },
          "companyTypeKey": {
            "type": "string",
            "description": "String with the key of the company type. The following keys are allowed: EmptyCompanyType,\r\nSoleProprietorship, PrivateLimitedCompany, PublicLimitedCompany, GeneralPartnership,\r\nLimitedPartnership, LimitedLiabilityCooperative, LimitedLiabilityVoluntaryAssociation,\r\nLimitedLiabilityCompany, EntreprenurLimitedCompany, Union, VoluntaryUnion, SmallPersonallyOwnedCompany,\r\nTrustFund and Others.",
            "nullable": true,
            "example": "PrivateLimitedCompany"
          },
          "invoiceMailOutOptionKey": {
            "type": "string",
            "description": "Preferred e-invoicing method.\r\nThe possible values are:\r\nVAT (cvr-nummer), GLN (ean- / gln-nummer), SE (se-nummer), P (p-nummer) and null if the contact is not a company or if nothing is preferred.\r\nEach field requires that the selected mail out number is present - e.g. vat number should be present when InvoiceMailOutOptionKey is set to VAT.",
            "nullable": true,
            "example": "VAT, GLN, SE, P, null "
          },
          "contactGuid": {
            "type": "string",
            "description": "Optional guid for the contact. If not set the system will create a guid returned in the response.",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Contact information for either a contact person or a company"
      },
      "ContactCreatedResult": {
        "required": [
          "contactGuid"
        ],
        "type": "object",
        "properties": {
          "contactGuid": {
            "type": "string",
            "description": "The guid of the contact",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "The response of succesfull contact creation"
      },
      "ContactNoteCreateModel": {
        "required": [
          "text"
        ],
        "type": "object",
        "properties": {
          "text": {
            "minLength": 1,
            "type": "string",
            "description": "The body text of the note"
          }
        },
        "additionalProperties": false,
        "description": "Note on a contact"
      },
      "ContactNoteReadModel": {
        "required": [
          "id",
          "noteDate",
          "text"
        ],
        "type": "object",
        "properties": {
          "text": {
            "minLength": 1,
            "type": "string",
            "description": "The body text of the note"
          },
          "id": {
            "type": "string",
            "description": "Guid of the note",
            "format": "uuid"
          },
          "noteDate": {
            "type": "string",
            "description": "Date of which the note was created",
            "format": "date-time"
          },
          "authorName": {
            "type": "string",
            "description": "Name of the author of the note",
            "nullable": true
          },
          "authorEmail": {
            "type": "string",
            "description": "Email of the author of the note",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "description": "Time at which the note was created",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "description": "Time at which the note was last updated",
            "format": "date-time",
            "nullable": true
          },
          "deletedAt": {
            "type": "string",
            "description": "Time at which the note as deleted",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Note on a contact"
      },
      "ContactNoteReadModelDineroCollection": {
        "required": [
          "pagination"
        ],
        "type": "object",
        "properties": {
          "collection": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactNoteReadModel"
            },
            "description": "Collection containing the result of the request.",
            "nullable": true
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationDetails"
          }
        },
        "additionalProperties": false
      },
      "ContactNoteUpdateModel": {
        "required": [
          "text"
        ],
        "type": "object",
        "properties": {
          "text": {
            "minLength": 1,
            "type": "string",
            "description": "The body text of the note"
          }
        },
        "additionalProperties": false,
        "description": "Note on a contact"
      },
      "ContactReadModel": {
        "required": [
          "contactGuid",
          "countryKey",
          "isCreditor",
          "isDebitor",
          "isMember",
          "isPerson",
          "name",
          "useCvr"
        ],
        "type": "object",
        "properties": {
          "externalReference": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "Your external id\r\nThis can be used for ID'ing in external apps/services e.g. a web shop.\r\nThe maximum length is 128 characters",
            "nullable": true,
            "example": "Fx. WebShopID:42"
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "Name of the contact person or the company name",
            "example": "John Doe"
          },
          "street": {
            "type": "string",
            "description": "Street name",
            "nullable": true,
            "example": "Main road 42"
          },
          "zipCode": {
            "type": "string",
            "description": "Zip code",
            "nullable": true,
            "example": "2300"
          },
          "city": {
            "type": "string",
            "description": "City",
            "nullable": true,
            "example": "Copenhagen S"
          },
          "countryKey": {
            "minLength": 1,
            "type": "string",
            "description": "Country key\r\nTwo character string e.g. DK for Denmark, DE for Germany or SE for Sweden",
            "example": "DK"
          },
          "phone": {
            "type": "string",
            "description": "Phone number",
            "nullable": true,
            "example": "+45 99 99 99 99"
          },
          "email": {
            "type": "string",
            "description": "Email address",
            "nullable": true,
            "example": "test@test.com"
          },
          "webpage": {
            "type": "string",
            "description": "Webpage address",
            "nullable": true,
            "example": "test.com"
          },
          "attPerson": {
            "type": "string",
            "description": "Name of the att. person in cases here the contact is a company. If IsPerson this should be NULL.",
            "nullable": true,
            "example": "Jane Doe"
          },
          "vatNumber": {
            "type": "string",
            "description": "VAT number. If IsPerson this should be NULL.\r\nThis can be used for digital invoicing.",
            "nullable": true,
            "example": "12345674"
          },
          "eanNumber": {
            "type": "string",
            "description": "EAN number. This number is used for digital invoicing. If IsPerson this should be NULL.",
            "nullable": true,
            "example": "1111000022223"
          },
          "seNumber": {
            "type": "string",
            "description": "SE number. The number is used for digital invoicing. If IsPerson this should be NULL.",
            "nullable": true,
            "example": "12345678"
          },
          "pNumber": {
            "type": "string",
            "description": "P number. The number is used for digital invoicing. If IsPerson this should be NULL.",
            "nullable": true,
            "example": "1234567890"
          },
          "paymentConditionType": {
            "type": "string",
            "description": "Type of the payment condition for the contact. Netto, NettoCash or CurrentMonthOut. If NettoCash, then PaymentConditionNumberOfDays should be null. Defaults to type specified in voucher settings.",
            "nullable": true,
            "example": "Netto"
          },
          "paymentConditionNumberOfDays": {
            "type": "integer",
            "description": "Number of days for payment for the contact. E.g. that the contact has 7 days until\r\npayment has to be made. This field depends on PaymentConditionType. If left empty, defaults to the number of days specified in voucher settings.",
            "format": "int32",
            "nullable": true,
            "example": 8
          },
          "isPerson": {
            "type": "boolean",
            "description": "Boolean to indicate whether the contact is a private person or a company. If true, the contact is a person.",
            "example": false
          },
          "isMember": {
            "type": "boolean",
            "description": "Boolean to indicate whether the contact is a member. If true, the contact is a member else a private person of a company depending on IsPerson.\r\nOnly usable by unions.",
            "example": false
          },
          "memberNumber": {
            "type": "string",
            "description": "A membership number used if the contact is a member.\r\nOnly usable by unions.",
            "nullable": true,
            "example": "A-123"
          },
          "useCvr": {
            "type": "boolean",
            "description": "Boolean to indicate whether the contacts name and address should be updated with data from CVR.",
            "example": false
          },
          "companyTypeKey": {
            "type": "string",
            "description": "String with the key of the company type. The following keys are allowed: EmptyCompanyType,\r\nSoleProprietorship, PrivateLimitedCompany, PublicLimitedCompany, GeneralPartnership,\r\nLimitedPartnership, LimitedLiabilityCooperative, LimitedLiabilityVoluntaryAssociation,\r\nLimitedLiabilityCompany, EntreprenurLimitedCompany, Union, VoluntaryUnion, SmallPersonallyOwnedCompany,\r\nTrustFund and Others.",
            "nullable": true,
            "example": "PrivateLimitedCompany"
          },
          "invoiceMailOutOptionKey": {
            "type": "string",
            "description": "Preferred e-invoicing method.\r\nThe possible values are:\r\nVAT (cvr-nummer), GLN (ean- / gln-nummer), SE (se-nummer), P (p-nummer) and null if the contact is not a company or if nothing is preferred.\r\nEach field requires that the selected mail out number is present - e.g. vat number should be present when InvoiceMailOutOptionKey is set to VAT.",
            "nullable": true,
            "example": "VAT, GLN, SE, P, null "
          },
          "contactGuid": {
            "type": "string",
            "description": "Our Guid",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "description": "Time at which the Contact was created",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "description": "Time at which the Contact was last updated",
            "format": "date-time",
            "nullable": true
          },
          "deletedAt": {
            "type": "string",
            "description": "Time at which the Contact was deleted",
            "format": "date-time",
            "nullable": true
          },
          "isDebitor": {
            "type": "boolean",
            "description": "Is the contact a debitor"
          },
          "isCreditor": {
            "type": "boolean",
            "description": "Is the contact a creditor"
          },
          "companyStatus": {
            "type": "string",
            "description": "Possible values are unknown, normal, active, withoutLegalEffect, underVoluntaryLiquidation, duringReconstruction, underBankruptcy, underCompulsoryResolution,\r\ndissolvedAfterBankruptcy, forciblyDissolved, dissolvedAfterVoluntaryLiquidation, dissolvedAfterDeclaration, underReassumption, deleted, dissolved,\r\ndissolvedAfterFusion, dissolvedAfterDemerger, underCreation, dissolvedAfterOfficeBorderRelocation, dissolvedAfterOfficeBorderFusion and ceasedTrading",
            "nullable": true
          },
          "vatRegionKey": {
            "type": "string",
            "description": "The country of the contact is placed in this region.\r\nDifferent danish VAT rules apply in these regions.\r\nPossible values are DK, EU and World.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Contact information for either a contact person or a company"
      },
      "ContactReadModelDineroCollection": {
        "required": [
          "pagination"
        ],
        "type": "object",
        "properties": {
          "collection": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactReadModel"
            },
            "description": "Collection containing the result of the request.",
            "nullable": true
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationDetails"
          }
        },
        "additionalProperties": false
      },
      "ContactStateOfAccount": {
        "required": [
          "contactGuid",
          "expenses",
          "income"
        ],
        "type": "object",
        "properties": {
          "contactGuid": {
            "type": "string",
            "description": "Unique identifier for the contact",
            "format": "uuid"
          },
          "income": {
            "type": "number",
            "description": "Summed income",
            "format": "double"
          },
          "expenses": {
            "type": "number",
            "description": "Summed expenses",
            "format": "double"
          },
          "entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactStateOfAccountEntry"
            },
            "description": "List of entries related to the contact in the period",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "State of account for a contact"
      },
      "ContactStateOfAccountEntry": {
        "required": [
          "amount",
          "balance",
          "date",
          "relatedVoucherGuid"
        ],
        "type": "object",
        "properties": {
          "relatedVoucherGuid": {
            "type": "string",
            "description": "Unique identifier of the voucher related to the entry",
            "format": "uuid"
          },
          "relatedVoucherNumber": {
            "type": "string",
            "description": "The number of the related voucher",
            "nullable": true
          },
          "date": {
            "type": "string",
            "description": "Date of the entry",
            "format": "date-time"
          },
          "decayDate": {
            "type": "string",
            "description": "The payment day of a related voucher or asset payment.",
            "format": "date-time",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the entry",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "Type of the entry",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "The amount of the entry in DKK",
            "format": "double"
          },
          "balance": {
            "type": "number",
            "description": "The balance of the state of account after the entry",
            "format": "double"
          },
          "status": {
            "type": "string",
            "description": "Status of the entry (open, closed, unknown)",
            "nullable": true
          },
          "relatedVoucherCategory": {
            "type": "string",
            "description": "Category of the related voucher (sales, purchases, manual, notSet)",
            "nullable": true
          },
          "relatedVoucherClass": {
            "type": "string",
            "description": "Class of the related voucher (invoice, cash, creditnote, voucher, notSet)",
            "nullable": true
          },
          "currency": {
            "type": "string",
            "description": "Currency key. Etc DKK, EUR, USD",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information about an entry in a state of account"
      },
      "ContactStateOfAccountMailoutModel": {
        "required": [
          "ccToSender",
          "hideClosed"
        ],
        "type": "object",
        "properties": {
          "sender": {
            "type": "string",
            "description": "Sender email, defaults to the organization email if null.",
            "nullable": true
          },
          "ccToSender": {
            "type": "boolean",
            "description": "CC the email to sender"
          },
          "receiver": {
            "type": "string",
            "description": "Receivers email",
            "nullable": true
          },
          "subject": {
            "type": "string",
            "description": "Subject of the email",
            "nullable": true
          },
          "message": {
            "type": "string",
            "description": "Body of the email",
            "nullable": true
          },
          "from": {
            "type": "string",
            "description": "Optional start date for which to calculate state of account",
            "format": "date-time",
            "nullable": true
          },
          "to": {
            "type": "string",
            "description": "Optional end date from which to calculate state of account",
            "format": "date-time",
            "nullable": true
          },
          "hideClosed": {
            "type": "boolean",
            "description": "Hide closed entries from state of account"
          }
        },
        "additionalProperties": false
      },
      "ContactUpdateModel": {
        "required": [
          "countryKey",
          "isMember",
          "isPerson",
          "name",
          "useCvr"
        ],
        "type": "object",
        "properties": {
          "externalReference": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "Your external id\r\nThis can be used for ID'ing in external apps/services e.g. a web shop.\r\nThe maximum length is 128 characters",
            "nullable": true,
            "example": "Fx. WebShopID:42"
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "Name of the contact person or the company name",
            "example": "John Doe"
          },
          "street": {
            "type": "string",
            "description": "Street name",
            "nullable": true,
            "example": "Main road 42"
          },
          "zipCode": {
            "type": "string",
            "description": "Zip code",
            "nullable": true,
            "example": "2300"
          },
          "city": {
            "type": "string",
            "description": "City",
            "nullable": true,
            "example": "Copenhagen S"
          },
          "countryKey": {
            "minLength": 1,
            "type": "string",
            "description": "Country key\r\nTwo character string e.g. DK for Denmark, DE for Germany or SE for Sweden",
            "example": "DK"
          },
          "phone": {
            "type": "string",
            "description": "Phone number",
            "nullable": true,
            "example": "+45 99 99 99 99"
          },
          "email": {
            "type": "string",
            "description": "Email address",
            "nullable": true,
            "example": "test@test.com"
          },
          "webpage": {
            "type": "string",
            "description": "Webpage address",
            "nullable": true,
            "example": "test.com"
          },
          "attPerson": {
            "type": "string",
            "description": "Name of the att. person in cases here the contact is a company. If IsPerson this should be NULL.",
            "nullable": true,
            "example": "Jane Doe"
          },
          "vatNumber": {
            "type": "string",
            "description": "VAT number. If IsPerson this should be NULL.\r\nThis can be used for digital invoicing.",
            "nullable": true,
            "example": "12345674"
          },
          "eanNumber": {
            "type": "string",
            "description": "EAN number. This number is used for digital invoicing. If IsPerson this should be NULL.",
            "nullable": true,
            "example": "1111000022223"
          },
          "seNumber": {
            "type": "string",
            "description": "SE number. The number is used for digital invoicing. If IsPerson this should be NULL.",
            "nullable": true,
            "example": "12345678"
          },
          "pNumber": {
            "type": "string",
            "description": "P number. The number is used for digital invoicing. If IsPerson this should be NULL.",
            "nullable": true,
            "example": "1234567890"
          },
          "paymentConditionType": {
            "type": "string",
            "description": "Type of the payment condition for the contact. Netto, NettoCash or CurrentMonthOut. If NettoCash, then PaymentConditionNumberOfDays should be null. Defaults to type specified in voucher settings.",
            "nullable": true,
            "example": "Netto"
          },
          "paymentConditionNumberOfDays": {
            "type": "integer",
            "description": "Number of days for payment for the contact. E.g. that the contact has 7 days until\r\npayment has to be made. This field depends on PaymentConditionType. If left empty, defaults to the number of days specified in voucher settings.",
            "format": "int32",
            "nullable": true,
            "example": 8
          },
          "isPerson": {
            "type": "boolean",
            "description": "Boolean to indicate whether the contact is a private person or a company. If true, the contact is a person.",
            "example": false
          },
          "isMember": {
            "type": "boolean",
            "description": "Boolean to indicate whether the contact is a member. If true, the contact is a member else a private person of a company depending on IsPerson.\r\nOnly usable by unions.",
            "example": false
          },
          "memberNumber": {
            "type": "string",
            "description": "A membership number used if the contact is a member.\r\nOnly usable by unions.",
            "nullable": true,
            "example": "A-123"
          },
          "useCvr": {
            "type": "boolean",
            "description": "Boolean to indicate whether the contacts name and address should be updated with data from CVR.",
            "example": false
          },
          "companyTypeKey": {
            "type": "string",
            "description": "String with the key of the company type. The following keys are allowed: EmptyCompanyType,\r\nSoleProprietorship, PrivateLimitedCompany, PublicLimitedCompany, GeneralPartnership,\r\nLimitedPartnership, LimitedLiabilityCooperative, LimitedLiabilityVoluntaryAssociation,\r\nLimitedLiabilityCompany, EntreprenurLimitedCompany, Union, VoluntaryUnion, SmallPersonallyOwnedCompany,\r\nTrustFund and Others.",
            "nullable": true,
            "example": "PrivateLimitedCompany"
          },
          "invoiceMailOutOptionKey": {
            "type": "string",
            "description": "Preferred e-invoicing method.\r\nThe possible values are:\r\nVAT (cvr-nummer), GLN (ean- / gln-nummer), SE (se-nummer), P (p-nummer) and null if the contact is not a company or if nothing is preferred.\r\nEach field requires that the selected mail out number is present - e.g. vat number should be present when InvoiceMailOutOptionKey is set to VAT.",
            "nullable": true,
            "example": "VAT, GLN, SE, P, null "
          }
        },
        "additionalProperties": false,
        "description": "Contact information for either a contact person or a company"
      },
      "CountryModel": {
        "required": [
          "danishName",
          "englishName",
          "key"
        ],
        "type": "object",
        "properties": {
          "key": {
            "minLength": 1,
            "type": "string",
            "readOnly": true
          },
          "danishName": {
            "minLength": 1,
            "type": "string",
            "readOnly": true
          },
          "englishName": {
            "minLength": 1,
            "type": "string",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "CreateAccountingYearInputModel": {
        "required": [
          "end",
          "start"
        ],
        "type": "object",
        "properties": {
          "start": {
            "type": "string",
            "description": "Represents the start date of an accounting year.",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "description": "Represents the end date of the accounting year.",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "CreateMonthlyBusinessGoalRequest": {
        "required": [
          "income",
          "month",
          "result",
          "year"
        ],
        "type": "object",
        "properties": {
          "month": {
            "type": "integer",
            "format": "int32"
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "result": {
            "type": "number",
            "format": "double"
          },
          "income": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "CreateYearlyBusinessGoalRequest": {
        "type": "object",
        "properties": {
          "monthlyGoals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateMonthlyBusinessGoalRequest"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreatedPaymentResponse": {
        "required": [
          "guid"
        ],
        "type": "object",
        "properties": {
          "guid": {
            "type": "string",
            "description": "The guid of the payment",
            "format": "uuid"
          },
          "timeStamp": {
            "type": "string",
            "description": "Timestamp of version of the invoice. To avoid concurrency issues.",
            "nullable": true,
            "example": "00000000020A5EA8"
          },
          "relatedVoucherGuid": {
            "type": "string",
            "description": "For VoucherPayments this is the guid of the related voucher, i.e. of the\r\nvoucher that was booked for the payment (not to be confused with the entity -\r\ne.g. an invoice - that this is a payment for).",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The response of succesfull creation"
      },
      "CreatedResponseModel": {
        "required": [
          "guid"
        ],
        "type": "object",
        "properties": {
          "guid": {
            "type": "string",
            "description": "The id of the object",
            "format": "uuid"
          },
          "timeStamp": {
            "type": "string",
            "description": "Timestamp of version. To avoid concurrency issues.",
            "nullable": true,
            "example": "00000000020A5EA8"
          }
        },
        "additionalProperties": false,
        "description": "The response of succesfull creation"
      },
      "CreditNoteForPurchaseVoucherRequest": {
        "required": [
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "timestamp": {
            "$ref": "#/components/schemas/TimestampObject"
          },
          "voucherDate": {
            "type": "string",
            "description": "Optional datetime for giving the voucher date of the credit - if no value is given it defaults to today",
            "format": "date-time",
            "nullable": true
          },
          "fileGuid": {
            "type": "string",
            "description": "Optional id of the file associated with the purchase credit note.",
            "nullable": true,
            "example": "web0crmck5v0ndcx3313g6zn61tc7wgc"
          }
        },
        "additionalProperties": false,
        "description": "Model for creating a credit note for a purchase voucher"
      },
      "DateRangeViewModel": {
        "type": "object",
        "properties": {
          "start": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "end": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeletedPaymentResponse": {
        "type": "object",
        "properties": {
          "timeStamp": {
            "type": "string",
            "description": "Timestamp of version of the invoice. To avoid concurrency issues.",
            "nullable": true,
            "example": "00000000020A5EA8"
          }
        },
        "additionalProperties": false,
        "description": "The response of succesfull deletion"
      },
      "DepositAccountReadModel": {
        "required": [
          "accountNumber",
          "isDefault",
          "isHidden"
        ],
        "type": "object",
        "properties": {
          "accountNumber": {
            "type": "integer",
            "description": "Account number e.g. 1000 or 55000",
            "format": "int32",
            "example": 55100
          },
          "publicStandardNumber": {
            "type": "integer",
            "description": "Account number mapped to the public standard account",
            "format": "int32",
            "nullable": true,
            "example": 1010
          },
          "name": {
            "type": "string",
            "description": "Name of the account",
            "nullable": true,
            "example": "My New Bankaccount"
          },
          "isDefault": {
            "type": "boolean",
            "description": "Indicates whether or not the deposit account is selected as default deposit account in company settings",
            "example": true
          },
          "isHidden": {
            "type": "boolean",
            "description": "Indicates whether or not the deposit account is hidden in the chart of accounts",
            "example": false
          },
          "bankRegistrationNumber": {
            "type": "string",
            "description": "Deposit account bank registration number",
            "nullable": true,
            "example": "1234"
          },
          "bankAccountNumber": {
            "type": "string",
            "description": "Deposit account bank account number",
            "nullable": true,
            "example": "123456789"
          },
          "bankSwiftNumber": {
            "type": "string",
            "description": "Deposit account bank swift number",
            "nullable": true,
            "example": "DK123456789"
          },
          "bankIbanNumber": {
            "type": "string",
            "description": "Deposit account bank iban number",
            "nullable": true,
            "example": "DK123456789"
          }
        },
        "additionalProperties": false,
        "description": "Represents a single deposit account within the chart of accounts"
      },
      "DepositCreateModel": {
        "required": [
          "name",
          "number"
        ],
        "type": "object",
        "properties": {
          "number": {
            "type": "integer",
            "description": "Account number",
            "format": "int32",
            "example": 55100
          },
          "publicStandardNumber": {
            "type": "integer",
            "description": "Account number mapped to the public standard account",
            "format": "int32",
            "nullable": true,
            "example": 1010
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "Human friendly name of the account",
            "example": "My new bankaccount"
          },
          "registrationNumber": {
            "type": "string",
            "description": "Bank registration number",
            "nullable": true,
            "example": "9999"
          },
          "accountNumber": {
            "type": "string",
            "description": "Bank account number",
            "nullable": true,
            "example": "1234567890"
          },
          "swiftNumber": {
            "type": "string",
            "description": "Swift number/code",
            "nullable": true,
            "example": "AAAABBCC123"
          },
          "ibanNumber": {
            "type": "string",
            "description": "IBAN number of the account",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DocumentAttachmentReadModel": {
        "required": [
          "documentId",
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "integer",
            "description": "The ID of the organization",
            "format": "int32",
            "example": 42
          },
          "documentId": {
            "type": "string",
            "description": "Guid of invoice, trade-offer or credit-note",
            "format": "uuid"
          },
          "fileGuid": {
            "type": "string",
            "description": "Attachment Guid",
            "nullable": true,
            "example": "panzc3nx4hkg74wzfk4lzhuiofv8bpud"
          },
          "fileName": {
            "type": "string",
            "description": "Attachment name",
            "nullable": true,
            "example": "attachment-01.pdf"
          }
        },
        "additionalProperties": false
      },
      "EInvoiceSendModel": {
        "required": [
          "paymentMeanEnum"
        ],
        "type": "object",
        "properties": {
          "paymentMeanEnum": {
            "$ref": "#/components/schemas/PaymentMean"
          },
          "orderReference": {
            "type": "string",
            "description": "Order reference supplied for electronic invoice and/or creditnote",
            "nullable": true
          },
          "attPerson": {
            "type": "string",
            "description": "Name of the att. person in company. If the parameter is specified here, it will overwrite the contacts att person.",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "description": "Timestamp to validate against. This is a safety measure to ensure that an API partner is only making changes to the latest version of the entity.\r\nThe timestamp is generated on Dinero's server every time the entity is updated, and is returned as a part of CreatedResponse and UpdatedResponse. It's also available on the entity itself.\r\nIf you get a timestamp outdated exception (error code 58), you will need to get the latest version of the entity and use its timestamp.\r\nWhen sending electronic invoices, the timestamp is optional",
            "nullable": true,
            "example": "00000000020A5EA8"
          }
        },
        "additionalProperties": false,
        "description": "Model containing parameters needed to send electronic invoice and/or creditnote"
      },
      "EReminderSendModel": {
        "required": [
          "paymentMeanEnum"
        ],
        "type": "object",
        "properties": {
          "paymentMeanEnum": {
            "$ref": "#/components/schemas/PaymentMean"
          },
          "attPerson": {
            "type": "string",
            "description": "Name of the att. person in company. If the parameter is specified here, it will overwrite the contacts att person.",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "description": "Timestamp to validate against. This is a safety measure to ensure that an API partner is only making changes to the latest version of the entity.\r\nThe timestamp is generated on Dinero's server every time the entity is updated, and is returned as a part of CreatedResponse and UpdatedResponse. It's also available on the entity itself.\r\nIf you get a timestamp outdated exception (error code 58), you will need to get the latest version of the entity and use its timestamp.\r\nWhen sending electronic invoices, the timestamp is optional",
            "nullable": true,
            "example": "00000000020A5EA8"
          }
        },
        "additionalProperties": false,
        "description": "Model containing parameters needed to send electronic reminders"
      },
      "EanReminderModel": {
        "required": [
          "paymentMeanEnum"
        ],
        "type": "object",
        "properties": {
          "paymentMeanEnum": {
            "$ref": "#/components/schemas/PaymentMean"
          },
          "attPerson": {
            "type": "string",
            "description": "Name of the att. person in cases here the contact is a company. If the parameter is specified here, it will overwrite the contacts att person.",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "description": "Timestamp to validate against. This is a safety measure to ensure that an API partner is only making changes to the latest version of the entity.\r\nThe timestamp is generated on Dinero's server every time the entity is updated, and is returned as a part of CreatedResponse and UpdatedResponse. It's also available on the entity itself.\r\nIf you get a timestamp outdated exception (error code 58), you will need to get the latest version of the entity and use its timestamp.\r\nWhen sending EAN invoices, the timestamp is optional",
            "nullable": true,
            "example": "00000000020A5EA8"
          },
          "receiverEanNumber": {
            "type": "string",
            "description": "Receiver EAN Number",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Model containing parameters needed to send EAN reminders"
      },
      "EanSendModel": {
        "required": [
          "paymentMeanEnum"
        ],
        "type": "object",
        "properties": {
          "paymentMeanEnum": {
            "$ref": "#/components/schemas/PaymentMean"
          },
          "orderReference": {
            "type": "string",
            "description": "Order reference supplied for the Ean invoice",
            "nullable": true
          },
          "attPerson": {
            "type": "string",
            "description": "Name of the att. person in company. If the parameter is specified here, it will overwrite the contacts att person.",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "description": "Timestamp to validate against. This is a safety measure to ensure that an API partner is only making changes to the latest version of the entity.\r\nThe timestamp is generated on Dinero's server every time the entity is updated, and is returned as a part of CreatedResponse and UpdatedResponse. It's also available on the entity itself.\r\nIf you get a timestamp outdated exception (error code 58), you will need to get the latest version of the entity and use its timestamp.\r\nWhen sending EAN invoices, the timestamp is optional",
            "nullable": true,
            "example": "00000000020A5EA8"
          }
        },
        "additionalProperties": false,
        "description": "Model containing parameters needed to send EAN invoices"
      },
      "EanSendModelV2": {
        "required": [
          "paymentMeanEnum"
        ],
        "type": "object",
        "properties": {
          "paymentMeanEnum": {
            "$ref": "#/components/schemas/PaymentMean"
          },
          "orderReference": {
            "type": "string",
            "description": "Order reference supplied for the Ean invoice",
            "nullable": true
          },
          "attPerson": {
            "type": "string",
            "description": "Name of the att. person in company. If the parameter is specified here, it will overwrite the contacts att person.",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "description": "Timestamp to validate against. This is a safety measure to ensure that an API partner is only making changes to the latest version of the entity.\r\nThe timestamp is generated on Dinero's server every time the entity is updated, and is returned as a part of CreatedResponse and UpdatedResponse. It's also available on the entity itself.\r\nIf you get a timestamp outdated exception (error code 58), you will need to get the latest version of the entity and use its timestamp.\r\nWhen sending EAN invoices, the timestamp is optional",
            "nullable": true,
            "example": "00000000020A5EA8"
          },
          "receiverEanNumber": {
            "type": "string",
            "description": "EAN Number of receiver. If not specified, the EAN number stored on the associated contact will be used.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Model containing parameters needed to send EAN invoices"
      },
      "ElectronicInvoiceSendStatus": {
        "enum": [
          "DineroCanSend",
          "ChildCanSend",
          "CannotSend",
          "ValidateWithPeppol"
        ],
        "type": "string"
      },
      "ElectronicInvoiceSendStatusResult": {
        "required": [
          "electronicInvoiceSendStatus"
        ],
        "type": "object",
        "properties": {
          "electronicInvoiceSendStatus": {
            "$ref": "#/components/schemas/ElectronicInvoiceSendStatus"
          }
        },
        "additionalProperties": false
      },
      "EmailRecipientModel": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email of the recipient.",
            "nullable": true,
            "example": "test@dinero.dk"
          }
        },
        "additionalProperties": false,
        "description": "Information about the recipient of an email."
      },
      "EmailSentModel": {
        "type": "object",
        "properties": {
          "recipients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailRecipientModel"
            },
            "description": "List of recipients.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Information about the send email."
      },
      "EndDatesRequestModel": {
        "required": [
          "startDate"
        ],
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "EntryAccountReadModel": {
        "required": [
          "accountNumber",
          "isDefaultSalesAccount",
          "isHidden"
        ],
        "type": "object",
        "properties": {
          "accountNumber": {
            "type": "integer",
            "description": "Account number e.g. 1000 or 55000",
            "format": "int32",
            "example": 2020
          },
          "publicStandardNumber": {
            "type": "integer",
            "description": "Account number mapped to the public standard account",
            "format": "int32",
            "nullable": true,
            "example": 1010
          },
          "name": {
            "type": "string",
            "description": "Name of the account",
            "nullable": true,
            "example": "Purchase of specific goods"
          },
          "vatCode": {
            "type": "string",
            "description": "The VAT code for the entry account's VAT type. Usually U25 for sales and I25 for purchases.",
            "nullable": true,
            "example": "I25"
          },
          "category": {
            "type": "string",
            "description": "Possible categories: Turnover, Variable Expenses, Salary, Sales Expenses, Property Expenses, Administration Expenses, \r\nTravel Expenses, Depreciation, Interest Income, Interest Expenses, Property, Turnover Assets, Financial Assets, Receivables, \r\nLiquid Assets, Equity, Long Term Debt, Short Term Debt, Vat Due, Salary Due, Analysis, Not Set, Tax, Charge, IntangibleProperty",
            "nullable": true
          },
          "categoryName": {
            "type": "string",
            "description": "Danish display name of the Cateogry",
            "nullable": true
          },
          "isHidden": {
            "type": "boolean",
            "description": "Indicates if the account is hidden, and should not be used"
          },
          "isDefaultSalesAccount": {
            "type": "boolean",
            "description": "Indicates if this is the default account"
          }
        },
        "additionalProperties": false,
        "description": "Represents a single account within the chart of accounts"
      },
      "EntryReadModel": {
        "required": [
          "accountNumber",
          "amount"
        ],
        "type": "object",
        "properties": {
          "accountNumber": {
            "type": "integer",
            "description": "Account number",
            "format": "int32",
            "example": 7300
          },
          "accountName": {
            "type": "string",
            "description": "Account name",
            "nullable": true,
            "example": "Internet og webhotel"
          },
          "date": {
            "type": "string",
            "description": "Date",
            "nullable": true,
            "example": "2022-05-16"
          },
          "voucherNumber": {
            "type": "integer",
            "description": "Voucher number",
            "format": "int64",
            "nullable": true,
            "example": 27
          },
          "voucherType": {
            "type": "string",
            "description": "Voucher type",
            "nullable": true,
            "example": "Purchases"
          },
          "description": {
            "type": "string",
            "description": "Description",
            "nullable": true,
            "example": "#Hjemmeside"
          },
          "vatType": {
            "type": "string",
            "description": "Vat type",
            "nullable": true,
            "example": "Dansk købsmoms"
          },
          "vatCode": {
            "type": "string",
            "description": "Vat code",
            "nullable": true,
            "example": "I25"
          },
          "amount": {
            "type": "number",
            "description": "Amount",
            "format": "double",
            "example": 1000
          },
          "entryGuid": {
            "type": "string",
            "description": "Amount",
            "format": "uuid",
            "nullable": true,
            "example": "d29f89bf-4148-4573-a24e-4578266a572d"
          },
          "contactGuid": {
            "type": "string",
            "description": "Guid of the contact",
            "format": "uuid",
            "nullable": true,
            "example": "74ba828f-0b4b-49e1-b5c9-ef9675755556"
          },
          "type": {
            "type": "string",
            "description": "Type of entry, can be Normal, Primo, or Ultimo",
            "nullable": true,
            "example": "Normal"
          }
        },
        "additionalProperties": false,
        "description": "Accounting Entry"
      },
      "FileFilter": {
        "enum": [
          "All",
          "WithFile",
          "WithoutFile"
        ],
        "type": "string"
      },
      "FileLinkReadModel": {
        "required": [
          "voucherGuid",
          "voucherId"
        ],
        "type": "object",
        "properties": {
          "voucherId": {
            "type": "integer",
            "format": "int32"
          },
          "voucherGuid": {
            "type": "string",
            "format": "uuid"
          },
          "linkedAt": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FileSavedReadModel": {
        "type": "object",
        "properties": {
          "fileGuid": {
            "type": "string",
            "description": "The guid of the posted file",
            "nullable": true,
            "example": "web0crmck5v0ndcx3313g6zn61tc7wgc"
          }
        },
        "additionalProperties": false,
        "description": "Read model for a file posted to the server."
      },
      "FileStatus": {
        "enum": [
          "All",
          "Unused",
          "Used"
        ],
        "type": "string"
      },
      "FilteredFileReadModel": {
        "required": [
          "size",
          "uploadedAt"
        ],
        "type": "object",
        "properties": {
          "fileGuid": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "extension": {
            "type": "string",
            "nullable": true
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "uploadedAt": {
            "type": "string",
            "format": "date-time"
          },
          "note": {
            "type": "string",
            "nullable": true
          },
          "numberOfPages": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "linked": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileLinkReadModel"
            },
            "nullable": true
          },
          "uploadedBy": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IntegrationViewModel": {
        "required": [
          "isActive"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "InvoiceCreateFetchModel": {
        "required": [
          "productLines"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "The currency used on the voucher. Defaults to DKK if null. Dinero will assign days date currency rate for the given currency. Currencies are given in format: DKK, EUR, USD etc...",
            "nullable": true,
            "example": "DKK"
          },
          "language": {
            "type": "string",
            "description": "The language to be used in the voucher. Available languages are 'da-DK' and 'en-GB'. Defaults to 'da-DK'.",
            "nullable": true,
            "example": "en-GB"
          },
          "externalReference": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "Your external id\r\nThis can be used for ID'ing in external apps/services e.g. a web shop.\r\nThe maximum length is 128 characters",
            "nullable": true,
            "example": "Fx. WebshopSpecialId: 42"
          },
          "description": {
            "type": "string",
            "description": "User supplied description of the voucher e.g. 'Custom Invoice description'. Defaults to document type e.g. 'Invoice', 'Offer', 'Creditnote' using the selected language.",
            "nullable": true,
            "example": "Description of document type. Fx.: invoice, credit note or offer"
          },
          "comment": {
            "type": "string",
            "description": "User supplied comment on the voucher",
            "nullable": true,
            "example": "Here is a comment"
          },
          "date": {
            "type": "string",
            "description": "The date of the creation/issuing. This should be in the format YYYY-MM-DD e.g. 2015-12-02. Defaults to today.",
            "nullable": true,
            "example": "2022-06-01"
          },
          "productLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceLinesCreateModel"
            },
            "description": "User supplied invoice lines. Minimum one."
          },
          "address": {
            "type": "string",
            "description": "Contact address (linebreaks are allowed '\\n'). When null is specified the address defaults to the contacts address.",
            "nullable": true,
            "example": "Test Road 3 2300 Copenhagen S Denmark"
          },
          "guid": {
            "type": "string",
            "description": "Optional guid for the object. If not set the system will create a guid returned in the response.",
            "format": "uuid",
            "nullable": true,
            "example": "3a315ad3-ddcc-419d-9fc5-219280ae4816"
          },
          "showLinesInclVat": {
            "type": "boolean",
            "description": "If your user (or your system) prefers to provide the line amounts incl. VAT, then this property should be set to true. All voucher lines will be assumed to have amounts incl VAT.\r\nIf your lines are excl VAT, you do not need to set this property. It will defaults to false.",
            "nullable": true,
            "example": false
          },
          "invoiceTemplateId": {
            "type": "string",
            "description": "Template id to use for design. If null, the default one will be used.",
            "format": "uuid",
            "nullable": true
          },
          "contactGuid": {
            "type": "string",
            "description": "Dinero contact guid. Optional for creating a draft, required for booking.",
            "format": "uuid",
            "nullable": true
          },
          "paymentConditionNumberOfDays": {
            "type": "integer",
            "description": "Number of days until payment deadline. If PaymentConditionNumberOfDays AND PaymentConditionType is left empty they will default to the contacts default payment conditions.",
            "format": "int32",
            "nullable": true,
            "example": 8
          },
          "paymentConditionType": {
            "type": "string",
            "description": "Type of payment condition. Valid types are: Netto, NettoCash, CurrentMonthOut, or Paid. Note that if you use NettoCash or Paid, PaymentConditionNumberOfDays should be null.",
            "nullable": true,
            "example": "Netto"
          },
          "reminderFee": {
            "type": "number",
            "description": "Reminder fee for any reminders created from the invoice. Should be nonnegative and at most 100. Will use default sales voucher setting if left empty.",
            "format": "double",
            "nullable": true,
            "example": 100
          },
          "reminderInterestRate": {
            "type": "number",
            "description": "Reminder interest rate for any reminders created from the invoice. Should be nonnegative and at most 100. Will use default sales voucher setting if left empty.",
            "format": "double",
            "nullable": true,
            "example": 0.7
          },
          "isMobilePayInvoiceEnabled": {
            "type": "boolean",
            "description": "Indicates whether MobilePay Invoice should be enabled for this invoice.",
            "nullable": true
          },
          "isPensoPayEnabled": {
            "type": "boolean",
            "description": "Indicates whether PensoPay should be enabled for this invoice.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Model for fetching a sales voucher."
      },
      "InvoiceCreateModel": {
        "required": [
          "productLines"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "The currency used on the voucher. Defaults to DKK if null. Dinero will assign days date currency rate for the given currency. Currencies are given in format: DKK, EUR, USD etc...",
            "nullable": true,
            "example": "DKK"
          },
          "language": {
            "type": "string",
            "description": "The language to be used in the voucher. Available languages are 'da-DK' and 'en-GB'. Defaults to 'da-DK'.",
            "nullable": true,
            "example": "en-GB"
          },
          "externalReference": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "Your external id\r\nThis can be used for ID'ing in external apps/services e.g. a web shop.\r\nThe maximum length is 128 characters",
            "nullable": true,
            "example": "Fx. WebshopSpecialId: 42"
          },
          "description": {
            "type": "string",
            "description": "User supplied description of the voucher e.g. 'Custom Invoice description'. Defaults to document type e.g. 'Invoice', 'Offer', 'Creditnote' using the selected language.",
            "nullable": true,
            "example": "Description of document type. Fx.: invoice, credit note or offer"
          },
          "comment": {
            "type": "string",
            "description": "User supplied comment on the voucher",
            "nullable": true,
            "example": "Here is a comment"
          },
          "date": {
            "type": "string",
            "description": "The date of the creation/issuing. This should be in the format YYYY-MM-DD e.g. 2015-12-02. Defaults to today.",
            "nullable": true,
            "example": "2022-06-01"
          },
          "productLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceLinesCreateModel"
            },
            "description": "User supplied invoice lines. Minimum one."
          },
          "address": {
            "type": "string",
            "description": "Contact address (linebreaks are allowed '\\n'). When null is specified the address defaults to the contacts address.",
            "nullable": true,
            "example": "Test Road 3 2300 Copenhagen S Denmark"
          },
          "guid": {
            "type": "string",
            "description": "Optional guid for the object. If not set the system will create a guid returned in the response.",
            "format": "uuid",
            "nullable": true,
            "example": "3a315ad3-ddcc-419d-9fc5-219280ae4816"
          },
          "showLinesInclVat": {
            "type": "boolean",
            "description": "If your user (or your system) prefers to provide the line amounts incl. VAT, then this property should be set to true. All voucher lines will be assumed to have amounts incl VAT.\r\nIf your lines are excl VAT, you do not need to set this property. It will defaults to false.",
            "nullable": true,
            "example": false
          },
          "invoiceTemplateId": {
            "type": "string",
            "description": "Template id to use for design. If null, the default one will be used.",
            "format": "uuid",
            "nullable": true
          },
          "contactGuid": {
            "type": "string",
            "description": "Dinero contact guid. Optional for creating a draft, required for booking.",
            "format": "uuid",
            "nullable": true
          },
          "paymentConditionNumberOfDays": {
            "type": "integer",
            "description": "Number of days until payment deadline. If PaymentConditionNumberOfDays AND PaymentConditionType is left empty they will default to the contacts default payment conditions.",
            "format": "int32",
            "nullable": true,
            "example": 8
          },
          "paymentConditionType": {
            "type": "string",
            "description": "Type of payment condition. Valid types are: Netto, NettoCash, CurrentMonthOut, or Paid. Note that if you use NettoCash or Paid, PaymentConditionNumberOfDays should be null.",
            "nullable": true,
            "example": "Netto"
          },
          "reminderFee": {
            "type": "number",
            "description": "Reminder fee for any reminders created from the invoice. Should be nonnegative and at most 100. Will use default sales voucher setting if left empty.",
            "format": "double",
            "nullable": true,
            "example": 100
          },
          "reminderInterestRate": {
            "type": "number",
            "description": "Reminder interest rate for any reminders created from the invoice. Should be nonnegative and at most 100. Will use default sales voucher setting if left empty.",
            "format": "double",
            "nullable": true,
            "example": 0.7
          },
          "isMobilePayInvoiceEnabled": {
            "type": "boolean",
            "description": "Indicates whether MobilePay Invoice should be enabled for this invoice.",
            "nullable": true
          },
          "isPensoPayEnabled": {
            "type": "boolean",
            "description": "Indicates whether PensoPay should be enabled for this invoice.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Model for creating a sales voucher"
      },
      "InvoiceFetchReadModel": {
        "required": [
          "canEnableMobilePayInvoice",
          "canEnablePensoPay",
          "number",
          "paymentConditionNumberOfDays",
          "productLines",
          "showLinesInclVat",
          "totalExclVat",
          "totalInclVat",
          "totalNonVatableAmount",
          "totalVat",
          "totalVatableAmount"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "The currency used on the voucher. Defaults to DKK if null. Dinero will assign days date currency rate for the given currency. Currencies are given in format: DKK, EUR, USD etc...",
            "nullable": true,
            "example": "DKK"
          },
          "language": {
            "type": "string",
            "description": "The language to be used in the voucher. Available languages are 'da-DK' and 'en-GB'. Defaults to 'da-DK'.",
            "nullable": true,
            "example": "en-GB"
          },
          "externalReference": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "Your external id\r\nThis can be used for ID'ing in external apps/services e.g. a web shop.\r\nThe maximum length is 128 characters",
            "nullable": true,
            "example": "Fx. WebshopSpecialId: 42"
          },
          "description": {
            "type": "string",
            "description": "User supplied description of the voucher e.g. 'Custom Invoice description'. Defaults to document type e.g. 'Invoice', 'Offer', 'Creditnote' using the selected language.",
            "nullable": true,
            "example": "Description of document type. Fx.: invoice, credit note or offer"
          },
          "comment": {
            "type": "string",
            "description": "User supplied comment on the voucher",
            "nullable": true,
            "example": "Here is a comment"
          },
          "date": {
            "type": "string",
            "description": "The date of the creation/issuing. This should be in the format YYYY-MM-DD e.g. 2015-12-02. Defaults to today.",
            "nullable": true,
            "example": "2022-06-01"
          },
          "productLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceLinesReadModel"
            },
            "description": "User supplied invoice lines. Minimum one."
          },
          "address": {
            "type": "string",
            "description": "Contact address (linebreaks are allowed '\\n'). When null is specified the address defaults to the contacts address.",
            "nullable": true,
            "example": "Test Road 3 2300 Copenhagen S Denmark"
          },
          "number": {
            "type": "integer",
            "description": "The number of the voucher.",
            "format": "int64",
            "example": 12
          },
          "contactName": {
            "type": "string",
            "description": "Contact name",
            "nullable": true,
            "example": "My Customer"
          },
          "showLinesInclVat": {
            "type": "boolean",
            "description": "If true, the user prefers the invoice to be displayed with lines incl vat.",
            "example": false
          },
          "totalExclVat": {
            "type": "number",
            "description": "Total amount without vat",
            "format": "double",
            "example": 200
          },
          "totalVatableAmount": {
            "type": "number",
            "description": "Total amount to calculate the vat from",
            "format": "double",
            "example": 200
          },
          "totalInclVat": {
            "type": "number",
            "description": "Total amount incl. vat",
            "format": "double",
            "example": 250
          },
          "totalNonVatableAmount": {
            "type": "number",
            "description": "Total vat free amount",
            "format": "double",
            "example": 0
          },
          "totalVat": {
            "type": "number",
            "description": "Total vat amount",
            "format": "double",
            "example": 50
          },
          "totalLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TotalLine"
            },
            "description": "Total lines. SubTotal, Vat and Total. Only lines valid for display in the current context are returned.",
            "nullable": true
          },
          "invoiceTemplateId": {
            "type": "string",
            "description": "Template id to use for design.",
            "format": "uuid",
            "nullable": true
          },
          "contactGuid": {
            "type": "string",
            "description": "Dinero contact guid.",
            "format": "uuid",
            "nullable": true
          },
          "paymentDate": {
            "type": "string",
            "description": "The invoice's payment date. This should be in the format YYYY-MM-DD e.g. 2015-12-02",
            "nullable": true,
            "example": "2022-06-01"
          },
          "paymentConditionNumberOfDays": {
            "type": "integer",
            "description": "Number of days until payment deadline.",
            "format": "int32",
            "example": 8
          },
          "paymentConditionType": {
            "type": "string",
            "description": "Type of payment condition. Valid types are: Netto, NettoCash, CurrentMonthOut. \r\nNote that if you use NettoCash, PaymentConditionNumberOfDays should be zero.",
            "nullable": true,
            "example": "Netto"
          },
          "canEnableMobilePayInvoice": {
            "type": "boolean",
            "description": "Whether MobilePay Invoice can be enabled for this invoice"
          },
          "canEnablePensoPay": {
            "type": "boolean"
          }
        },
        "additionalProperties": false,
        "description": "Represent a invoice"
      },
      "InvoiceLinesCreateModel": {
        "required": [
          "accountNumber",
          "baseAmountValue",
          "discount",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "productGuid": {
            "type": "string",
            "description": "The guid of product. If product guid is set, description should be null.",
            "format": "uuid",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "A description of the product. If no ProductGuid, this field is required.\r\nThis field will always have a value on the read model, even if a ProductGuid is set.",
            "nullable": true,
            "example": "Flowers"
          },
          "comments": {
            "type": "string",
            "description": "User supplied comment",
            "nullable": true,
            "example": "Smells good"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity",
            "format": "double",
            "example": 5
          },
          "accountNumber": {
            "type": "integer",
            "description": "Account number",
            "format": "int32",
            "example": 1000
          },
          "unit": {
            "type": "string",
            "description": "Product unit. Required when LineType = Product. Available unit types: hours, parts, km, day, week, month, kilogram, cubicMetre, set, litre, box, case, carton, metre, package, shipment, squareMetre, session, tonne.",
            "nullable": true,
            "example": "parts"
          },
          "discount": {
            "type": "number",
            "description": "Discount for the current line. Specified in percentage from 0 to 100.",
            "format": "double",
            "example": 10
          },
          "lineType": {
            "type": "string",
            "description": "Type. Either Product or Text line.\r\n Text is used for creating bold lines only with text displayed, these lines are purely visual and have no effect on the voucher.\r\nText lines should only contain a description.\r\nProduct lines are the actual lines of the invoice used for accounting and total calculations.",
            "nullable": true,
            "example": "Product"
          },
          "baseAmountValue": {
            "type": "number",
            "description": "Base amount. As default without VAT. If you want to use amounts incl vat, the setting 'ShowLinesInclVat' should be set to true on the voucher containing the lines.",
            "format": "double",
            "example": 20
          }
        },
        "additionalProperties": false,
        "description": "Model for a line on a invoice"
      },
      "InvoiceLinesReadModel": {
        "required": [
          "accountNumber",
          "baseAmountValue",
          "baseAmountValueInclVat",
          "discount",
          "quantity",
          "totalAmount",
          "totalAmountInclVat"
        ],
        "type": "object",
        "properties": {
          "productGuid": {
            "type": "string",
            "description": "The guid of product. If product guid is set, description should be null.",
            "format": "uuid",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "A description of the product. If no ProductGuid, this field is required.\r\nThis field will always have a value on the read model, even if a ProductGuid is set.",
            "nullable": true,
            "example": "Flowers"
          },
          "comments": {
            "type": "string",
            "description": "User supplied comment",
            "nullable": true,
            "example": "Smells good"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity",
            "format": "double",
            "example": 5
          },
          "accountNumber": {
            "type": "integer",
            "description": "Account number",
            "format": "int32",
            "example": 1000
          },
          "unit": {
            "type": "string",
            "description": "Product unit. Required when LineType = Product. Available unit types: hours, parts, km, day, week, month, kilogram, cubicMetre, set, litre, box, case, carton, metre, package, shipment, squareMetre, session, tonne.",
            "nullable": true,
            "example": "parts"
          },
          "discount": {
            "type": "number",
            "description": "Discount for the current line. Specified in percentage from 0 to 100.",
            "format": "double",
            "example": 10
          },
          "lineType": {
            "type": "string",
            "description": "Type. Either Product or Text line.\r\n Text is used for creating bold lines only with text displayed, these lines are purely visual and have no effect on the voucher.\r\nText lines should only contain a description.\r\nProduct lines are the actual lines of the invoice used for accounting and total calculations.",
            "nullable": true,
            "example": "Product"
          },
          "accountName": {
            "type": "string",
            "description": "Name of the Account",
            "nullable": true,
            "example": "Bank"
          },
          "baseAmountValue": {
            "type": "number",
            "description": "Amount excl. VAT",
            "format": "double",
            "example": 20
          },
          "baseAmountValueInclVat": {
            "type": "number",
            "description": "Base amount incl. VAT",
            "format": "double",
            "example": 25
          },
          "totalAmount": {
            "type": "number",
            "description": "Total of the line excl VAT",
            "format": "double",
            "example": 100
          },
          "totalAmountInclVat": {
            "type": "number",
            "description": "Total of the line incl VAT",
            "format": "double",
            "example": 125
          }
        },
        "additionalProperties": false,
        "description": "Model of invoice lines"
      },
      "InvoicePaymentsModel": {
        "required": [
          "invoiceTotalIncludingReminderExpenses",
          "paidAmount",
          "remainderAsFeeAvailable",
          "remainingAmount"
        ],
        "type": "object",
        "properties": {
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentReadModel"
            },
            "description": "List of payments",
            "nullable": true
          },
          "remainingAmount": {
            "type": "number",
            "description": "The remaining amount to be paid. Might be negative if the invoice is overpaid.",
            "format": "double",
            "example": 0
          },
          "paidAmount": {
            "type": "number",
            "description": "The sum of the registered payments on the invoice.",
            "format": "double",
            "example": 1000
          },
          "invoiceTotalIncludingReminderExpenses": {
            "type": "number",
            "description": "The total amount of the invoice, including reminder fees, if any.",
            "format": "double",
            "example": 1000
          },
          "remainderAsFeeAvailable": {
            "type": "boolean",
            "description": "Tells if the remainder can be used as a fee",
            "example": false
          }
        },
        "additionalProperties": false,
        "description": "Model for invoice payments"
      },
      "InvoiceReadModel": {
        "required": [
          "guid",
          "isMobilePayInvoiceEnabled",
          "isPensoPayEnabled",
          "isSentToDebtCollection",
          "number",
          "paymentConditionNumberOfDays",
          "productLines",
          "showLinesInclVat",
          "totalExclVat",
          "totalInclVat",
          "totalNonVatableAmount",
          "totalVat",
          "totalVatableAmount"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "The currency used on the voucher. Defaults to DKK if null. Dinero will assign days date currency rate for the given currency. Currencies are given in format: DKK, EUR, USD etc...",
            "nullable": true,
            "example": "DKK"
          },
          "language": {
            "type": "string",
            "description": "The language to be used in the voucher. Available languages are 'da-DK' and 'en-GB'. Defaults to 'da-DK'.",
            "nullable": true,
            "example": "en-GB"
          },
          "externalReference": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "Your external id\r\nThis can be used for ID'ing in external apps/services e.g. a web shop.\r\nThe maximum length is 128 characters",
            "nullable": true,
            "example": "Fx. WebshopSpecialId: 42"
          },
          "description": {
            "type": "string",
            "description": "User supplied description of the voucher e.g. 'Custom Invoice description'. Defaults to document type e.g. 'Invoice', 'Offer', 'Creditnote' using the selected language.",
            "nullable": true,
            "example": "Description of document type. Fx.: invoice, credit note or offer"
          },
          "comment": {
            "type": "string",
            "description": "User supplied comment on the voucher",
            "nullable": true,
            "example": "Here is a comment"
          },
          "date": {
            "type": "string",
            "description": "The date of the creation/issuing. This should be in the format YYYY-MM-DD e.g. 2015-12-02. Defaults to today.",
            "nullable": true,
            "example": "2022-06-01"
          },
          "productLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceLinesReadModel"
            },
            "description": "User supplied invoice lines. Minimum one."
          },
          "address": {
            "type": "string",
            "description": "Contact address (linebreaks are allowed '\\n'). When null is specified the address defaults to the contacts address.",
            "nullable": true,
            "example": "Test Road 3 2300 Copenhagen S Denmark"
          },
          "number": {
            "type": "integer",
            "description": "The number of the voucher.",
            "format": "int64",
            "example": 12
          },
          "contactName": {
            "type": "string",
            "description": "Contact name",
            "nullable": true,
            "example": "My Customer"
          },
          "showLinesInclVat": {
            "type": "boolean",
            "description": "If true, the user prefers the invoice to be displayed with lines incl vat.",
            "example": false
          },
          "totalExclVat": {
            "type": "number",
            "description": "Total amount without vat",
            "format": "double",
            "example": 200
          },
          "totalVatableAmount": {
            "type": "number",
            "description": "Total amount to calculate the vat from",
            "format": "double",
            "example": 200
          },
          "totalInclVat": {
            "type": "number",
            "description": "Total amount incl. vat",
            "format": "double",
            "example": 250
          },
          "totalNonVatableAmount": {
            "type": "number",
            "description": "Total vat free amount",
            "format": "double",
            "example": 0
          },
          "totalVat": {
            "type": "number",
            "description": "Total vat amount",
            "format": "double",
            "example": 50
          },
          "totalLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TotalLine"
            },
            "description": "Total lines. SubTotal, Vat and Total. Only lines valid for display in the current context are returned.",
            "nullable": true
          },
          "invoiceTemplateId": {
            "type": "string",
            "description": "Template id to use for design.",
            "format": "uuid",
            "nullable": true
          },
          "guid": {
            "type": "string",
            "description": "The guid of the voucher",
            "format": "uuid"
          },
          "timeStamp": {
            "type": "string",
            "description": "Timestamp of version. To avoid concurrency issues.",
            "nullable": true,
            "example": "00000000020A5EA8"
          },
          "createdAt": {
            "type": "string",
            "description": "Time of creation",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "description": "Time of last update",
            "format": "date-time",
            "nullable": true
          },
          "deletedAt": {
            "type": "string",
            "description": "Time of deletion. Null unless the object is deleted.",
            "format": "date-time",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "An sales voucher can have status Draft or Booked",
            "nullable": true,
            "example": "Draft"
          },
          "contactGuid": {
            "type": "string",
            "description": "Dinero contact guid.",
            "format": "uuid",
            "nullable": true
          },
          "paymentDate": {
            "type": "string",
            "description": "The invoice's payment date. This should be in the format YYYY-MM-DD e.g. 2021-12-02",
            "nullable": true,
            "example": "2022-06-01"
          },
          "paymentStatus": {
            "type": "string",
            "description": "An invoice can have payment status Draft, Booked, Paid, OverPaid or Overdue",
            "nullable": true,
            "example": "Overdue"
          },
          "paymentConditionNumberOfDays": {
            "type": "integer",
            "description": "Number of days until payment deadline.",
            "format": "int32",
            "example": 8
          },
          "paymentConditionType": {
            "type": "string",
            "description": "Type of payment condition. Valid types are: Netto, NettoCash, CurrentMonthOut. \r\nNote that if you use NettoCash, PaymentConditionNumberOfDays should be zero.",
            "nullable": true,
            "example": "Netto"
          },
          "fikCode": {
            "type": "string",
            "description": "FIK code (Fælles Indbetalings Kort)",
            "nullable": true,
            "example": "+71000000016460909+12345678"
          },
          "depositAccountNumber": {
            "type": "integer",
            "description": "The deposit account to register payments on",
            "format": "int32",
            "nullable": true,
            "example": 55000
          },
          "mailOutStatus": {
            "type": "string",
            "description": "The mailout can have following status: \r\nNotSent, Sent or SeenByCustomer, Failed.\r\nSeenByCustomer, means the user has clicked on the link in the mailout and viewed the sales voucher. \r\nAny type of mailout (email, reminder, pre-reminder, e-invoice), will change the status from NotSent to Sent.",
            "nullable": true,
            "example": "Sent, NotSent, Failed, SeenByCustomer"
          },
          "latestMailOutType": {
            "type": "string",
            "description": "The mailout category can have following values:\r\nEinvoice, ElectronicInvoiceReminder, Inkasso, Mailout, OrderConfirmation, PreReminder, Reminder, TradeOffer, None",
            "nullable": true,
            "example": "einvoice"
          },
          "isSentToDebtCollection": {
            "type": "boolean",
            "description": "Whether the invoice has been sent to debt collection, i.e. at least one of the sent reminders contains a debt collection warning"
          },
          "isMobilePayInvoiceEnabled": {
            "type": "boolean",
            "description": "Whether MobilePay Invoice has been enabled for the invoice"
          },
          "isPensoPayEnabled": {
            "type": "boolean"
          }
        },
        "additionalProperties": false,
        "description": "Represent a invoice"
      },
      "InvoiceTemplateModel": {
        "required": [
          "addressPlacement",
          "id",
          "isDefault",
          "logoType",
          "maxImageWidthMm",
          "showCompanyInfo",
          "showLineQuantity",
          "showLineUnit",
          "showLogo",
          "showPaymentConditions",
          "theme"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the template",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "The name to identify the template",
            "nullable": true
          },
          "isDefault": {
            "type": "boolean",
            "description": "Is true for the default template"
          },
          "theme": {
            "$ref": "#/components/schemas/InvoiceTheme"
          },
          "primaryColor": {
            "type": "string",
            "description": "Primary color used in theme",
            "nullable": true
          },
          "secondaryColor": {
            "type": "string",
            "description": "Secondary color used in theme",
            "nullable": true
          },
          "addressPlacement": {
            "$ref": "#/components/schemas/AddressPlacement"
          },
          "font": {
            "type": "string",
            "description": "Font used for template",
            "nullable": true
          },
          "logoType": {
            "$ref": "#/components/schemas/LogoType"
          },
          "logoText": {
            "type": "string",
            "description": "Logo text",
            "nullable": true
          },
          "logoFileGuid": {
            "type": "string",
            "description": "File guid for logo",
            "nullable": true
          },
          "maxImageWidthMm": {
            "type": "integer",
            "description": "Max width for logo",
            "format": "int32"
          },
          "showCompanyInfo": {
            "type": "boolean",
            "description": "Show company info on template"
          },
          "showPaymentConditions": {
            "type": "boolean",
            "description": "Show payment conditions on template"
          },
          "showLogo": {
            "type": "boolean",
            "description": "Show logo on template"
          },
          "showLineQuantity": {
            "type": "boolean",
            "description": "Show line quantity on template"
          },
          "showLineUnit": {
            "type": "boolean",
            "description": "Show line unit on template"
          },
          "imageFileUploadGuid": {
            "type": "string",
            "description": "File guid for image. Can be used for background and header",
            "nullable": true
          },
          "imageTextColor": {
            "type": "string",
            "description": "Text color on image",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Model for invoice templates"
      },
      "InvoiceTheme": {
        "enum": [
          "DineroStarter",
          "Standard",
          "Massive",
          "TopImage",
          "BackgroundImage",
          "Box"
        ],
        "type": "string",
        "description": "Possible themes for templates"
      },
      "InvoiceUpdateModel": {
        "required": [
          "productLines",
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "The currency used on the voucher. Defaults to DKK if null. Dinero will assign days date currency rate for the given currency. Currencies are given in format: DKK, EUR, USD etc...",
            "nullable": true,
            "example": "DKK"
          },
          "language": {
            "type": "string",
            "description": "The language to be used in the voucher. Available languages are 'da-DK' and 'en-GB'. Defaults to 'da-DK'.",
            "nullable": true,
            "example": "en-GB"
          },
          "externalReference": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "Your external id\r\nThis can be used for ID'ing in external apps/services e.g. a web shop.\r\nThe maximum length is 128 characters",
            "nullable": true,
            "example": "Fx. WebshopSpecialId: 42"
          },
          "description": {
            "type": "string",
            "description": "User supplied description of the voucher e.g. 'Custom Invoice description'. Defaults to document type e.g. 'Invoice', 'Offer', 'Creditnote' using the selected language.",
            "nullable": true,
            "example": "Description of document type. Fx.: invoice, credit note or offer"
          },
          "comment": {
            "type": "string",
            "description": "User supplied comment on the voucher",
            "nullable": true,
            "example": "Here is a comment"
          },
          "date": {
            "type": "string",
            "description": "The date of the creation/issuing. This should be in the format YYYY-MM-DD e.g. 2015-12-02. Defaults to today.",
            "nullable": true,
            "example": "2022-06-01"
          },
          "productLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceLinesCreateModel"
            },
            "description": "User supplied invoice lines. Minimum one."
          },
          "address": {
            "type": "string",
            "description": "Contact address (linebreaks are allowed '\\n'). When null is specified the address defaults to the contacts address.",
            "nullable": true,
            "example": "Test Road 3 2300 Copenhagen S Denmark"
          },
          "guid": {
            "type": "string",
            "description": "Optional guid for the object. If not set the system will create a guid returned in the response.",
            "format": "uuid",
            "nullable": true,
            "example": "3a315ad3-ddcc-419d-9fc5-219280ae4816"
          },
          "showLinesInclVat": {
            "type": "boolean",
            "description": "If your user (or your system) prefers to provide the line amounts incl. VAT, then this property should be set to true. All voucher lines will be assumed to have amounts incl VAT.\r\nIf your lines are excl VAT, you do not need to set this property. It will defaults to false.",
            "nullable": true,
            "example": false
          },
          "invoiceTemplateId": {
            "type": "string",
            "description": "Template id to use for design. If null, the default one will be used.",
            "format": "uuid",
            "nullable": true
          },
          "contactGuid": {
            "type": "string",
            "description": "Dinero contact guid. Optional for creating a draft, required for booking.",
            "format": "uuid",
            "nullable": true
          },
          "paymentConditionNumberOfDays": {
            "type": "integer",
            "description": "Number of days until payment deadline. If PaymentConditionNumberOfDays AND PaymentConditionType is left empty they will default to the contacts default payment conditions.",
            "format": "int32",
            "nullable": true,
            "example": 8
          },
          "paymentConditionType": {
            "type": "string",
            "description": "Type of payment condition. Valid types are: Netto, NettoCash, CurrentMonthOut, or Paid. Note that if you use NettoCash or Paid, PaymentConditionNumberOfDays should be null.",
            "nullable": true,
            "example": "Netto"
          },
          "reminderFee": {
            "type": "number",
            "description": "Reminder fee for any reminders created from the invoice. Should be nonnegative and at most 100. Will use default sales voucher setting if left empty.",
            "format": "double",
            "nullable": true,
            "example": 100
          },
          "reminderInterestRate": {
            "type": "number",
            "description": "Reminder interest rate for any reminders created from the invoice. Should be nonnegative and at most 100. Will use default sales voucher setting if left empty.",
            "format": "double",
            "nullable": true,
            "example": 0.7
          },
          "isMobilePayInvoiceEnabled": {
            "type": "boolean",
            "description": "Indicates whether MobilePay Invoice should be enabled for this invoice.",
            "nullable": true
          },
          "isPensoPayEnabled": {
            "type": "boolean",
            "description": "Indicates whether PensoPay should be enabled for this invoice.",
            "nullable": true
          },
          "timestamp": {
            "minLength": 1,
            "type": "string",
            "description": "Version of the invoice"
          }
        },
        "additionalProperties": false,
        "description": "Model for updating a sales voucher"
      },
      "LedgerItemLineModelV2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "An optional unique identifier for ledger item lines.\r\nRequired when updating an existing ledger item line.\r\nMust be unique for each line.",
            "format": "uuid",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the ledger item.",
            "nullable": true,
            "example": "Description"
          },
          "amount": {
            "type": "number",
            "description": "The amount value for the ledger item. The amount is always in DKK and formatted as XXXX.YY e.g. 100.23, 202.00, 1.20 etc.",
            "format": "double",
            "nullable": true,
            "example": -200
          },
          "accountNumber": {
            "type": "integer",
            "description": "Account number e.g. 1000 or 55000",
            "format": "int32",
            "nullable": true,
            "example": 1000
          },
          "accountVatCode": {
            "type": "string",
            "description": "Vat code for the selected account number. The value should be an existing VAT code e.g. U25, I25, UVC, KUNS etc.\r\nThe account VAT type can be suppressed by providing the value \"none\". If set to NULL it defaults to the accounts default vat code, if the account has any.",
            "nullable": true,
            "example": "U25"
          },
          "balancingAccountNumber": {
            "type": "integer",
            "description": "Account number of the balancing account e.g. 1000 or 55000",
            "format": "int32",
            "nullable": true,
            "example": 55000
          },
          "balancingAccountVatCode": {
            "type": "string",
            "description": "Vat code for the selected balancing account number. The value should be an existing VAT code e.g. I25, UVC, KUNS etc.\r\nThe balancing account VAT type can be suppressed by providing the value \"none\". If set to NULL it defaults to the accounts default vat code, if the account has any.",
            "nullable": true
          },
          "isPaymentForVoucherId": {
            "type": "string",
            "description": "The id for a voucher for which this ledger item is a payment.\r\nIf this propety has a value the AccountNumber cannot have a value.",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LedgerItemModel": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier to identify a ledger item.",
            "format": "uuid"
          },
          "version": {
            "type": "string",
            "description": "The version for the ledger item. To avoid concurrency issues.",
            "nullable": true,
            "example": "AAAAAAYb0Eo1"
          }
        },
        "additionalProperties": false,
        "description": "Model for identifying a ledger item"
      },
      "LedgerItemModelV2": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A optional unique identifier for the ledger item.\r\nRequired when updating an existing ledger item.",
            "format": "uuid",
            "nullable": true,
            "example": "bf453202-d755-4602-aae0-f79819fb7ef0"
          },
          "version": {
            "type": "string",
            "description": "A required version number to identify",
            "nullable": true
          },
          "voucherNumber": {
            "type": "integer",
            "description": "The number of the voucher that will be created or updated.",
            "format": "int32",
            "nullable": true
          },
          "voucherDate": {
            "type": "string",
            "description": "The date of the voucher. This should be in the format yyyy-mm-dd e.g. 2015-12-02",
            "nullable": true,
            "example": "2022-05-13"
          },
          "fileGuid": {
            "type": "string",
            "description": "The guid of an uploaded file to connect to the purchase voucher, this\r\nwill typically be an image of the voucher.",
            "nullable": true,
            "example": "web0crmck5v0ndcx3313g6zn61tc7wgc"
          },
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LedgerItemLineModelV2"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LedgerItemReadModel": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier to identify a ledger item.",
            "format": "uuid"
          },
          "version": {
            "type": "string",
            "description": "The version for the ledger item. To avoid concurrency issues.",
            "nullable": true,
            "example": "AAAAAAYb0Eo1"
          }
        },
        "additionalProperties": false,
        "description": "Model for a ledger item"
      },
      "LedgerItemStatusModel": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier to identify a ledger item.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Model for identifying a ledger item"
      },
      "LedgerItemStatusReadModel": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier to identify a ledger item.",
            "format": "uuid"
          },
          "version": {
            "type": "string",
            "description": "The version for the ledger item. To avoid concurrency issues.",
            "nullable": true,
            "example": "AAAAAAYb0Eo1"
          },
          "status": {
            "type": "string",
            "description": "Status for the ledger item. Possible values are Draft, PendingBooking and Booked.",
            "nullable": true,
            "example": "Draft"
          },
          "voucherNumber": {
            "type": "integer",
            "description": "The assigned voucher number. If `null`, no voucher number is assgined yet.",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Model for the ledger item status"
      },
      "LogoType": {
        "enum": [
          "Image",
          "Letters"
        ],
        "type": "string",
        "description": "Type of logo for the template"
      },
      "MailoutTemplateReadModel": {
        "required": [
          "addVoucherAsPdfAttachment"
        ],
        "type": "object",
        "properties": {
          "sender": {
            "type": "string",
            "description": "Sender email. Defaults to organization email if left empty.",
            "nullable": true,
            "example": "awesome@dinero.dk"
          },
          "receiver": {
            "type": "string",
            "description": "Receiver email. Defaults to contact email if left empty. If left empty, the contact needs to have an email, otherwise it will cause a bad request.\r\nFor multiple receivers a comma separated list is also allowed. Fx 'customer@dinero.dk,extrareceiver@dinero.dk'",
            "nullable": true,
            "example": "customer@dinero.dk"
          },
          "subject": {
            "type": "string",
            "description": "The subject of the email. Defaults to '{Type} {Number}' (according to the selected invoice language). Fx 'Invoice 3', 'Credit note 4' or 'Offer 12'.",
            "nullable": true,
            "example": "Email subject."
          },
          "message": {
            "type": "string",
            "description": "Body of the email. If set, then it MUST contain the tag: [link-to-pdf], so that a link to the pdf can be included.\r\nIf left empty, defaults to template created in dinero.",
            "nullable": true,
            "example": "Here is my personal text. Be sure to include a link tag! Link to PDF: [link-to-pdf]"
          },
          "addVoucherAsPdfAttachment": {
            "type": "boolean",
            "description": "Defaults to invoice settings (Fakturaindstillinger > Standard udsendelses-indstillinger). If true, the voucher will be attached to the email as pdf.",
            "example": true
          }
        },
        "additionalProperties": false,
        "description": "Model for the template of the email for an invoice / creditnote / tradeoffer"
      },
      "MailoutTemplateReadModelV2": {
        "required": [
          "addVoucherAsPdfAttachment",
          "sendAsSms"
        ],
        "type": "object",
        "properties": {
          "sender": {
            "type": "string",
            "description": "Sender email. Defaults to organization email if left empty.",
            "nullable": true,
            "example": "awesome@dinero.dk"
          },
          "receiver": {
            "type": "string",
            "description": "Receiver email. Defaults to contact email if left empty. If left empty, the contact needs to have an email, otherwise it will cause a bad request.\r\nFor multiple receivers a comma separated list is also allowed. Fx 'customer@dinero.dk,extrareceiver@dinero.dk'",
            "nullable": true,
            "example": "customer@dinero.dk"
          },
          "subject": {
            "type": "string",
            "description": "The subject of the email. Defaults to '{Type} {Number}' (according to the selected invoice language). Fx 'Invoice 3', 'Credit note 4' or 'Offer 12'.",
            "nullable": true,
            "example": "Email subject."
          },
          "message": {
            "type": "string",
            "description": "Body of the email. If set, then it MUST contain the tag: [link-to-pdf], so that a link to the pdf can be included.\r\nIf left empty, defaults to template created in dinero.",
            "nullable": true,
            "example": "Here is my personal text. Be sure to include a link tag! Link to PDF: [link-to-pdf]"
          },
          "addVoucherAsPdfAttachment": {
            "type": "boolean",
            "description": "Defaults to invoice settings (Fakturaindstillinger > Standard udsendelses-indstillinger). If true, the voucher will be attached to the email as pdf.",
            "example": true
          },
          "sendAsSms": {
            "type": "boolean"
          },
          "smsReceiverPhoneNumber": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "V2 Model for the template of the email for an invoice / creditnote / tradeoffer"
      },
      "ManuelVoucherCreateModel": {
        "type": "object",
        "properties": {
          "voucherDate": {
            "type": "string",
            "description": "The date of the voucher",
            "nullable": true,
            "example": "2022-05-14"
          },
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ManuelVoucherLineCreateModel"
            },
            "description": "The lines of the voucher",
            "nullable": true
          },
          "fileGuid": {
            "type": "string",
            "description": "Guid of the file associated with the voucher, optional value",
            "nullable": true,
            "example": "de0ed9ee-c187-4fd2-944c-fb6f6578df14"
          },
          "externalReference": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "Your external id\r\nThis can be used for ID'ing in external apps/services e.g. a web shop.\r\nThe maximum length is 128 characters",
            "nullable": true,
            "example": "e.g. WebShopID:42"
          }
        },
        "additionalProperties": false,
        "description": "Model used to create a new manuel voucher"
      },
      "ManuelVoucherLineCreateModel": {
        "required": [
          "amount"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the line",
            "nullable": true,
            "example": "Køb af produkt"
          },
          "accountNumber": {
            "type": "integer",
            "description": "The account number to book on",
            "format": "int32",
            "nullable": true,
            "example": 55000
          },
          "balancingAccountNumber": {
            "type": "integer",
            "description": "The account number to balance with",
            "format": "int32",
            "nullable": true,
            "example": 2000
          },
          "amount": {
            "type": "number",
            "description": "The amount of money in the line, amount should include VAT when VAT type is purchase and exclude VAT when VAT type is sale or the VAT type is foreign to Denmark",
            "format": "double",
            "example": 100
          },
          "accountVatCode": {
            "type": "string",
            "description": "Vat code for the selected account number. The value should be an existing VAT code e.g. I25, UVC, KUNS etc.\r\nThe account VAT type can be suppressed by providing the value \"none\". If set to NULL it defaults to the accounts default vat code, if the account has any.",
            "nullable": true,
            "example": "NULL"
          },
          "balancingAccountVatCode": {
            "type": "string",
            "description": "Vat code for the selected balancing account number. The value should be an existing VAT code e.g. I25, UVC, KUNS etc.\r\nThe balancing account VAT type can be suppressed by providing the value \"none\". If set to NULL it defaults to the accounts default vat code, if the account has any.",
            "nullable": true,
            "example": "I25"
          }
        },
        "additionalProperties": false,
        "description": "Write model for creating a new line in a manuel voucher"
      },
      "ManuelVoucherLineReadModel": {
        "required": [
          "amountExclVatValue",
          "amountInclVatValue",
          "vatAmountValue"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the line",
            "nullable": true,
            "example": "Sale of things"
          },
          "amountExclVatValue": {
            "type": "number",
            "description": "Amount on the line excluding VAT",
            "format": "double",
            "example": 80
          },
          "amountInclVatValue": {
            "type": "number",
            "description": "Amount on the line including VAT",
            "format": "double",
            "example": 100
          },
          "vatAmountValue": {
            "type": "number",
            "description": "Amount in VAT on the line",
            "format": "double",
            "example": 20
          },
          "accountNumber": {
            "type": "integer",
            "description": "The account number the line books on",
            "format": "int32",
            "nullable": true,
            "example": 55000
          },
          "balancingAccountNumber": {
            "type": "integer",
            "description": "The account number the line balances on",
            "format": "int32",
            "nullable": true,
            "example": 1000
          },
          "accountVatCode": {
            "type": "string",
            "description": "Vat code for the selected account number. The value should be an existing VAT code e.g. I25, UVC, KUNS etc.\r\nThe account VAT type can be suppressed by providing the value \"none\". If set to NULL it defaults to the accounts default vat code, if the account has any.",
            "nullable": true,
            "example": "NULL"
          },
          "balancingAccountVatCode": {
            "type": "string",
            "description": "Vat code for the selected balancing account number. The value should be an existing VAT code e.g. U25, I25, UVC, KUNS etc.\r\nThe balancing account VAT type can be suppressed by providing the value \"none\". If set to NULL it defaults to the accounts default vat code, if the account has any.",
            "nullable": true,
            "example": "U25"
          },
          "currencyKey": {
            "type": "string",
            "description": "Currency of the line amount",
            "nullable": true
          },
          "amountInForeignCurrency": {
            "type": "number",
            "description": "The amount in foreign currency for a manual voucher line.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Read model for lines"
      },
      "ManuelVoucherReadModel": {
        "required": [
          "guid",
          "totalExclVat",
          "totalInclVat"
        ],
        "type": "object",
        "properties": {
          "voucherNumber": {
            "type": "integer",
            "description": "The vouchers number",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "voucherDate": {
            "type": "string",
            "description": "Date of the voucher",
            "nullable": true,
            "example": "2022-09-02"
          },
          "totalInclVat": {
            "type": "number",
            "description": "Obsolete",
            "format": "double",
            "example": 100
          },
          "totalExclVat": {
            "type": "number",
            "description": "Obsolete",
            "format": "double",
            "example": 80
          },
          "fileGuid": {
            "type": "string",
            "description": "Guid of the file associated with the voucher",
            "nullable": true,
            "example": "687f0b3b-7de5-4a4c-b2bd-7b4b761bbf60s"
          },
          "guid": {
            "type": "string",
            "description": "Guid of the voucher",
            "format": "uuid",
            "example": "69c2d72d-d3d2-401a-aa4d-b39ec4c8be26"
          },
          "creditNoteFor": {
            "type": "string",
            "description": "Id of the purchase voucher for which the manual voucher is a credit note.\r\nA manual voucher can only be a credit note in the case where it\r\nis a credit note for a cash purchase voucher. In this case the manual voucher\r\nmight be called a PurchaseCreditNoteCash (as contrasted to the more normal\r\nPruchaseCreditNote which might be a credit note for a purchase invoice).",
            "format": "uuid",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "Voucher status: Draft, Editing or Booked",
            "nullable": true,
            "example": "Draft"
          },
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ManuelVoucherLineReadModel"
            },
            "description": "List of the lines on the voucher",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "description": "Timestamp used to validate version in case of updating",
            "nullable": true,
            "example": "00000000000017B7"
          },
          "externalReference": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "Your external id\r\nThis can be used for ID'ing in external apps/services e.g. a web shop.\r\nThe maximum length is 128 characters",
            "nullable": true,
            "example": "e.g. WebShopID:42"
          },
          "bookedByType": {
            "type": "string",
            "description": "Where the voucher was booked from in the system.\r\nThe available types are Ukendt, Web, Assistent, Mobil-app, Pensopay, System, Kassekladde, Kontingentopkrævning, Abonnement and API (with client id)",
            "nullable": true,
            "example": "Web"
          },
          "bookedByUsername": {
            "type": "string",
            "description": "The username of the user that booked the voucher",
            "nullable": true,
            "example": "john.doe@email.com"
          },
          "bookingTime": {
            "type": "string",
            "description": "The date for when the voucher is booked",
            "nullable": true,
            "example": "2022-05-02"
          }
        },
        "additionalProperties": false,
        "description": "The model that is returned when getting a manuel voucher"
      },
      "ManuelVoucherUpdateModel": {
        "required": [
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "timestamp": {
            "minLength": 1,
            "type": "string",
            "description": "Timestamp to verify version before editing, use the timestamp value from last time get",
            "example": "00000000000017B7"
          },
          "voucherDate": {
            "type": "string",
            "description": "The date of the voucher, uses yyyy-MM-dd format",
            "nullable": true,
            "example": "2022-05-22"
          },
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ManuelVoucherLineCreateModel"
            },
            "description": "The lines of the voucher",
            "nullable": true
          },
          "fileGuid": {
            "type": "string",
            "description": "Guid of the file associated with the voucher, optional value",
            "nullable": true,
            "example": "pa2halkrpgo3oho45hj0dlkfrro4ilf"
          },
          "externalReference": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "Your external id\r\nThis can be used for ID'ing in external apps/services e.g. a web shop.\r\nThe maximum length is 128 characters",
            "nullable": true,
            "example": "e.g. WebShopID:42"
          }
        },
        "additionalProperties": false,
        "description": "Model used to update a manuel voucher"
      },
      "MerchantSignupModel": {
        "required": [
          "bankDepositAccountNumber"
        ],
        "type": "object",
        "properties": {
          "attPerson": {
            "type": "string",
            "nullable": true
          },
          "danishVatNumber": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "website": {
            "type": "string",
            "nullable": true
          },
          "businessModelDescription": {
            "type": "string",
            "nullable": true
          },
          "iban": {
            "type": "string",
            "nullable": true
          },
          "bankDepositAccountNumber": {
            "type": "integer",
            "format": "int32"
          },
          "street": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "zipCode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MerchantViewModel": {
        "required": [
          "isActive",
          "isApproved",
          "isDeclined",
          "manuallyDisabled",
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "integer",
            "format": "int32"
          },
          "accountId": {
            "type": "string",
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          },
          "isApproved": {
            "type": "boolean"
          },
          "isDeclined": {
            "type": "boolean"
          },
          "manuallyDisabled": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "MobilePayStartIntegrationModel": {
        "required": [
          "depositAccountNumber"
        ],
        "type": "object",
        "properties": {
          "depositAccountNumber": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "OrganizationCreateModel": {
        "required": [
          "companyType",
          "currentAccountingYear",
          "firstAccountingYear",
          "hasAcceptedDataProcessingAgreement"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "zipCode": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "companyType": {
            "$ref": "#/components/schemas/CompanyTypeCodeViewModel"
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "nullable": true
          },
          "cvrNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "firstAccountingYear": {
            "$ref": "#/components/schemas/DateRangeViewModel"
          },
          "currentAccountingYear": {
            "$ref": "#/components/schemas/DateRangeViewModel"
          },
          "isVatFree": {
            "type": "boolean",
            "nullable": true
          },
          "isTaxFreeUnion": {
            "type": "boolean",
            "nullable": true
          },
          "attName": {
            "type": "string",
            "nullable": true
          },
          "streetName": {
            "type": "string",
            "nullable": true
          },
          "houseNumber": {
            "type": "string",
            "nullable": true
          },
          "floor": {
            "type": "string",
            "nullable": true
          },
          "door": {
            "type": "string",
            "nullable": true
          },
          "hasAcceptedDataProcessingAgreement": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "OrganizationCreatedViewModel": {
        "required": [
          "firstAccountingYearCreated",
          "isUsersFirstOrganization",
          "organizationId"
        ],
        "type": "object",
        "properties": {
          "organizationId": {
            "type": "integer",
            "description": "Unique identifier of an organization.",
            "format": "int32"
          },
          "firstAccountingYearCreated": {
            "type": "boolean",
            "description": "Value indicating whether the first accounting year is created automatically."
          },
          "isUsersFirstOrganization": {
            "type": "boolean",
            "description": "Value indicating whether the user is the first user in the organization."
          }
        },
        "additionalProperties": false,
        "description": "View model for creating an organization."
      },
      "OrganizationReadModel": {
        "required": [
          "isTaxFreeUnion",
          "isVatFree"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the organization",
            "nullable": true,
            "example": "My Consultancy Aps"
          },
          "id": {
            "type": "integer",
            "description": "Id of the organization",
            "format": "int32",
            "nullable": true,
            "example": 42
          },
          "type": {
            "type": "string",
            "description": "Whether the organization is VIP or default",
            "nullable": true,
            "example": "Default"
          },
          "isPro": {
            "type": "boolean",
            "description": "Whether the organization has Dinero Pro access",
            "nullable": true,
            "example": true
          },
          "isPayingPro": {
            "type": "boolean",
            "description": "Whether the organization has a paid Dinero Pro subscription",
            "nullable": true,
            "example": true
          },
          "isVatFree": {
            "type": "boolean",
            "description": "If an organization does not use VAT",
            "example": false
          },
          "email": {
            "type": "string",
            "description": "Email of the organization",
            "nullable": true,
            "example": "my@company-email.dk"
          },
          "phone": {
            "type": "string",
            "description": "Organization phone number",
            "nullable": true,
            "example": "35731849"
          },
          "street": {
            "type": "string",
            "description": "Organization street",
            "nullable": true,
            "example": "Gærtorvet 1"
          },
          "city": {
            "type": "string",
            "description": "Organization city",
            "nullable": true,
            "example": "København"
          },
          "zipCode": {
            "type": "string",
            "description": "Organization zip code",
            "nullable": true,
            "example": "1799"
          },
          "attPerson": {
            "type": "string",
            "description": "Att. person of the organization",
            "nullable": true,
            "example": "Hans Hansen"
          },
          "isTaxFreeUnion": {
            "type": "boolean",
            "description": "Whether the organization is a tax free union",
            "example": false
          },
          "vatNumber": {
            "type": "string",
            "description": "Vat number for organization",
            "nullable": true
          },
          "countryKey": {
            "type": "string",
            "description": "Organization country code",
            "nullable": true
          },
          "website": {
            "type": "string",
            "description": "Website for organization",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Organization information"
      },
      "OrganizationReadModelV2": {
        "required": [
          "id",
          "isTaxFreeUnion",
          "isVatFree",
          "subscription"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the organization",
            "nullable": true,
            "example": "My Consultancy Aps"
          },
          "id": {
            "type": "integer",
            "description": "Id of the organization",
            "format": "int32",
            "example": 42
          },
          "companyTypeKey": {
            "type": "string",
            "description": "The key of the company type.",
            "nullable": true
          },
          "isVatFree": {
            "type": "boolean",
            "description": "Whether an organization uses VAT",
            "example": false
          },
          "email": {
            "type": "string",
            "description": "Email of the organization",
            "nullable": true,
            "example": "my@company-email.dk"
          },
          "phone": {
            "type": "string",
            "description": "Phone number of the organization",
            "nullable": true,
            "example": "35731849"
          },
          "street": {
            "type": "string",
            "description": "Street of the organization",
            "nullable": true,
            "example": "Gærtorvet 1"
          },
          "city": {
            "type": "string",
            "description": "City of the organization",
            "nullable": true,
            "example": "København"
          },
          "zipCode": {
            "type": "string",
            "description": "Zip code of the organization",
            "nullable": true,
            "example": "1799"
          },
          "attPerson": {
            "type": "string",
            "description": "Attention person of the organization",
            "nullable": true,
            "example": "John Doe"
          },
          "isTaxFreeUnion": {
            "type": "boolean",
            "description": "Whether the organization is a tax-free union",
            "example": false
          },
          "vatNumber": {
            "type": "string",
            "description": "Vat number of the organization",
            "nullable": true,
            "example": "DK12345678"
          },
          "countryKey": {
            "type": "string",
            "description": "Country key of the organization",
            "nullable": true,
            "example": "DK"
          },
          "website": {
            "type": "string",
            "description": "Website of the organization",
            "nullable": true
          },
          "subscription": {
            "$ref": "#/components/schemas/SubscriptionReadModel"
          }
        },
        "additionalProperties": false,
        "description": "Organization information"
      },
      "OrganizationUpdateModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Represents the name of the organization.",
            "nullable": true
          },
          "companyTypeKey": {
            "type": "string",
            "description": "Represents the CompanyTypeKey of an organization.",
            "nullable": true
          },
          "street": {
            "type": "string",
            "description": "Represents a street address.",
            "nullable": true
          },
          "zipCode": {
            "type": "string",
            "description": "Represents a zip code.",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "Represents a city in an address.",
            "nullable": true
          },
          "countryKey": {
            "type": "string",
            "description": "Represents the country key of an organization's address.",
            "nullable": true
          },
          "eanNumber": {
            "type": "string",
            "description": "Represents the EAN (European Article Number) number of an organization.",
            "nullable": true
          },
          "vatNumber": {
            "type": "string",
            "description": "Represents the VAT number of an organization.",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "description": "Represents the phone number of the organization.",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Represents the email address of the organization.",
            "nullable": true
          },
          "webpage": {
            "type": "string",
            "description": "Represents a webpage property of an organization.",
            "nullable": true
          },
          "attPerson": {
            "type": "string",
            "description": "Represents a person who is associated with an organization.",
            "nullable": true
          },
          "streetName": {
            "type": "string",
            "description": "Represents the street name of an organization's address.",
            "nullable": true
          },
          "houseNumber": {
            "type": "string",
            "description": "Gets or sets the house number of the organization's address.",
            "nullable": true
          },
          "floor": {
            "type": "string",
            "description": "Represents the Floor of an organization's address.",
            "nullable": true
          },
          "door": {
            "type": "string",
            "description": "Represents a door in an organization's address.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents the update model for an organization."
      },
      "OrganizationVerifiedReadModel": {
        "required": [
          "isVerified"
        ],
        "type": "object",
        "properties": {
          "isVerified": {
            "type": "boolean",
            "description": "Specifies if organization is currently verified"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "verificationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Organization information for verification status"
      },
      "PaginationDetails": {
        "required": [
          "maxPageSizeAllowed",
          "page",
          "pageSize",
          "result",
          "resultWithoutFilter"
        ],
        "type": "object",
        "properties": {
          "maxPageSizeAllowed": {
            "type": "integer",
            "description": "Maximum number of result pr. page.",
            "format": "int32",
            "example": 1000
          },
          "pageSize": {
            "type": "integer",
            "description": "Number of result pr. page.",
            "format": "int32",
            "example": 100
          },
          "result": {
            "type": "integer",
            "description": "Number of results returned in the collection.",
            "format": "int32",
            "example": 100
          },
          "resultWithoutFilter": {
            "type": "integer",
            "description": "Result count before pagination.",
            "format": "int32",
            "example": 231
          },
          "page": {
            "type": "integer",
            "description": "The 0-based page number.",
            "format": "int32",
            "example": 0
          }
        },
        "additionalProperties": false,
        "description": "Pagination details"
      },
      "PaymentCreateModel": {
        "required": [
          "amount",
          "depositAccountNumber",
          "description",
          "remainderIsFee",
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "externalReference": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "Your external id\r\nThis can be used for ID'ing in external apps/services e.g. a web shop.\r\nThe maximum length is 128 characters",
            "nullable": true,
            "example": "Fx. WebShopID:42"
          },
          "paymentDate": {
            "type": "string",
            "description": "The date of the payment. This should be in the format YYYY-MM-DD e.g. 2015-12-02. Defaults to today.",
            "nullable": true,
            "example": "2022-06-01"
          },
          "description": {
            "minLength": 1,
            "type": "string",
            "description": "Description. Fx.: 'Payment of invoice'.",
            "example": "Payment of invoice"
          },
          "amount": {
            "type": "number",
            "description": "Amount. Has to be different from 0.",
            "format": "double",
            "example": 20
          },
          "timestamp": {
            "minLength": 1,
            "type": "string",
            "description": "Version of the invoice",
            "example": "00000000020A5EA8"
          },
          "depositAccountNumber": {
            "type": "integer",
            "description": "Account number of an deposit account",
            "format": "int32",
            "example": 55000
          },
          "remainderIsFee": {
            "type": "boolean",
            "description": "Whether the remaining amount of the voucher should be added as a fee.",
            "example": false
          },
          "amountInForeignCurrency": {
            "type": "number",
            "description": "When handling a payment for a voucher with a foreign currency, this property is required.\r\nThis property together with Amount will be used to calculate exchange rate.",
            "format": "double",
            "nullable": true,
            "example": 15
          }
        },
        "additionalProperties": false,
        "description": "Model for creating a payment"
      },
      "PaymentInformationReadModel": {
        "required": [
          "amount",
          "description",
          "exchangeRate",
          "guid"
        ],
        "type": "object",
        "properties": {
          "externalReference": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "Your external id\r\nThis can be used for ID'ing in external apps/services e.g. a web shop.\r\nThe maximum length is 128 characters",
            "nullable": true,
            "example": "Fx. WebShopID:42"
          },
          "paymentDate": {
            "type": "string",
            "description": "The date of the payment. This should be in the format YYYY-MM-DD e.g. 2015-12-02. Defaults to today.",
            "nullable": true,
            "example": "2022-06-01"
          },
          "description": {
            "minLength": 1,
            "type": "string",
            "description": "Description. Fx.: 'Payment of invoice'.",
            "example": "Payment of invoice"
          },
          "amount": {
            "type": "number",
            "description": "Amount. Has to be different from 0.",
            "format": "double",
            "example": 20
          },
          "guid": {
            "type": "string",
            "description": "The Guid of the payment",
            "format": "uuid"
          },
          "depositAccountNumber": {
            "type": "integer",
            "description": "Account number of an deposit account. Can be null if paid by ledger, creditnote or invoice.",
            "format": "int32",
            "nullable": true,
            "example": 55100
          },
          "currency": {
            "type": "string",
            "description": "The currency of the payment amount, default currency is DKK.",
            "nullable": true,
            "example": "EUR"
          },
          "exchangeRate": {
            "type": "number",
            "description": "The exchange rate for the payment currency to DKK, defaults to 100 when currency is DKK.",
            "format": "double",
            "example": 745.6
          },
          "paymentClass": {
            "type": "string",
            "description": "Describes if a payment is for an invoice or a credit note",
            "nullable": true
          },
          "relatedVoucherId": {
            "type": "string",
            "description": "Id of the related voucher, if any",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaymentMean": {
        "enum": [
          "Domestic",
          "International",
          "FIK"
        ],
        "type": "string"
      },
      "PaymentReadModel": {
        "required": [
          "amount",
          "description",
          "exchangeRate",
          "guid"
        ],
        "type": "object",
        "properties": {
          "externalReference": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "Your external id\r\nThis can be used for ID'ing in external apps/services e.g. a web shop.\r\nThe maximum length is 128 characters",
            "nullable": true,
            "example": "Fx. WebShopID:42"
          },
          "paymentDate": {
            "type": "string",
            "description": "The date of the payment. This should be in the format YYYY-MM-DD e.g. 2015-12-02. Defaults to today.",
            "nullable": true,
            "example": "2022-06-01"
          },
          "description": {
            "minLength": 1,
            "type": "string",
            "description": "Description. Fx.: 'Payment of invoice'.",
            "example": "Payment of invoice"
          },
          "amount": {
            "type": "number",
            "description": "Amount. Has to be different from 0.",
            "format": "double",
            "example": 20
          },
          "guid": {
            "type": "string",
            "description": "The Guid of the payment",
            "format": "uuid"
          },
          "depositAccountNumber": {
            "type": "integer",
            "description": "Account number of an deposit account. Can be null if paid by ledger, creditnote or invoice.",
            "format": "int32",
            "nullable": true,
            "example": 55100
          },
          "currency": {
            "type": "string",
            "description": "The currency of the payment amount, default currency is DKK.",
            "nullable": true,
            "example": "EUR"
          },
          "exchangeRate": {
            "type": "number",
            "description": "The exchange rate for the payment currency to DKK, defaults to 100 when currency is DKK.",
            "format": "double",
            "example": 745.6
          },
          "paymentClass": {
            "type": "string",
            "description": "Describes if a payment is for an invoice or a credit note",
            "nullable": true
          },
          "relatedVoucherId": {
            "type": "string",
            "description": "Id of the related voucher, if any",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Model for a payment"
      },
      "PaymentReadModelV2": {
        "required": [
          "invoiceTotalIncludingReminderExpenses",
          "paidAmount",
          "remainingAmount"
        ],
        "type": "object",
        "properties": {
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentInformationReadModel"
            },
            "description": "Payments for a given voucher.",
            "nullable": true
          },
          "remainingAmount": {
            "type": "number",
            "description": "The remaining amount to be paid. Might be negative if the invoice is overpaid.",
            "format": "double",
            "example": 0
          },
          "paidAmount": {
            "type": "number",
            "description": "The sum of the registered payments on the invoice.",
            "format": "double",
            "example": 1000
          },
          "invoiceTotalIncludingReminderExpenses": {
            "type": "number",
            "description": "The total amount of the invoice, including reminder fees, if any.",
            "format": "double",
            "example": 1000
          }
        },
        "additionalProperties": false,
        "description": "Model for a payment"
      },
      "PossibleEndDatesModel": {
        "type": "object",
        "properties": {
          "endDates": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "date-time"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PrimoBalanceApiModel": {
        "required": [
          "accountNumber",
          "amount"
        ],
        "type": "object",
        "properties": {
          "accountName": {
            "type": "string",
            "description": "Account name",
            "nullable": true,
            "example": "Omsætning"
          },
          "accountNumber": {
            "type": "integer",
            "description": "Account number",
            "format": "int32",
            "example": 1300
          },
          "amount": {
            "type": "number",
            "description": "Total amount",
            "format": "double",
            "example": 0
          }
        },
        "additionalProperties": false
      },
      "ProductCreateModel": {
        "required": [
          "accountNumber",
          "baseAmountValue",
          "quantity",
          "unit"
        ],
        "type": "object",
        "properties": {
          "productNumber": {
            "type": "string",
            "description": "Number of the product (Varekode)",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Product name",
            "nullable": true,
            "example": "Consulting"
          },
          "baseAmountValue": {
            "type": "number",
            "description": "Amount excl. VAT",
            "format": "double",
            "example": 20
          },
          "quantity": {
            "type": "number",
            "description": "Quantity",
            "format": "double",
            "example": 5
          },
          "accountNumber": {
            "type": "integer",
            "description": "Account number",
            "format": "int32",
            "example": 1000
          },
          "unit": {
            "minLength": 1,
            "type": "string",
            "description": "Product unit. Available unit types: hours, parts, km, day, week, month, kilogram, cubicMetre, set, litre, box, case, carton, metre, package, shipment, squareMetre, session, tonne.",
            "example": "parts"
          },
          "externalReference": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "Your external id\r\nThis can be used for ID'ing in external apps/services e.g. a web shop.\r\nThe maximum length is 128 characters",
            "nullable": true,
            "example": "Fx. WebShopID:42"
          },
          "comment": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "Comment for the product. \r\nThe comment will be shown on invoices with the product by default.",
            "nullable": true,
            "example": "Invoiced by the hour."
          }
        },
        "additionalProperties": false,
        "description": "Product information"
      },
      "ProductCreatedResult": {
        "required": [
          "productGuid"
        ],
        "type": "object",
        "properties": {
          "productGuid": {
            "type": "string",
            "description": "The guid of the product",
            "format": "uuid",
            "example": "f5a6eb71-e25c-4c30-baff-8e2cc43a9ff2"
          }
        },
        "additionalProperties": false,
        "description": "The response of succesfull productcreation"
      },
      "ProductReadModel": {
        "required": [
          "accountNumber",
          "baseAmountValue",
          "baseAmountValueInclVat",
          "createdAt",
          "productGuid",
          "quantity",
          "totalAmount",
          "totalAmountInclVat",
          "unit",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "productNumber": {
            "type": "string",
            "description": "Number of the product (Varekode)",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Product name",
            "nullable": true,
            "example": "Consulting"
          },
          "baseAmountValue": {
            "type": "number",
            "description": "Amount excl. VAT",
            "format": "double",
            "example": 20
          },
          "quantity": {
            "type": "number",
            "description": "Quantity",
            "format": "double",
            "example": 5
          },
          "accountNumber": {
            "type": "integer",
            "description": "Account number",
            "format": "int32",
            "example": 1000
          },
          "unit": {
            "minLength": 1,
            "type": "string",
            "description": "Product unit. Available unit types: hours, parts, km, day, week, month, kilogram, cubicMetre, set, litre, box, case, carton, metre, package, shipment, squareMetre, session, tonne.",
            "example": "parts"
          },
          "externalReference": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "Your external id\r\nThis can be used for ID'ing in external apps/services e.g. a web shop.\r\nThe maximum length is 128 characters",
            "nullable": true,
            "example": "Fx. WebShopID:42"
          },
          "comment": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "Comment for the product. \r\nThe comment will be shown on invoices with the product by default.",
            "nullable": true,
            "example": "Invoiced by the hour."
          },
          "createdAt": {
            "type": "string",
            "description": "Time at which the Product was created",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "description": "Time at which the Product was last updated",
            "format": "date-time"
          },
          "deletedAt": {
            "type": "string",
            "description": "Time at which the Product was deleted",
            "format": "date-time",
            "nullable": true
          },
          "productGuid": {
            "type": "string",
            "description": "Our Guid",
            "format": "uuid"
          },
          "baseAmountValueInclVat": {
            "type": "number",
            "description": "Amount incl. VAT",
            "format": "double",
            "example": 25
          },
          "totalAmount": {
            "type": "number",
            "description": "Sum amount for the product excl. VAT (base amount X quanity)",
            "format": "double",
            "example": 100
          },
          "totalAmountInclVat": {
            "type": "number",
            "description": "Sum amount for the product incl. VAT (base amount incl VAT X quanity)",
            "format": "double",
            "example": 125
          }
        },
        "additionalProperties": false,
        "description": "Product information for a single Product"
      },
      "ProductReadModelDineroCollection": {
        "required": [
          "pagination"
        ],
        "type": "object",
        "properties": {
          "collection": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductReadModel"
            },
            "description": "Collection containing the result of the request.",
            "nullable": true
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationDetails"
          }
        },
        "additionalProperties": false
      },
      "ProductUpdateModel": {
        "required": [
          "accountNumber",
          "baseAmountValue",
          "quantity",
          "unit"
        ],
        "type": "object",
        "properties": {
          "productNumber": {
            "type": "string",
            "description": "Number of the product (Varekode)",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Product name",
            "nullable": true,
            "example": "Consulting"
          },
          "baseAmountValue": {
            "type": "number",
            "description": "Amount excl. VAT",
            "format": "double",
            "example": 20
          },
          "quantity": {
            "type": "number",
            "description": "Quantity",
            "format": "double",
            "example": 5
          },
          "accountNumber": {
            "type": "integer",
            "description": "Account number",
            "format": "int32",
            "example": 1000
          },
          "unit": {
            "minLength": 1,
            "type": "string",
            "description": "Product unit. Available unit types: hours, parts, km, day, week, month, kilogram, cubicMetre, set, litre, box, case, carton, metre, package, shipment, squareMetre, session, tonne.",
            "example": "parts"
          },
          "externalReference": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "Your external id\r\nThis can be used for ID'ing in external apps/services e.g. a web shop.\r\nThe maximum length is 128 characters",
            "nullable": true,
            "example": "Fx. WebShopID:42"
          },
          "comment": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "Comment for the product. \r\nThe comment will be shown on invoices with the product by default.",
            "nullable": true,
            "example": "Invoiced by the hour."
          }
        },
        "additionalProperties": false,
        "description": "Product information for a product"
      },
      "PurchaseCreditNoteCreateModel": {
        "required": [
          "lines"
        ],
        "type": "object",
        "properties": {
          "guid": {
            "type": "string",
            "description": "Optional guid for the object. If not set the system will create a guid returned in the response.",
            "format": "uuid",
            "nullable": true,
            "example": "3a315ad3-ddcc-419d-9fc5-219280ae4816"
          },
          "creditNoteFor": {
            "type": "string",
            "description": "Optional id of the invoice the credit note is based on.",
            "format": "uuid",
            "nullable": true
          },
          "fileGuid": {
            "type": "string",
            "description": "Optional id of the file associated with the purchase credit note.\r\nDefaults to the id of the file from the purchase voucher.",
            "nullable": true,
            "example": "web0crmck5v0ndcx3313g6zn61tc7wgc"
          },
          "contactGuid": {
            "type": "string",
            "description": "Dinero contact guid. Optional for creating a draft, required for booking.",
            "format": "uuid",
            "nullable": true
          },
          "date": {
            "type": "string",
            "description": "Date of the credit note",
            "format": "date-time",
            "nullable": true,
            "example": "2022-05-16"
          },
          "currency": {
            "type": "string",
            "description": "The currency used on the credit note. Defaults to DKK if null. Dinero will assign the currency rate from credit note date for the given currency. Currencies are given in format: DKK, EUR, USD etc...",
            "nullable": true,
            "example": "DKK"
          },
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PurchaseVoucherLineCreateModel"
            },
            "description": "User supplied credit note lines. Minimum one."
          }
        },
        "additionalProperties": false
      },
      "PurchaseCreditNoteReadModel": {
        "required": [
          "guid"
        ],
        "type": "object",
        "properties": {
          "guid": {
            "type": "string",
            "description": "Guid of the credit note",
            "format": "uuid",
            "example": "0713954e-f3b0-4fb0-8b95-0dc0772d5ea0"
          },
          "creditNoteFor": {
            "type": "string",
            "description": "Id of the invoice the credit note is based on.",
            "format": "uuid",
            "nullable": true
          },
          "fileGuid": {
            "type": "string",
            "description": "Id of the file associated with the purchase credit note.",
            "nullable": true
          },
          "creditNoteNumber": {
            "type": "integer",
            "description": "Number of the purchase credit note",
            "format": "int64",
            "nullable": true,
            "example": 7
          },
          "contactGuid": {
            "type": "string",
            "description": "Guid of the contact associated with the credit note",
            "format": "uuid",
            "nullable": true
          },
          "date": {
            "type": "string",
            "description": "Date of the credit note",
            "format": "date-time",
            "nullable": true,
            "example": "2022-05-16"
          },
          "currency": {
            "type": "string",
            "description": "The currency used on the credit note. Defaults to DKK if null.",
            "nullable": true,
            "example": "DKK"
          },
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PurchaseVoucherLineReadModel"
            },
            "description": "The list of lines associated with the credit note",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "description": "Timestamp used for verifying version when updating or changing the credit note",
            "nullable": true,
            "example": "00000000020A5EA8"
          },
          "status": {
            "type": "string",
            "description": "The status of a purchase credit note can be: Draft, Paid, Editing, Booked, Overdue, or Overpaid",
            "nullable": true,
            "example": "Paid"
          },
          "bookedByType": {
            "type": "string",
            "description": "Where the credit note was booked from in the system.\r\nthe available types are Ukendt, Web, Assistent, Mobil-app, Pensopay, System, Kassekladde, Kontingentopkrævning, Abonnement and API (with client id)",
            "nullable": true,
            "example": "Web"
          },
          "bookedByUsername": {
            "type": "string",
            "description": "The username of the user that booked the credit note",
            "nullable": true,
            "example": "john.doe@email.com"
          },
          "bookingTime": {
            "type": "string",
            "description": "The date for when the credit note is booked",
            "nullable": true,
            "example": "2022-05-02"
          },
          "totals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PurchaseVoucherTotalReadModel"
            },
            "description": "The total sums of the purchase voucher credit note",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PurchaseCreditNoteUpdateModel": {
        "required": [
          "lines",
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "creditNoteFor": {
            "type": "string",
            "description": "Optional id of the invoice the credit note is based on.",
            "format": "uuid",
            "nullable": true
          },
          "fileGuid": {
            "type": "string",
            "description": "Optional id of the file associated with the purchase credit note.\r\nDefaults to the id of the file from the purchase voucher.",
            "nullable": true,
            "example": "web0crmck5v0ndcx3313g6zn61tc7wgc"
          },
          "contactGuid": {
            "type": "string",
            "description": "Dinero contact guid. Optional for creating a draft, required for booking.",
            "format": "uuid",
            "nullable": true
          },
          "date": {
            "type": "string",
            "description": "Date of the credit note",
            "format": "date-time",
            "nullable": true,
            "example": "2022-05-16"
          },
          "currency": {
            "type": "string",
            "description": "The currency used on the credit note. Defaults to DKK if null. Dinero will assign the currency rate from credit note date for the given currency. Currencies are given in format: DKK, EUR, USD etc...",
            "nullable": true,
            "example": "DKK"
          },
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PurchaseVoucherLineCreateModel"
            },
            "description": "User supplied credit note lines. Minimum one."
          },
          "timestamp": {
            "minLength": 1,
            "type": "string",
            "description": "Timestamp to verify version before editing, use the timestamp value from last time get",
            "example": "00000000000017B7"
          }
        },
        "additionalProperties": false
      },
      "PurchaseVoucherCreateModelV2": {
        "required": [
          "purchaseType"
        ],
        "type": "object",
        "properties": {
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PurchaseVoucherLineCreateModel"
            },
            "description": "The lines containing what has been bought, at what price, and on what account",
            "nullable": true
          },
          "voucherDate": {
            "type": "string",
            "description": "Date of the voucher",
            "nullable": true,
            "example": "2022-05-16"
          },
          "depositAccountNumber": {
            "type": "integer",
            "description": "Accountnumber of the deposit to book on, only used on cash purchases",
            "format": "int32",
            "nullable": true,
            "example": 55000
          },
          "regionKey": {
            "type": "string",
            "description": "Region the purchase was made from, can be: EU, DK or World. Only used for cash purchases",
            "nullable": true,
            "example": "DK"
          },
          "fileGuid": {
            "type": "string",
            "description": "Id of the file associated with the purchase",
            "nullable": true,
            "example": "web0crmck5v0ndcx3313g6zn61tc7wgc"
          },
          "contactGuid": {
            "type": "string",
            "description": "Guid of the contact the purchase was made from, only used for credit purchases",
            "format": "uuid",
            "nullable": true,
            "example": "75b3c512-3d11-492a-a6fb-f22acbd62878"
          },
          "paymentDate": {
            "type": "string",
            "description": "Date of payment, do not set on cash purchases, payment deadline for credit purchases",
            "nullable": true,
            "example": "2022-05-16"
          },
          "purchaseType": {
            "minLength": 1,
            "type": "string",
            "description": "Type of purchase, can be: cash or credit",
            "example": "cash"
          },
          "currencyKey": {
            "type": "string",
            "description": "Currency of the purchase, should not be set for cash purchases, defaults to DKK for credit purchases",
            "nullable": true
          },
          "externalReference": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "Your external id\r\nThis can be used for ID'ing in external apps/services e.g. a web shop.\r\nThe maximum length is 128 characters",
            "nullable": true,
            "example": "Fx. WebShopID:42"
          }
        },
        "additionalProperties": false,
        "description": "Model used for creating a new purchase voucher draft"
      },
      "PurchaseVoucherCreditPaymentCreateModel": {
        "required": [
          "amount",
          "depositAccountNumber",
          "description",
          "remainderIsFee",
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "externalReference": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "Your external id\r\nThis can be used for ID'ing in external apps/services e.g. a web shop.\r\nThe maximum length is 128 characters",
            "nullable": true,
            "example": "Fx. WebShopID:42"
          },
          "paymentDate": {
            "type": "string",
            "description": "The date of the payment. This should be in the format YYYY-MM-DD e.g. 2015-12-02. Defaults to today.",
            "nullable": true,
            "example": "2022-06-01"
          },
          "description": {
            "minLength": 1,
            "type": "string",
            "description": "Description. Fx.: 'Payment of invoice'.",
            "example": "Payment of invoice"
          },
          "amount": {
            "type": "number",
            "description": "Amount. Has to be different from 0.",
            "format": "double",
            "example": 20
          },
          "timestamp": {
            "minLength": 1,
            "type": "string",
            "description": "Version of the invoice",
            "example": "00000000020A5EA8"
          },
          "depositAccountNumber": {
            "type": "integer",
            "description": "Account number of an deposit account",
            "format": "int32",
            "example": 55000
          },
          "amountInForeignCurrency": {
            "type": "number",
            "description": "When handling a payment for a voucher with a foreign currency, this property is required.\r\nThis property together with Amount will be used to calculate exchange rate.",
            "format": "double",
            "nullable": true,
            "example": 15
          },
          "remainderIsFee": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "PurchaseVoucherFetchReadModel": {
        "required": [
          "shouldPossiblyBeFixedAsset"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "The status of a cash purchase voucher, can be: Draft, Paid, or Editing. The status of a credit purchase voucher can be: Draft, Paid, Editing, Booked, Overdue, or Overpaid",
            "nullable": true,
            "example": "Paid"
          },
          "fileGuid": {
            "type": "string",
            "description": "Guid of the file associated with the voucher, optional value",
            "nullable": true,
            "example": "pa2halkrpgo3oho45hj0dlkfrro4ilf"
          },
          "voucherNumber": {
            "type": "integer",
            "description": "Number of the voucher",
            "format": "int64",
            "nullable": true,
            "example": 7
          },
          "voucherDate": {
            "type": "string",
            "description": "Date of the purchase",
            "nullable": true,
            "example": "2022-05-02"
          },
          "paymentDate": {
            "type": "string",
            "description": "Date of the payment of the voucher, is the same as voucherdate if the purchase is cash",
            "nullable": true,
            "example": "2022-05-02"
          },
          "regionKey": {
            "type": "string",
            "description": "The region the purchase is made from, only used on cash purchases, can be: DK, EU, or World",
            "nullable": true,
            "example": "DK"
          },
          "purchaseType": {
            "type": "string",
            "description": "Type of purchase, can be cash or credit",
            "nullable": true,
            "example": "cash"
          },
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PurchaseVoucherLineReadModel"
            },
            "description": "The list of lines associated with the purchase",
            "nullable": true
          },
          "depositAccountNumber": {
            "type": "integer",
            "description": "Account number of the deposit to book on, only used for cash purchases",
            "format": "int32",
            "nullable": true,
            "example": 55000
          },
          "contactGuid": {
            "type": "string",
            "description": "Guid of the contact associated with the purchase, can only have a value on credit purchases",
            "format": "uuid",
            "nullable": true,
            "example": null
          },
          "externalReference": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "Your external id\r\nThis can be used for ID'ing in external apps/services e.g. a web shop.\r\nThe maximum length is 128 characters",
            "nullable": true,
            "example": "Fx. WebShopID:42"
          },
          "voucherTotals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PurchaseVoucherTotalReadModel"
            },
            "description": "The total sums of the purchase voucher",
            "nullable": true
          },
          "shouldPossiblyBeFixedAsset": {
            "type": "boolean",
            "description": "Indicates whether the purchase possibly should be a fixed asset, instead of a purchase."
          }
        },
        "additionalProperties": false,
        "description": "Model returned by the api when fetching purchasevouchers"
      },
      "PurchaseVoucherLineCreateModel": {
        "required": [
          "amount"
        ],
        "type": "object",
        "properties": {
          "accountNumber": {
            "type": "integer",
            "description": "Account to book this line on",
            "format": "int32",
            "nullable": true,
            "example": 2000
          },
          "description": {
            "type": "string",
            "description": "Description of what has been purchased",
            "nullable": true,
            "example": "Purchase of whatever"
          },
          "amount": {
            "type": "number",
            "description": "The amount of money paid",
            "format": "double",
            "example": 200
          },
          "vatCode": {
            "type": "string",
            "description": "The vatcode to use for the line, will be set to the default vattype for the account if null is given",
            "nullable": true,
            "example": "I25"
          },
          "accountTagName": {
            "type": "string",
            "description": "The tag used for suggesting account to book on, without # .\r\nOnly supported on V2 put and V2 post endpoints",
            "nullable": true,
            "example": "Varer"
          },
          "synonymWithMostWeight": {
            "type": "string",
            "nullable": true
          },
          "tagId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "tagVersion": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Model used for creating or updating voucherlines"
      },
      "PurchaseVoucherLineReadModel": {
        "required": [
          "amountExclVatValue",
          "amountInclVatValue",
          "vatAmountValue"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the line",
            "nullable": true,
            "example": "Purchase of something"
          },
          "vatCode": {
            "type": "string",
            "description": "Vat code for the selected account number. Use Null to use the standard VAT for chosen account.",
            "nullable": true,
            "example": "I25"
          },
          "accountNumber": {
            "type": "integer",
            "description": "The account number the line books on",
            "format": "int32",
            "nullable": true,
            "example": 2000
          },
          "amountExclVatValue": {
            "type": "number",
            "description": "Amount on the line excluding VAT",
            "format": "double",
            "example": 80
          },
          "amountInclVatValue": {
            "type": "number",
            "description": "Amount on the line including VAT",
            "format": "double",
            "example": 100
          },
          "vatAmountValue": {
            "type": "number",
            "description": "Amount in VAT on the line",
            "format": "double",
            "example": 20
          },
          "accountTagName": {
            "type": "string",
            "description": "Tag used to suggest account to book on, without #",
            "nullable": true,
            "example": "Blomster"
          },
          "accountWeightTagId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "accountWeightTagVersion": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "accountTagSynonym": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Model returned by the api as representation of voucherlines"
      },
      "PurchaseVoucherListEntryViewModel": {
        "required": [
          "bookedSource",
          "hasAnyRelatedPayments",
          "id",
          "totalInclVat",
          "voucherGuid"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "voucherNumber": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "fileGuid": {
            "type": "string",
            "nullable": true
          },
          "voucherTypeKey": {
            "type": "string",
            "nullable": true
          },
          "contactId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "contactName": {
            "type": "string",
            "nullable": true
          },
          "totalInclVat": {
            "type": "number",
            "format": "double"
          },
          "normalizedTotalInclVat": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "currencyKey": {
            "type": "string",
            "nullable": true
          },
          "voucherDate": {
            "type": "string",
            "nullable": true
          },
          "paymentDate": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "voucherGuid": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deletedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "bookedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "hasAnyRelatedPayments": {
            "type": "boolean"
          },
          "overdueText": {
            "type": "string",
            "nullable": true
          },
          "bookedSource": {
            "$ref": "#/components/schemas/VoucherBookedSource"
          }
        },
        "additionalProperties": false
      },
      "PurchaseVoucherListEntryViewModelDineroCollection": {
        "required": [
          "pagination"
        ],
        "type": "object",
        "properties": {
          "collection": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PurchaseVoucherListEntryViewModel"
            },
            "description": "Collection containing the result of the request.",
            "nullable": true
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationDetails"
          }
        },
        "additionalProperties": false
      },
      "PurchaseVoucherPaymentCalculationsReadModel": {
        "required": [
          "notPaidAmount",
          "paidAmount",
          "paymentAmount",
          "remainderAmount"
        ],
        "type": "object",
        "properties": {
          "paidAmount": {
            "type": "number",
            "description": "The paid amount of the invoice",
            "format": "double"
          },
          "remainderAmount": {
            "type": "number",
            "description": "The remainder amount which is not paid amount - payment amount",
            "format": "double"
          },
          "paymentAmount": {
            "type": "number",
            "description": "The amount of the payment",
            "format": "double"
          },
          "paymentAmountInForeignCurrency": {
            "type": "number",
            "description": "The amount of the payment in foreign currency",
            "format": "double",
            "nullable": true
          },
          "exchangeRate": {
            "type": "number",
            "description": "The exchange rate in case of foreign currency",
            "format": "double",
            "nullable": true
          },
          "currencyDifference": {
            "type": "number",
            "description": "The currency difference in case of foreign currency",
            "format": "double",
            "nullable": true
          },
          "notPaidAmount": {
            "type": "number",
            "description": "The amount that is not paid yet",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Represents the result of adding given payment."
      },
      "PurchaseVoucherPaymentForCalculationModel": {
        "required": [
          "paymentAmount"
        ],
        "type": "object",
        "properties": {
          "paymentAmount": {
            "type": "number",
            "description": "The amount of the payment",
            "format": "double"
          },
          "paymentAmountInForeignCurrency": {
            "type": "number",
            "description": "The amount of the payment in a foreign currency",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Model for fetching the changes the payment will cause"
      },
      "PurchaseVoucherReadModelV2": {
        "required": [
          "guid"
        ],
        "type": "object",
        "properties": {
          "guid": {
            "type": "string",
            "description": "Guid of the voucher",
            "format": "uuid",
            "example": "0713954e-f3b0-4fb0-8b95-0dc0772d5ea0"
          },
          "timestamp": {
            "type": "string",
            "description": "Timestamp used for verifying version when updating or changing the voucher",
            "nullable": true,
            "example": "00000000020A5EA8"
          },
          "status": {
            "type": "string",
            "description": "The status of a cash purchase voucher, can be: Draft, Paid, or Editing. The status of a credit purchase voucher can be: Draft, Paid, Editing, Booked, Overdue, or Overpaid",
            "nullable": true,
            "example": "Paid"
          },
          "fileGuid": {
            "type": "string",
            "description": "Guid of the file associated with the voucher, optional value",
            "nullable": true,
            "example": "pa2halkrpgo3oho45hj0dlkfrro4ilf"
          },
          "voucherNumber": {
            "type": "integer",
            "description": "Number of the voucher",
            "format": "int64",
            "nullable": true,
            "example": 7
          },
          "voucherDate": {
            "type": "string",
            "description": "Date of the purchase",
            "nullable": true,
            "example": "2022-05-02"
          },
          "paymentDate": {
            "type": "string",
            "description": "Date of the payment of the voucher, is the same as voucherdate if the purchase is cash",
            "nullable": true,
            "example": "2022-05-02"
          },
          "regionKey": {
            "type": "string",
            "description": "The region the purchase is made from, only used on cash purchases, can be: DK, EU, or World",
            "nullable": true,
            "example": "DK"
          },
          "purchaseType": {
            "type": "string",
            "description": "Type of purchase, can be cash or credit",
            "nullable": true,
            "example": "cash"
          },
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PurchaseVoucherLineReadModel"
            },
            "description": "The list of lines associated with the purchase",
            "nullable": true
          },
          "depositAccountNumber": {
            "type": "integer",
            "description": "Account number of the deposit to book on, only used for cash purchases",
            "format": "int32",
            "nullable": true,
            "example": 55000
          },
          "contactGuid": {
            "type": "string",
            "description": "Guid of the contact associated with the purchase, can only have a value on credit purchases",
            "format": "uuid",
            "nullable": true,
            "example": null
          },
          "externalReference": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "Your external id\r\nThis can be used for ID'ing in external apps/services e.g. a web shop.\r\nThe maximum length is 128 characters",
            "nullable": true,
            "example": "Fx. WebShopID:42"
          },
          "voucherTotals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PurchaseVoucherTotalReadModel"
            },
            "description": "The total sums of the purchase voucher",
            "nullable": true
          },
          "currencyKey": {
            "type": "string",
            "description": "The currency of the voucher, will always be DKK for cash purchases",
            "nullable": true
          },
          "bookedByType": {
            "type": "string",
            "description": "Where the voucher was booked from in the system.\r\nThe available types are Ukendt, Web, Assistent, Mobil-app, Pensopay, System, Kassekladde, Kontingentopkrævning, Abonnement and API (with client id)",
            "nullable": true,
            "example": "Web"
          },
          "bookedByUsername": {
            "type": "string",
            "description": "The username of the user that booked the voucher",
            "nullable": true,
            "example": "john.doe@email.com"
          },
          "bookingTime": {
            "type": "string",
            "description": "The date for when the voucher is booked",
            "nullable": true,
            "example": "2022-05-02"
          }
        },
        "additionalProperties": false,
        "description": "Model returned by the api when working with purchasevouchers"
      },
      "PurchaseVoucherTotalReadModel": {
        "required": [
          "position",
          "total"
        ],
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "Label of the total",
            "nullable": true
          },
          "total": {
            "type": "number",
            "description": "The amount of money in DKK",
            "format": "double"
          },
          "type": {
            "type": "string",
            "description": "The type of total, can be SubTotal, Vat, or Total",
            "nullable": true
          },
          "position": {
            "type": "integer",
            "description": "Position of the line, used for showing in UI",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "The total sum of a voucher"
      },
      "PurchaseVoucherUpdateModel": {
        "required": [
          "contactGuid",
          "lines",
          "purchaseType",
          "timestamp",
          "voucherDate"
        ],
        "type": "object",
        "properties": {
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PurchaseVoucherLineCreateModel"
            },
            "description": "The lines containing what has been bought, at what price, and on what account"
          },
          "voucherDate": {
            "minLength": 1,
            "type": "string",
            "description": "Date of the voucher",
            "example": "2022-05-16"
          },
          "timestamp": {
            "minLength": 1,
            "type": "string",
            "description": "Timestamp to verify version before editing, use the timestamp value from last time get",
            "example": "00000000000017B7"
          },
          "depositAccountNumber": {
            "type": "integer",
            "description": "Accountnumber of the deposit to book on, only use on cash purchases",
            "format": "int32",
            "nullable": true,
            "example": 55000
          },
          "regionKey": {
            "type": "string",
            "description": "Region the purchase was made from, can be: EU, DK or World. Only used for cash purchases, should be null for credit purchase",
            "nullable": true,
            "example": "DK"
          },
          "fileGuid": {
            "type": "string",
            "description": "Id of the file associated with the purchase",
            "nullable": true,
            "example": "web0crmck5v0ndcx3313g6zn61tc7wgc"
          },
          "contactGuid": {
            "type": "string",
            "description": "Guid of the contact the purchase was made from, only used for credit purchases",
            "format": "uuid",
            "example": "75b3c512-3d11-492a-a6fb-f22acbd62878"
          },
          "paymentDate": {
            "type": "string",
            "description": "Date of payment, do not set on cash purchases, payment deadline for credit purchases",
            "nullable": true,
            "example": "2022-05-16"
          },
          "purchaseType": {
            "minLength": 1,
            "type": "string",
            "description": "Type of purchase, can be: cash or credit",
            "example": "cash"
          },
          "currencyKey": {
            "type": "string",
            "description": "Currency of the purchase, should not be set for cash purchases, defaults to DKK for credit purchases",
            "nullable": true
          },
          "externalReference": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "Your external id\r\nThis can be used for ID'ing in external apps/services e.g. a web shop.\r\nThe maximum length is 128 characters",
            "nullable": true,
            "example": "Fx. WebShopID:42"
          }
        },
        "additionalProperties": false,
        "description": "Used for updating purchase vouchers"
      },
      "ReminderBookModel": {
        "required": [
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "timestamp": {
            "minLength": 1,
            "type": "string",
            "description": "Timestamp to validate against. This is a safety measure to ensure that an API partner is only making changes to the latest version of the entity.\r\nThe timestamp is generated on Dinero's server every time the entity is updated, and is returned as a part of CreatedResponse and UpdatedResponse. It's also available on the entity itself.\r\nIf you get a timestamp outdated exception (error code 58), you will need to get the latest version of the entity and use its timestamp.",
            "example": "00000000020A5EA8"
          }
        },
        "additionalProperties": false
      },
      "ReminderCreateModel": {
        "required": [
          "date",
          "timestamp",
          "withCompensationFee",
          "withDebtCollectionWarning",
          "withFee",
          "withInterestFee"
        ],
        "type": "object",
        "properties": {
          "timestamp": {
            "minLength": 1,
            "type": "string",
            "description": "Timestamp to validate against. This is a safety measure to ensure that an API partner is only making changes to the latest version of the entity.\r\nThe timestamp is generated on Dinero's server every time the entity is updated, and is returned as a part of CreatedResponse and UpdatedResponse. It's also available on the entity itself.\r\nIf you get a timestamp outdated exception (error code 58), you will need to get the latest version of the entity and use its timestamp.",
            "example": "00000000020A5EA8"
          },
          "date": {
            "minLength": 1,
            "type": "string",
            "description": "Reminder date",
            "example": "2020-12-02"
          },
          "title": {
            "type": "string",
            "description": "Reminder title",
            "nullable": true,
            "example": "Rykker 1"
          },
          "description": {
            "type": "string",
            "description": "Reminder description",
            "nullable": true
          },
          "withDebtCollectionWarning": {
            "type": "boolean",
            "description": "Should the reminder include debt collection warning text"
          },
          "withFee": {
            "type": "boolean",
            "description": "Should the reminder include fee"
          },
          "withInterestFee": {
            "type": "boolean",
            "description": "Should the reminder include interest fee"
          },
          "withCompensationFee": {
            "type": "boolean",
            "description": "Should the reminder include compensation fee"
          }
        },
        "additionalProperties": false
      },
      "ReminderDeleteModel": {
        "required": [
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "timestamp": {
            "minLength": 1,
            "type": "string",
            "description": "Timestamp to validate against. This is a safety measure to ensure that an API partner is only making changes to the latest version of the entity.\r\nThe timestamp is generated on Dinero's server every time the entity is updated, and is returned as a part of CreatedResponse and UpdatedResponse. It's also available on the entity itself.\r\nIf you get a timestamp outdated exception (error code 58), you will need to get the latest version of the entity and use its timestamp.",
            "example": "00000000020A5EA8"
          }
        },
        "additionalProperties": false
      },
      "ReminderFetchModel": {
        "required": [
          "date",
          "withCompensationFee",
          "withDebtCollectionWarning",
          "withFee",
          "withInterestFee"
        ],
        "type": "object",
        "properties": {
          "date": {
            "minLength": 1,
            "type": "string",
            "description": "Reminder date",
            "example": "2020-12-02"
          },
          "withDebtCollectionWarning": {
            "type": "boolean",
            "description": "Should the reminder include debt collection warning text"
          },
          "withFee": {
            "type": "boolean",
            "description": "Should the reminder include fee"
          },
          "withInterestFee": {
            "type": "boolean",
            "description": "Should the reminder include interest fee"
          },
          "withCompensationFee": {
            "type": "boolean",
            "description": "Should the reminder include compensation fee"
          }
        },
        "additionalProperties": false
      },
      "ReminderViewModel": {
        "required": [
          "accumulatedFeesAndInterestAmount",
          "compensationFeeAmount",
          "compensationFeeAvailable",
          "date",
          "feeAmount",
          "invoiceTotalInclVatAmount",
          "isDeleted",
          "isDraft",
          "number",
          "paidAmount",
          "reminderTotalInclVatAmount",
          "timestamp",
          "withCompensationFee",
          "withDebtCollectionWarning",
          "withFee",
          "withInterestFee"
        ],
        "type": "object",
        "properties": {
          "timestamp": {
            "minLength": 1,
            "type": "string",
            "description": "Timestamp to validate against. This is a safety measure to ensure that an API partner is only making changes to the latest version of the entity.\r\nThe timestamp is generated on Dinero's server every time the entity is updated, and is returned as a part of CreatedResponse and UpdatedResponse. It's also available on the entity itself.\r\nIf you get a timestamp outdated exception (error code 58), you will need to get the latest version of the entity and use its timestamp.",
            "example": "00000000020A5EA8"
          },
          "date": {
            "minLength": 1,
            "type": "string",
            "description": "Reminder date",
            "example": "2020-12-02"
          },
          "title": {
            "type": "string",
            "description": "Reminder title",
            "nullable": true,
            "example": "Rykker 1"
          },
          "description": {
            "type": "string",
            "description": "Reminder description",
            "nullable": true
          },
          "withDebtCollectionWarning": {
            "type": "boolean",
            "description": "Should the reminder include debt collection warning text"
          },
          "withFee": {
            "type": "boolean",
            "description": "Should the reminder include fee"
          },
          "withInterestFee": {
            "type": "boolean",
            "description": "Should the reminder include interest fee"
          },
          "withCompensationFee": {
            "type": "boolean",
            "description": "Should the reminder include compensation fee"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "isDraft": {
            "type": "boolean"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "number": {
            "type": "integer",
            "description": "Reminder number",
            "format": "int32",
            "example": 1
          },
          "debtCollectionNoticeText": {
            "type": "string",
            "description": "The text to show if \"WithDebtCollectionWarning\" is selected",
            "nullable": true
          },
          "invoiceTotalInclVatAmountText": {
            "type": "string",
            "description": "The text to show with InvoiceTotalInclVatAmount",
            "nullable": true,
            "example": "Hovedstol fra ovennævnte faktura"
          },
          "invoiceTotalInclVatAmount": {
            "type": "number",
            "description": "The invoice total amount incl vat",
            "format": "double",
            "example": 266.25
          },
          "feeAmountText": {
            "type": "string",
            "description": "The text to show with FeeAmount",
            "nullable": true,
            "example": "Rykkergebyr, jvf. rentelovens § 9b, stk. 1, jf. stk. 2"
          },
          "feeAmount": {
            "type": "number",
            "description": "The fee",
            "format": "double",
            "example": 100
          },
          "interestAmountText": {
            "type": "string",
            "description": "The text to show with InterestAmount",
            "nullable": true,
            "example": "Renter 0,70% for perioden 06/06/2020 til 30/06/2020"
          },
          "interestAmount": {
            "type": "number",
            "description": "The interest",
            "format": "double",
            "nullable": true,
            "example": 100
          },
          "compensationFeeAvailable": {
            "type": "boolean",
            "description": "Indicates if the reminder can have a compensation fee"
          },
          "compensationFeeAmountText": {
            "type": "string",
            "description": "The text to show with CompensationFeeAmount",
            "nullable": true,
            "example": "Kompensationsgebyr, jvf. rentelovens § 9a, stk. 3"
          },
          "compensationFeeAmount": {
            "type": "number",
            "description": "The compensation fee",
            "format": "double",
            "example": 310
          },
          "accumulatedFeesAndInterestAmountText": {
            "type": "string",
            "description": "The text to show with AccumulatedFeesAndInterestAmount",
            "nullable": true,
            "example": "Rykkergebyrer, -renter og evt. kompensationsgebyr fra tidligere rykkere"
          },
          "accumulatedFeesAndInterestAmount": {
            "type": "number",
            "description": "Reminder fees, interest rates and any compensation fee from previous reminders",
            "format": "double",
            "example": 410.24
          },
          "paidAmountText": {
            "type": "string",
            "description": "The text to show with PaidAmount",
            "nullable": true,
            "example": "Allerede registrerede indbetalinger"
          },
          "paidAmount": {
            "type": "number",
            "description": "Already paid amount",
            "format": "double",
            "example": -100
          },
          "reminderTotalInclVatAmountText": {
            "type": "string",
            "description": "Text for ReminderTotalInclVatAmount",
            "nullable": true
          },
          "reminderTotalInclVatAmount": {
            "type": "number",
            "description": "Total amount for the reminder",
            "format": "double",
            "example": 677.25
          }
        },
        "additionalProperties": false
      },
      "RequiredTimestampObject": {
        "required": [
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "timestamp": {
            "minLength": 1,
            "type": "string",
            "description": "Timestamp to validate against.\r\nThis is a safety measure, making it possible to ensure that changes are made to the latest version of the entity.\r\nThe timestamp is generated on Dinero's server every time the entity is updated, and is returned as a part of CreatedResponse and UpdatedResponse. It's also available on the entity itself.\r\nIf you get a timestamp outdated exception (error code 58), you will need to get the latest version of the entity and use its timestamp.",
            "example": "00000000020A5EA8"
          }
        },
        "additionalProperties": false,
        "description": "Timestamp container"
      },
      "ResultReportApiModel": {
        "required": [
          "accountNumber",
          "amount"
        ],
        "type": "object",
        "properties": {
          "accountName": {
            "type": "string",
            "description": "Account name",
            "nullable": true,
            "example": "Omsætning"
          },
          "accountNumber": {
            "type": "integer",
            "description": "Account number",
            "format": "int32",
            "example": 1300
          },
          "amount": {
            "type": "number",
            "description": "Total amount",
            "format": "double",
            "example": 0
          }
        },
        "additionalProperties": false
      },
      "SalarySumTaxStateEnum": {
        "enum": [
          "None",
          "OnlySalarySum",
          "MixedActivities"
        ],
        "type": "string"
      },
      "SaldoBalanceReportApiModel": {
        "required": [
          "accountNumber",
          "amount"
        ],
        "type": "object",
        "properties": {
          "accountName": {
            "type": "string",
            "description": "Account name",
            "nullable": true,
            "example": "Omsætning"
          },
          "accountNumber": {
            "type": "integer",
            "description": "Account number",
            "format": "int32",
            "example": 1300
          },
          "amount": {
            "type": "number",
            "description": "Total amount",
            "format": "double",
            "example": 0
          }
        },
        "additionalProperties": false
      },
      "SalesCreditNoteCreateFetchModel": {
        "required": [
          "productLines"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "The currency used on the voucher. Defaults to DKK if null. Dinero will assign days date currency rate for the given currency. Currencies are given in format: DKK, EUR, USD etc...",
            "nullable": true,
            "example": "DKK"
          },
          "language": {
            "type": "string",
            "description": "The language to be used in the voucher. Available languages are 'da-DK' and 'en-GB'. Defaults to 'da-DK'.",
            "nullable": true,
            "example": "en-GB"
          },
          "externalReference": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "Your external id\r\nThis can be used for ID'ing in external apps/services e.g. a web shop.\r\nThe maximum length is 128 characters",
            "nullable": true,
            "example": "Fx. WebshopSpecialId: 42"
          },
          "description": {
            "type": "string",
            "description": "User supplied description of the voucher e.g. 'Custom Invoice description'. Defaults to document type e.g. 'Invoice', 'Offer', 'Creditnote' using the selected language.",
            "nullable": true,
            "example": "Description of document type. Fx.: invoice, credit note or offer"
          },
          "comment": {
            "type": "string",
            "description": "User supplied comment on the voucher",
            "nullable": true,
            "example": "Here is a comment"
          },
          "date": {
            "type": "string",
            "description": "The date of the creation/issuing. This should be in the format YYYY-MM-DD e.g. 2015-12-02. Defaults to today.",
            "nullable": true,
            "example": "2022-06-01"
          },
          "productLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceLinesCreateModel"
            },
            "description": "User supplied invoice lines. Minimum one."
          },
          "address": {
            "type": "string",
            "description": "Contact address (linebreaks are allowed '\\n'). When null is specified the address defaults to the contacts address.",
            "nullable": true,
            "example": "Test Road 3 2300 Copenhagen S Denmark"
          },
          "guid": {
            "type": "string",
            "description": "Optional guid for the object. If not set the system will create a guid returned in the response.",
            "format": "uuid",
            "nullable": true,
            "example": "3a315ad3-ddcc-419d-9fc5-219280ae4816"
          },
          "showLinesInclVat": {
            "type": "boolean",
            "description": "If your user (or your system) prefers to provide the line amounts incl. VAT, then this property should be set to true. All voucher lines will be assumed to have amounts incl VAT.\r\nIf your lines are excl VAT, you do not need to set this property. It will defaults to false.",
            "nullable": true,
            "example": false
          },
          "invoiceTemplateId": {
            "type": "string",
            "description": "Template id to use for design. If null, the default one will be used.",
            "format": "uuid",
            "nullable": true
          },
          "contactGuid": {
            "type": "string",
            "description": "Dinero contact guid. Optional for creating a draft, required for booking.",
            "format": "uuid",
            "nullable": true
          },
          "creditNoteFor": {
            "type": "string",
            "description": "Optional id of the invoice the credit note is based on.",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Model for fetching a credit note."
      },
      "SalesCreditNoteCreateModel": {
        "required": [
          "productLines"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "The currency used on the voucher. Defaults to DKK if null. Dinero will assign days date currency rate for the given currency. Currencies are given in format: DKK, EUR, USD etc...",
            "nullable": true,
            "example": "DKK"
          },
          "language": {
            "type": "string",
            "description": "The language to be used in the voucher. Available languages are 'da-DK' and 'en-GB'. Defaults to 'da-DK'.",
            "nullable": true,
            "example": "en-GB"
          },
          "externalReference": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "Your external id\r\nThis can be used for ID'ing in external apps/services e.g. a web shop.\r\nThe maximum length is 128 characters",
            "nullable": true,
            "example": "Fx. WebshopSpecialId: 42"
          },
          "description": {
            "type": "string",
            "description": "User supplied description of the voucher e.g. 'Custom Invoice description'. Defaults to document type e.g. 'Invoice', 'Offer', 'Creditnote' using the selected language.",
            "nullable": true,
            "example": "Description of document type. Fx.: invoice, credit note or offer"
          },
          "comment": {
            "type": "string",
            "description": "User supplied comment on the voucher",
            "nullable": true,
            "example": "Here is a comment"
          },
          "date": {
            "type": "string",
            "description": "The date of the creation/issuing. This should be in the format YYYY-MM-DD e.g. 2015-12-02. Defaults to today.",
            "nullable": true,
            "example": "2022-06-01"
          },
          "productLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceLinesCreateModel"
            },
            "description": "User supplied invoice lines. Minimum one."
          },
          "address": {
            "type": "string",
            "description": "Contact address (linebreaks are allowed '\\n'). When null is specified the address defaults to the contacts address.",
            "nullable": true,
            "example": "Test Road 3 2300 Copenhagen S Denmark"
          },
          "guid": {
            "type": "string",
            "description": "Optional guid for the object. If not set the system will create a guid returned in the response.",
            "format": "uuid",
            "nullable": true,
            "example": "3a315ad3-ddcc-419d-9fc5-219280ae4816"
          },
          "showLinesInclVat": {
            "type": "boolean",
            "description": "If your user (or your system) prefers to provide the line amounts incl. VAT, then this property should be set to true. All voucher lines will be assumed to have amounts incl VAT.\r\nIf your lines are excl VAT, you do not need to set this property. It will defaults to false.",
            "nullable": true,
            "example": false
          },
          "invoiceTemplateId": {
            "type": "string",
            "description": "Template id to use for design. If null, the default one will be used.",
            "format": "uuid",
            "nullable": true
          },
          "contactGuid": {
            "type": "string",
            "description": "Dinero contact guid. Optional for creating a draft, required for booking.",
            "format": "uuid",
            "nullable": true
          },
          "creditNoteFor": {
            "type": "string",
            "description": "Optional id of the invoice the credit note is based on.",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Model for creating a credit note"
      },
      "SalesCreditNoteFetchReadModel": {
        "required": [
          "number",
          "productLines",
          "showLinesInclVat",
          "totalExclVat",
          "totalInclVat",
          "totalNonVatableAmount",
          "totalVat",
          "totalVatableAmount"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "The currency used on the voucher. Defaults to DKK if null. Dinero will assign days date currency rate for the given currency. Currencies are given in format: DKK, EUR, USD etc...",
            "nullable": true,
            "example": "DKK"
          },
          "language": {
            "type": "string",
            "description": "The language to be used in the voucher. Available languages are 'da-DK' and 'en-GB'. Defaults to 'da-DK'.",
            "nullable": true,
            "example": "en-GB"
          },
          "externalReference": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "Your external id\r\nThis can be used for ID'ing in external apps/services e.g. a web shop.\r\nThe maximum length is 128 characters",
            "nullable": true,
            "example": "Fx. WebshopSpecialId: 42"
          },
          "description": {
            "type": "string",
            "description": "User supplied description of the voucher e.g. 'Custom Invoice description'. Defaults to document type e.g. 'Invoice', 'Offer', 'Creditnote' using the selected language.",
            "nullable": true,
            "example": "Description of document type. Fx.: invoice, credit note or offer"
          },
          "comment": {
            "type": "string",
            "description": "User supplied comment on the voucher",
            "nullable": true,
            "example": "Here is a comment"
          },
          "date": {
            "type": "string",
            "description": "The date of the creation/issuing. This should be in the format YYYY-MM-DD e.g. 2015-12-02. Defaults to today.",
            "nullable": true,
            "example": "2022-06-01"
          },
          "productLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceLinesReadModel"
            },
            "description": "User supplied invoice lines. Minimum one."
          },
          "address": {
            "type": "string",
            "description": "Contact address (linebreaks are allowed '\\n'). When null is specified the address defaults to the contacts address.",
            "nullable": true,
            "example": "Test Road 3 2300 Copenhagen S Denmark"
          },
          "number": {
            "type": "integer",
            "description": "The number of the voucher.",
            "format": "int64",
            "example": 12
          },
          "contactName": {
            "type": "string",
            "description": "Contact name",
            "nullable": true,
            "example": "My Customer"
          },
          "showLinesInclVat": {
            "type": "boolean",
            "description": "If true, the user prefers the invoice to be displayed with lines incl vat.",
            "example": false
          },
          "totalExclVat": {
            "type": "number",
            "description": "Total amount without vat",
            "format": "double",
            "example": 200
          },
          "totalVatableAmount": {
            "type": "number",
            "description": "Total amount to calculate the vat from",
            "format": "double",
            "example": 200
          },
          "totalInclVat": {
            "type": "number",
            "description": "Total amount incl. vat",
            "format": "double",
            "example": 250
          },
          "totalNonVatableAmount": {
            "type": "number",
            "description": "Total vat free amount",
            "format": "double",
            "example": 0
          },
          "totalVat": {
            "type": "number",
            "description": "Total vat amount",
            "format": "double",
            "example": 50
          },
          "totalLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TotalLine"
            },
            "description": "Total lines. SubTotal, Vat and Total. Only lines valid for display in the current context are returned.",
            "nullable": true
          },
          "invoiceTemplateId": {
            "type": "string",
            "description": "Template id to use for design.",
            "format": "uuid",
            "nullable": true
          },
          "contactGuid": {
            "type": "string",
            "description": "Dinero contact guid.",
            "format": "uuid",
            "nullable": true
          },
          "creditNoteFor": {
            "type": "string",
            "description": "Id of the invoice the creditnote is based on.",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represent a invoice"
      },
      "SalesCreditNoteReadModel": {
        "required": [
          "guid",
          "number",
          "productLines",
          "showLinesInclVat",
          "totalExclVat",
          "totalInclVat",
          "totalNonVatableAmount",
          "totalVat",
          "totalVatableAmount"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "The currency used on the voucher. Defaults to DKK if null. Dinero will assign days date currency rate for the given currency. Currencies are given in format: DKK, EUR, USD etc...",
            "nullable": true,
            "example": "DKK"
          },
          "language": {
            "type": "string",
            "description": "The language to be used in the voucher. Available languages are 'da-DK' and 'en-GB'. Defaults to 'da-DK'.",
            "nullable": true,
            "example": "en-GB"
          },
          "externalReference": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "Your external id\r\nThis can be used for ID'ing in external apps/services e.g. a web shop.\r\nThe maximum length is 128 characters",
            "nullable": true,
            "example": "Fx. WebshopSpecialId: 42"
          },
          "description": {
            "type": "string",
            "description": "User supplied description of the voucher e.g. 'Custom Invoice description'. Defaults to document type e.g. 'Invoice', 'Offer', 'Creditnote' using the selected language.",
            "nullable": true,
            "example": "Description of document type. Fx.: invoice, credit note or offer"
          },
          "comment": {
            "type": "string",
            "description": "User supplied comment on the voucher",
            "nullable": true,
            "example": "Here is a comment"
          },
          "date": {
            "type": "string",
            "description": "The date of the creation/issuing. This should be in the format YYYY-MM-DD e.g. 2015-12-02. Defaults to today.",
            "nullable": true,
            "example": "2022-06-01"
          },
          "productLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceLinesReadModel"
            },
            "description": "User supplied invoice lines. Minimum one."
          },
          "address": {
            "type": "string",
            "description": "Contact address (linebreaks are allowed '\\n'). When null is specified the address defaults to the contacts address.",
            "nullable": true,
            "example": "Test Road 3 2300 Copenhagen S Denmark"
          },
          "number": {
            "type": "integer",
            "description": "The number of the voucher.",
            "format": "int64",
            "example": 12
          },
          "contactName": {
            "type": "string",
            "description": "Contact name",
            "nullable": true,
            "example": "My Customer"
          },
          "showLinesInclVat": {
            "type": "boolean",
            "description": "If true, the user prefers the invoice to be displayed with lines incl vat.",
            "example": false
          },
          "totalExclVat": {
            "type": "number",
            "description": "Total amount without vat",
            "format": "double",
            "example": 200
          },
          "totalVatableAmount": {
            "type": "number",
            "description": "Total amount to calculate the vat from",
            "format": "double",
            "example": 200
          },
          "totalInclVat": {
            "type": "number",
            "description": "Total amount incl. vat",
            "format": "double",
            "example": 250
          },
          "totalNonVatableAmount": {
            "type": "number",
            "description": "Total vat free amount",
            "format": "double",
            "example": 0
          },
          "totalVat": {
            "type": "number",
            "description": "Total vat amount",
            "format": "double",
            "example": 50
          },
          "totalLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TotalLine"
            },
            "description": "Total lines. SubTotal, Vat and Total. Only lines valid for display in the current context are returned.",
            "nullable": true
          },
          "invoiceTemplateId": {
            "type": "string",
            "description": "Template id to use for design.",
            "format": "uuid",
            "nullable": true
          },
          "guid": {
            "type": "string",
            "description": "The guid of the voucher",
            "format": "uuid"
          },
          "timeStamp": {
            "type": "string",
            "description": "Timestamp of version. To avoid concurrency issues.",
            "nullable": true,
            "example": "00000000020A5EA8"
          },
          "createdAt": {
            "type": "string",
            "description": "Time of creation",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "description": "Time of last update",
            "format": "date-time",
            "nullable": true
          },
          "deletedAt": {
            "type": "string",
            "description": "Time of deletion. Null unless the object is deleted.",
            "format": "date-time",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "An sales voucher can have status Draft or Booked",
            "nullable": true,
            "example": "Draft"
          },
          "contactGuid": {
            "type": "string",
            "description": "Dinero contact guid.",
            "format": "uuid",
            "nullable": true
          },
          "creditNoteFor": {
            "type": "string",
            "description": "Id of the invoice the creditnote is based on.",
            "format": "uuid",
            "nullable": true
          },
          "mailOutStatus": {
            "type": "string",
            "description": "The mailout can have following status:\r\nNotSent, Sent or SeenByCustomer, Failed.\r\nSeenByCustomer, means the user has clicked on the link in the mailout and viewed the sales voucher.\r\nAny type of mailout (email, reminder, pre-reminder, e-invoice), will change the status from NotSent to Sent.",
            "nullable": true,
            "example": "Sent, NotSent, Failed, SeenByCustomer"
          },
          "latestMailOutType": {
            "type": "string",
            "description": "The mailout category can have following values:\r\neinvoice, electronicInvoiceReminder, inkasso, mailout, orderConfirmation, preReminder, reminder, tradeOffer",
            "nullable": true,
            "example": "einvoice"
          },
          "paymentStatus": {
            "type": "string",
            "description": "The payment status can have the following values:\r\nDraft, Booked, Paid, OverPaid or Overdue",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represent a invoice"
      },
      "SalesCreditNoteUpdateModel": {
        "required": [
          "productLines",
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "The currency used on the voucher. Defaults to DKK if null. Dinero will assign days date currency rate for the given currency. Currencies are given in format: DKK, EUR, USD etc...",
            "nullable": true,
            "example": "DKK"
          },
          "language": {
            "type": "string",
            "description": "The language to be used in the voucher. Available languages are 'da-DK' and 'en-GB'. Defaults to 'da-DK'.",
            "nullable": true,
            "example": "en-GB"
          },
          "externalReference": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "Your external id\r\nThis can be used for ID'ing in external apps/services e.g. a web shop.\r\nThe maximum length is 128 characters",
            "nullable": true,
            "example": "Fx. WebshopSpecialId: 42"
          },
          "description": {
            "type": "string",
            "description": "User supplied description of the voucher e.g. 'Custom Invoice description'. Defaults to document type e.g. 'Invoice', 'Offer', 'Creditnote' using the selected language.",
            "nullable": true,
            "example": "Description of document type. Fx.: invoice, credit note or offer"
          },
          "comment": {
            "type": "string",
            "description": "User supplied comment on the voucher",
            "nullable": true,
            "example": "Here is a comment"
          },
          "date": {
            "type": "string",
            "description": "The date of the creation/issuing. This should be in the format YYYY-MM-DD e.g. 2015-12-02. Defaults to today.",
            "nullable": true,
            "example": "2022-06-01"
          },
          "productLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceLinesCreateModel"
            },
            "description": "User supplied invoice lines. Minimum one."
          },
          "address": {
            "type": "string",
            "description": "Contact address (linebreaks are allowed '\\n'). When null is specified the address defaults to the contacts address.",
            "nullable": true,
            "example": "Test Road 3 2300 Copenhagen S Denmark"
          },
          "guid": {
            "type": "string",
            "description": "Optional guid for the object. If not set the system will create a guid returned in the response.",
            "format": "uuid",
            "nullable": true,
            "example": "3a315ad3-ddcc-419d-9fc5-219280ae4816"
          },
          "showLinesInclVat": {
            "type": "boolean",
            "description": "If your user (or your system) prefers to provide the line amounts incl. VAT, then this property should be set to true. All voucher lines will be assumed to have amounts incl VAT.\r\nIf your lines are excl VAT, you do not need to set this property. It will defaults to false.",
            "nullable": true,
            "example": false
          },
          "invoiceTemplateId": {
            "type": "string",
            "description": "Template id to use for design. If null, the default one will be used.",
            "format": "uuid",
            "nullable": true
          },
          "contactGuid": {
            "type": "string",
            "description": "Dinero contact guid. Optional for creating a draft, required for booking.",
            "format": "uuid",
            "nullable": true
          },
          "creditNoteFor": {
            "type": "string",
            "description": "Optional id of the invoice the credit note is based on.",
            "format": "uuid",
            "nullable": true
          },
          "timestamp": {
            "minLength": 1,
            "type": "string",
            "description": "Version of the credit note"
          }
        },
        "additionalProperties": false,
        "description": "Model for updating a credit note."
      },
      "SalesVoucherReadListModel": {
        "required": [
          "guid",
          "number",
          "totalExclVat",
          "totalExclVatInDkk",
          "totalInclVat",
          "totalInclVatInDkk"
        ],
        "type": "object",
        "properties": {
          "number": {
            "type": "integer",
            "description": "The number of the voucher.",
            "format": "int64",
            "example": 12
          },
          "guid": {
            "type": "string",
            "description": "The guid of the voucher",
            "format": "uuid"
          },
          "externalReference": {
            "type": "string",
            "description": "Gets or sets the external id - this can be used for id'ing in external apps/services. Like\r\nsome id string in a web shop\r\nThe maximum length is 128 characters",
            "nullable": true,
            "example": "yourReference"
          },
          "date": {
            "type": "string",
            "description": "The date of the creation/issuing. This should be in the format YYYY-MM-DD e.g. 2015-12-02. Defaults to today.",
            "nullable": true,
            "example": "2022-05-12"
          },
          "paymentDate": {
            "type": "string",
            "description": "The invoice's payment date. This should be in the format YYYY-MM-DD e.g. 2015-12-02. It's null on credit notes.",
            "nullable": true,
            "example": "2022-05-12"
          },
          "description": {
            "type": "string",
            "description": "User supplied description of the voucher e.g. 'Custom Invoice description'. \r\nDefaults to document type e.g. 'Invoice', 'Offer', 'Creditnote' using the selected language.",
            "nullable": true,
            "example": "Description of document type. Fx.: invoice, credit note or offer"
          },
          "status": {
            "type": "string",
            "description": "An sales voucher can have status Draft, Booked, Paid, OverPaid or Overdue",
            "nullable": true,
            "example": "Draft"
          },
          "type": {
            "type": "string",
            "description": "An sales voucher can have two types, Invoice or CreditNote",
            "nullable": true,
            "example": "Invoice"
          },
          "contactName": {
            "type": "string",
            "description": "Contact name",
            "nullable": true,
            "example": "My Customer"
          },
          "contactGuid": {
            "type": "string",
            "description": "Guid of the contact",
            "format": "uuid",
            "nullable": true,
            "example": "74ba828f-0b4b-49e1-b5c9-ef9675755556"
          },
          "totalInclVat": {
            "type": "number",
            "description": "Total amount incl. VAT",
            "format": "double",
            "example": 250
          },
          "totalExclVat": {
            "type": "number",
            "description": "Total amount excl. VAT",
            "format": "double",
            "example": 200
          },
          "totalInclVatInDkk": {
            "type": "number",
            "description": "Total amount incl. VAT in DKK",
            "format": "double",
            "example": 1850
          },
          "totalExclVatInDkk": {
            "type": "number",
            "description": "Total amount excl. VAT in DKK",
            "format": "double",
            "example": 1500
          },
          "mailOutStatus": {
            "type": "string",
            "description": "The voucher can have following status: \r\nNotSent, Sent or SeenByCustomer.\r\nSeenByCustomer, means the user has clicked on the link in the mailout and viewed the sales voucher. \r\nAny type of mailout (email, reminder, pre-reminder, e-invoice), will change the status from NotSent to Sent.",
            "nullable": true,
            "example": "Sent"
          },
          "latestMailOutType": {
            "type": "string",
            "description": "The mailout category can have following values:\r\nEinvoice, ElectronicInvoiceReminder, Inkasso, Mailout, OrderConfirmation, PreReminder, Reminder, TradeOffer, None",
            "nullable": true,
            "example": "einvoice"
          },
          "currency": {
            "type": "string",
            "description": "Currencies are given in format: DKK, EUR, USD etc...",
            "nullable": true,
            "example": "EUR"
          },
          "createdAt": {
            "type": "string",
            "description": "Time of creation",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "description": "Time of last update",
            "format": "date-time",
            "nullable": true
          },
          "deletedAt": {
            "type": "string",
            "description": "Time of deletion. Null unless the object is deleted.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Light voucher model, to be used in list views and search results"
      },
      "SalesVoucherReadListModelDineroCollection": {
        "required": [
          "pagination"
        ],
        "type": "object",
        "properties": {
          "collection": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SalesVoucherReadListModel"
            },
            "description": "Collection containing the result of the request.",
            "nullable": true
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationDetails"
          }
        },
        "additionalProperties": false
      },
      "SalesVoucherSetttingsModel": {
        "required": [
          "addVoucherAsPdfAttachment",
          "defaultAccountNumber",
          "linesInclVat",
          "paymentConditionNumberOfDays",
          "reminderFee",
          "reminderInterestRate",
          "useFikCode"
        ],
        "type": "object",
        "properties": {
          "linesInclVat": {
            "type": "boolean",
            "description": "The users preference, whether the lines should be displayed incl VAT or not",
            "example": false
          },
          "fikCode": {
            "type": "string",
            "description": "FI71 paymentidentification. For the FIK code +71<000000016460909+12345678< this would be 12345678",
            "nullable": true,
            "example": "12345678"
          },
          "useFikCode": {
            "type": "boolean",
            "description": "The users preference, whether to use FIK code or not",
            "example": true
          },
          "defaultAccountNumber": {
            "type": "integer",
            "description": "Default voucher line account",
            "format": "int32",
            "example": 1000
          },
          "invoiceTemplateId": {
            "type": "string",
            "description": "The default template id to use for design.",
            "format": "uuid",
            "nullable": true
          },
          "addVoucherAsPdfAttachment": {
            "type": "boolean",
            "description": "The users preference, whether to attach voucher as pdf on e-mails"
          },
          "reminderFee": {
            "type": "number",
            "description": "The default reminder fee to use on any reminders created from the voucher",
            "format": "double"
          },
          "reminderInterestRate": {
            "type": "number",
            "description": "The default reminder interest rate to use on any reminders created from the voucher",
            "format": "double"
          },
          "trustPilotEmail": {
            "type": "string",
            "description": "The Trustpilot-email to include as BCC in invoice mail outs.",
            "nullable": true
          },
          "paymentConditionNumberOfDays": {
            "type": "integer",
            "description": "The default payment condition number of days",
            "format": "int32"
          },
          "paymentConditionType": {
            "type": "string",
            "description": "The default payment condition type",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Default SalesVoucherSettings"
      },
      "SimilarPurchaseVoucherReadModel": {
        "required": [
          "similarFound"
        ],
        "type": "object",
        "properties": {
          "voucherNumber": {
            "type": "integer",
            "description": "The voucherNumber of the similar voucher, null if no similar voucher exists",
            "format": "int64",
            "nullable": true
          },
          "similarGuid": {
            "type": "string",
            "description": "The guid of the similar voucher, null if no similar voucher exists",
            "format": "uuid",
            "nullable": true
          },
          "similarFound": {
            "type": "boolean",
            "description": "Indicates if a similar voucher has been found"
          }
        },
        "additionalProperties": false
      },
      "SmsSendModel": {
        "required": [
          "isReminder",
          "receiverName",
          "receiverPhoneNumber",
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "receiverPhoneNumber": {
            "minLength": 1,
            "type": "string",
            "description": "Receiver Phonenumber",
            "example": "34343434"
          },
          "receiverName": {
            "minLength": 1,
            "type": "string",
            "description": "Receiver Name",
            "example": "Anders Andersen"
          },
          "timestamp": {
            "minLength": 1,
            "type": "string",
            "description": "Timestamp of the voucher that is being sent",
            "example": "000000000000271C"
          },
          "isReminder": {
            "type": "boolean",
            "description": "IsReminder is true if the text message is a reminder"
          },
          "message": {
            "type": "string",
            "description": "\"You can use the \"Message\" field to provide a custom message instead of the default one. If you want to include the voucher link within your text, simply insert [link-to-pdf] at the desired location in the message. Otherwise, if you don't specify the location, the link will be automatically appended to the end of the message.\"",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SmsValidationRequestModel": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "The content to validate",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "description": "The phone number to validate",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Data regarding the SMS to validate"
      },
      "SmsValidationResultModel": {
        "required": [
          "exceedsMaxLength",
          "hasIllegalLink",
          "hasInvalidPhoneNumber"
        ],
        "type": "object",
        "properties": {
          "hasIllegalLink": {
            "type": "boolean",
            "description": "Indicates if the content includes an illegal link"
          },
          "illegalLinkText": {
            "type": "string",
            "description": "The found illegal link, if one is found",
            "nullable": true
          },
          "exceedsMaxLength": {
            "type": "boolean",
            "description": "Indicates if the content is longer than allowed"
          },
          "hasInvalidPhoneNumber": {
            "type": "boolean",
            "description": "Indicates if the phone number is invalid"
          },
          "invalidPhoneNumberErrorDescription": {
            "type": "string",
            "description": "The description of the phone number validation error",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Resulting model of SMS validation"
      },
      "SubscribeToWebhookModel": {
        "type": "object",
        "properties": {
          "uri": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "eventId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SubscriptionReadModel": {
        "required": [
          "hasPayingPro",
          "hasPro",
          "hasStarterPlus",
          "hasYfs"
        ],
        "type": "object",
        "properties": {
          "hasPro": {
            "type": "boolean",
            "description": "Whether the organization has access to Pro features",
            "example": false
          },
          "hasPayingPro": {
            "type": "boolean",
            "description": "Whether the organization has a paying Pro subscription",
            "example": false
          },
          "hasStarterPlus": {
            "type": "boolean",
            "description": "Whether the organization has a paying Starter subscription",
            "example": false
          },
          "hasYfs": {
            "type": "boolean",
            "description": "Whether the organization has a yearly financial statement subscription",
            "example": false
          }
        },
        "additionalProperties": false,
        "description": "Subscription summary for an organization"
      },
      "SupportersAllowedToAccessOrganization": {
        "required": [
          "isSupportersAllowedToAccessOrganization"
        ],
        "type": "object",
        "properties": {
          "isSupportersAllowedToAccessOrganization": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "TimestampObject": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "Timestamp to validate against. If left empty, default to newest version.\r\nThis is an optional safety measure, making it possible to ensure that changes are made to the latest version of the entity.\r\nThe timestamp is generated on Dinero's server every time the entity is updated, and is returned as a part of CreatedResponse and UpdatedResponse. It's also available on the entity itself.\r\nIf you get a timestamp outdated exception (error code 58), you will need to get the latest version of the entity and use its timestamp.",
            "nullable": true,
            "example": "00000000020A5EA8"
          }
        },
        "additionalProperties": false,
        "description": "Timestamp container"
      },
      "TotalLine": {
        "required": [
          "totalAmount"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of total line. Options are: SubTotal, SubTotalWithVat, SubTotalWithoutVat, Vat and Total.",
            "nullable": true,
            "example": "SubTotal"
          },
          "totalAmount": {
            "type": "number",
            "description": "Value to display",
            "format": "double",
            "example": 200
          },
          "position": {
            "type": "integer",
            "description": "Position in which it should be displayed, if part of a list of total lines. 0-based index.",
            "format": "int32",
            "nullable": true,
            "example": 0
          },
          "label": {
            "type": "string",
            "description": "Label text",
            "nullable": true,
            "example": "Subtotal"
          }
        },
        "additionalProperties": false,
        "description": "Total line"
      },
      "TradeOfferCreateFetchModel": {
        "required": [
          "productLines"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "The currency used on the voucher. Defaults to DKK if null. Dinero will assign days date currency rate for the given currency. Currencies are given in format: DKK, EUR, USD etc...",
            "nullable": true,
            "example": "DKK"
          },
          "language": {
            "type": "string",
            "description": "The language to be used in the voucher. Available languages are 'da-DK' and 'en-GB'. Defaults to 'da-DK'.",
            "nullable": true,
            "example": "en-GB"
          },
          "externalReference": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "Your external id\r\nThis can be used for ID'ing in external apps/services e.g. a web shop.\r\nThe maximum length is 128 characters",
            "nullable": true,
            "example": "Fx. WebshopSpecialId: 42"
          },
          "description": {
            "type": "string",
            "description": "User supplied description of the voucher e.g. 'Custom Invoice description'. Defaults to document type e.g. 'Invoice', 'Offer', 'Creditnote' using the selected language.",
            "nullable": true,
            "example": "Description of document type. Fx.: invoice, credit note or offer"
          },
          "comment": {
            "type": "string",
            "description": "User supplied comment on the voucher",
            "nullable": true,
            "example": "Here is a comment"
          },
          "date": {
            "type": "string",
            "description": "The date of the creation/issuing. This should be in the format YYYY-MM-DD e.g. 2015-12-02. Defaults to today.",
            "nullable": true,
            "example": "2022-06-01"
          },
          "productLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TradeOfferLineCreateModel"
            },
            "description": "User supplied invoice lines. Minimum one."
          },
          "address": {
            "type": "string",
            "description": "Contact address (linebreaks are allowed '\\n'). When null is specified the address defaults to the contacts address.",
            "nullable": true,
            "example": "Test Road 3 2300 Copenhagen S Denmark"
          },
          "guid": {
            "type": "string",
            "description": "Optional guid for the object. If not set the system will create a guid returned in the response.",
            "format": "uuid",
            "nullable": true,
            "example": "3a315ad3-ddcc-419d-9fc5-219280ae4816"
          },
          "showLinesInclVat": {
            "type": "boolean",
            "description": "If your user (or your system) prefers to provide the line amounts incl. VAT, then this property should be set to true. All voucher lines will be assumed to have amounts incl VAT.\r\nIf your lines are excl VAT, you do not need to set this property. It will defaults to false.",
            "nullable": true,
            "example": false
          },
          "invoiceTemplateId": {
            "type": "string",
            "description": "Template id to use for design. If null, the default one will be used.",
            "format": "uuid",
            "nullable": true
          },
          "contactGuid": {
            "type": "string",
            "description": "Dinero contact guid.",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Model for fetching a trade offer."
      },
      "TradeOfferCreateModel": {
        "required": [
          "contactGuid",
          "productLines"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "The currency used on the voucher. Defaults to DKK if null. Dinero will assign days date currency rate for the given currency. Currencies are given in format: DKK, EUR, USD etc...",
            "nullable": true,
            "example": "DKK"
          },
          "language": {
            "type": "string",
            "description": "The language to be used in the voucher. Available languages are 'da-DK' and 'en-GB'. Defaults to 'da-DK'.",
            "nullable": true,
            "example": "en-GB"
          },
          "externalReference": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "Your external id\r\nThis can be used for ID'ing in external apps/services e.g. a web shop.\r\nThe maximum length is 128 characters",
            "nullable": true,
            "example": "Fx. WebshopSpecialId: 42"
          },
          "description": {
            "type": "string",
            "description": "User supplied description of the voucher e.g. 'Custom Invoice description'. Defaults to document type e.g. 'Invoice', 'Offer', 'Creditnote' using the selected language.",
            "nullable": true,
            "example": "Description of document type. Fx.: invoice, credit note or offer"
          },
          "comment": {
            "type": "string",
            "description": "User supplied comment on the voucher",
            "nullable": true,
            "example": "Here is a comment"
          },
          "date": {
            "type": "string",
            "description": "The date of the creation/issuing. This should be in the format YYYY-MM-DD e.g. 2015-12-02. Defaults to today.",
            "nullable": true,
            "example": "2022-06-01"
          },
          "productLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TradeOfferLineCreateModel"
            },
            "description": "User supplied invoice lines. Minimum one."
          },
          "address": {
            "type": "string",
            "description": "Contact address (linebreaks are allowed '\\n'). When null is specified the address defaults to the contacts address.",
            "nullable": true,
            "example": "Test Road 3 2300 Copenhagen S Denmark"
          },
          "guid": {
            "type": "string",
            "description": "Optional guid for the object. If not set the system will create a guid returned in the response.",
            "format": "uuid",
            "nullable": true,
            "example": "3a315ad3-ddcc-419d-9fc5-219280ae4816"
          },
          "showLinesInclVat": {
            "type": "boolean",
            "description": "If your user (or your system) prefers to provide the line amounts incl. VAT, then this property should be set to true. All voucher lines will be assumed to have amounts incl VAT.\r\nIf your lines are excl VAT, you do not need to set this property. It will defaults to false.",
            "nullable": true,
            "example": false
          },
          "invoiceTemplateId": {
            "type": "string",
            "description": "Template id to use for design. If null, the default one will be used.",
            "format": "uuid",
            "nullable": true
          },
          "contactGuid": {
            "type": "string",
            "description": "Dinero contact guid.",
            "format": "uuid"
          }
        },
        "additionalProperties": false,
        "description": "Model for creating a trade offer"
      },
      "TradeOfferFetchReadModel": {
        "required": [
          "number",
          "productLines",
          "showLinesInclVat",
          "totalExclVat",
          "totalInclVat",
          "totalNonVatableAmount",
          "totalVat",
          "totalVatableAmount"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "The currency used on the voucher. Defaults to DKK if null. Dinero will assign days date currency rate for the given currency. Currencies are given in format: DKK, EUR, USD etc...",
            "nullable": true,
            "example": "DKK"
          },
          "language": {
            "type": "string",
            "description": "The language to be used in the voucher. Available languages are 'da-DK' and 'en-GB'. Defaults to 'da-DK'.",
            "nullable": true,
            "example": "en-GB"
          },
          "externalReference": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "Your external id\r\nThis can be used for ID'ing in external apps/services e.g. a web shop.\r\nThe maximum length is 128 characters",
            "nullable": true,
            "example": "Fx. WebshopSpecialId: 42"
          },
          "description": {
            "type": "string",
            "description": "User supplied description of the voucher e.g. 'Custom Invoice description'. Defaults to document type e.g. 'Invoice', 'Offer', 'Creditnote' using the selected language.",
            "nullable": true,
            "example": "Description of document type. Fx.: invoice, credit note or offer"
          },
          "comment": {
            "type": "string",
            "description": "User supplied comment on the voucher",
            "nullable": true,
            "example": "Here is a comment"
          },
          "date": {
            "type": "string",
            "description": "The date of the creation/issuing. This should be in the format YYYY-MM-DD e.g. 2015-12-02. Defaults to today.",
            "nullable": true,
            "example": "2022-06-01"
          },
          "productLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TradeOfferLineReadModel"
            },
            "description": "User supplied invoice lines. Minimum one."
          },
          "address": {
            "type": "string",
            "description": "Contact address (linebreaks are allowed '\\n'). When null is specified the address defaults to the contacts address.",
            "nullable": true,
            "example": "Test Road 3 2300 Copenhagen S Denmark"
          },
          "number": {
            "type": "integer",
            "description": "The number of the voucher.",
            "format": "int64",
            "example": 12
          },
          "contactName": {
            "type": "string",
            "description": "Contact name",
            "nullable": true,
            "example": "My Customer"
          },
          "showLinesInclVat": {
            "type": "boolean",
            "description": "If true, the user prefers the invoice to be displayed with lines incl vat.",
            "example": false
          },
          "totalExclVat": {
            "type": "number",
            "description": "Total amount without vat",
            "format": "double",
            "example": 200
          },
          "totalVatableAmount": {
            "type": "number",
            "description": "Total amount to calculate the vat from",
            "format": "double",
            "example": 200
          },
          "totalInclVat": {
            "type": "number",
            "description": "Total amount incl. vat",
            "format": "double",
            "example": 250
          },
          "totalNonVatableAmount": {
            "type": "number",
            "description": "Total vat free amount",
            "format": "double",
            "example": 0
          },
          "totalVat": {
            "type": "number",
            "description": "Total vat amount",
            "format": "double",
            "example": 50
          },
          "totalLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TotalLine"
            },
            "description": "Total lines. SubTotal, Vat and Total. Only lines valid for display in the current context are returned.",
            "nullable": true
          },
          "invoiceTemplateId": {
            "type": "string",
            "description": "Template id to use for design.",
            "format": "uuid",
            "nullable": true
          },
          "contactGuid": {
            "type": "string",
            "description": "Dinero contact guid.",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represent a trade offer"
      },
      "TradeOfferHistoryReadModel": {
        "required": [
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the trade offer history.\r\nPossible values are Draft, Invoiced, CustomerAccepted, CustomerDeclined, UserAccepted, UserDeclined",
            "nullable": true,
            "example": "Invoiced"
          },
          "updatedAt": {
            "type": "string",
            "description": "Time of last update of the trade offer history.",
            "format": "date-time"
          },
          "tradeOfferEmailSentAt": {
            "type": "string",
            "description": "Time of trade offer sendout",
            "format": "date-time",
            "nullable": true
          },
          "confirmationEmailSentAt": {
            "type": "string",
            "description": "Time of trade offer confirmation send out",
            "format": "date-time",
            "nullable": true
          },
          "totalInclVat": {
            "type": "number",
            "description": "Total amount of all product lines including vat",
            "format": "double",
            "nullable": true
          },
          "currency": {
            "type": "string",
            "description": "The currency used on the trade offer.",
            "nullable": true,
            "example": "DKK"
          }
        },
        "additionalProperties": false,
        "description": "Represents trade offer history"
      },
      "TradeOfferLineCreateModel": {
        "required": [
          "accountNumber",
          "baseAmountValue",
          "discount",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "productGuid": {
            "type": "string",
            "description": "The guid of product. If product guid is set, description should be null.",
            "format": "uuid",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "A description of the product. If no ProductGuid, this field is required.\r\nThis field will always have a value on the read model, even if a ProductGuid is set.",
            "nullable": true,
            "example": "Flowers"
          },
          "comments": {
            "type": "string",
            "description": "User supplied comment",
            "nullable": true,
            "example": "Smells good"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity",
            "format": "double",
            "example": 5
          },
          "accountNumber": {
            "type": "integer",
            "description": "Account number",
            "format": "int32",
            "example": 1000
          },
          "unit": {
            "type": "string",
            "description": "Product unit. Required when LineType = Product. Available unit types: hours, parts, km, day, week, month, kilogram, cubicMetre, set, litre, box, case, carton, metre, package, shipment, squareMetre, session, tonne.",
            "nullable": true,
            "example": "parts"
          },
          "discount": {
            "type": "number",
            "description": "Discount for the current line. Specified in percentage from 0 to 100.",
            "format": "double",
            "example": 10
          },
          "lineType": {
            "type": "string",
            "description": "Type. Either Product or Text line.\r\n Text is used for creating bold lines only with text displayed, these lines are purely visual and have no effect on the voucher.\r\nText lines should only contain a description.\r\nProduct lines are the actual lines of the invoice used for accounting and total calculations.",
            "nullable": true,
            "example": "Product"
          },
          "baseAmountValue": {
            "type": "number",
            "description": "Base amount. As default without VAT. If you want to use amounts incl vat, the setting 'ShowLinesInclVat' should be set to true on the voucher containing the lines.",
            "format": "double",
            "example": 20
          }
        },
        "additionalProperties": false,
        "description": "Model for a line on a tradeoffer"
      },
      "TradeOfferLineReadModel": {
        "required": [
          "accountNumber",
          "baseAmountValue",
          "baseAmountValueInclVat",
          "discount",
          "quantity",
          "totalAmount",
          "totalAmountInclVat"
        ],
        "type": "object",
        "properties": {
          "productGuid": {
            "type": "string",
            "description": "The guid of product. If product guid is set, description should be null.",
            "format": "uuid",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "A description of the product. If no ProductGuid, this field is required.\r\nThis field will always have a value on the read model, even if a ProductGuid is set.",
            "nullable": true,
            "example": "Flowers"
          },
          "comments": {
            "type": "string",
            "description": "User supplied comment",
            "nullable": true,
            "example": "Smells good"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity",
            "format": "double",
            "example": 5
          },
          "accountNumber": {
            "type": "integer",
            "description": "Account number",
            "format": "int32",
            "example": 1000
          },
          "unit": {
            "type": "string",
            "description": "Product unit. Required when LineType = Product. Available unit types: hours, parts, km, day, week, month, kilogram, cubicMetre, set, litre, box, case, carton, metre, package, shipment, squareMetre, session, tonne.",
            "nullable": true,
            "example": "parts"
          },
          "discount": {
            "type": "number",
            "description": "Discount for the current line. Specified in percentage from 0 to 100.",
            "format": "double",
            "example": 10
          },
          "lineType": {
            "type": "string",
            "description": "Type. Either Product or Text line.\r\n Text is used for creating bold lines only with text displayed, these lines are purely visual and have no effect on the voucher.\r\nText lines should only contain a description.\r\nProduct lines are the actual lines of the invoice used for accounting and total calculations.",
            "nullable": true,
            "example": "Product"
          },
          "accountName": {
            "type": "string",
            "description": "Name of the Account",
            "nullable": true,
            "example": "Bank"
          },
          "baseAmountValue": {
            "type": "number",
            "description": "Amount excl. VAT",
            "format": "double",
            "example": 20
          },
          "baseAmountValueInclVat": {
            "type": "number",
            "description": "Base amount incl. VAT",
            "format": "double",
            "example": 25
          },
          "totalAmount": {
            "type": "number",
            "description": "Total of the line excl VAT",
            "format": "double",
            "example": 100
          },
          "totalAmountInclVat": {
            "type": "number",
            "description": "Total of the line incl VAT",
            "format": "double",
            "example": 125
          }
        },
        "additionalProperties": false,
        "description": "Model of a trade offer lines"
      },
      "TradeOfferReadModel": {
        "required": [
          "contactGuid",
          "guid",
          "hasGeneratedAnyVouchers",
          "number",
          "productLines",
          "showLinesInclVat",
          "totalExclVat",
          "totalInclVat",
          "totalNonVatableAmount",
          "totalVat",
          "totalVatableAmount"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "The currency used on the voucher. Defaults to DKK if null. Dinero will assign days date currency rate for the given currency. Currencies are given in format: DKK, EUR, USD etc...",
            "nullable": true,
            "example": "DKK"
          },
          "language": {
            "type": "string",
            "description": "The language to be used in the voucher. Available languages are 'da-DK' and 'en-GB'. Defaults to 'da-DK'.",
            "nullable": true,
            "example": "en-GB"
          },
          "externalReference": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "Your external id\r\nThis can be used for ID'ing in external apps/services e.g. a web shop.\r\nThe maximum length is 128 characters",
            "nullable": true,
            "example": "Fx. WebshopSpecialId: 42"
          },
          "description": {
            "type": "string",
            "description": "User supplied description of the voucher e.g. 'Custom Invoice description'. Defaults to document type e.g. 'Invoice', 'Offer', 'Creditnote' using the selected language.",
            "nullable": true,
            "example": "Description of document type. Fx.: invoice, credit note or offer"
          },
          "comment": {
            "type": "string",
            "description": "User supplied comment on the voucher",
            "nullable": true,
            "example": "Here is a comment"
          },
          "date": {
            "type": "string",
            "description": "The date of the creation/issuing. This should be in the format YYYY-MM-DD e.g. 2015-12-02. Defaults to today.",
            "nullable": true,
            "example": "2022-06-01"
          },
          "productLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TradeOfferLineReadModel"
            },
            "description": "User supplied invoice lines. Minimum one."
          },
          "address": {
            "type": "string",
            "description": "Contact address (linebreaks are allowed '\\n'). When null is specified the address defaults to the contacts address.",
            "nullable": true,
            "example": "Test Road 3 2300 Copenhagen S Denmark"
          },
          "number": {
            "type": "integer",
            "description": "The number of the voucher.",
            "format": "int64",
            "example": 12
          },
          "contactName": {
            "type": "string",
            "description": "Contact name",
            "nullable": true,
            "example": "My Customer"
          },
          "showLinesInclVat": {
            "type": "boolean",
            "description": "If true, the user prefers the invoice to be displayed with lines incl vat.",
            "example": false
          },
          "totalExclVat": {
            "type": "number",
            "description": "Total amount without vat",
            "format": "double",
            "example": 200
          },
          "totalVatableAmount": {
            "type": "number",
            "description": "Total amount to calculate the vat from",
            "format": "double",
            "example": 200
          },
          "totalInclVat": {
            "type": "number",
            "description": "Total amount incl. vat",
            "format": "double",
            "example": 250
          },
          "totalNonVatableAmount": {
            "type": "number",
            "description": "Total vat free amount",
            "format": "double",
            "example": 0
          },
          "totalVat": {
            "type": "number",
            "description": "Total vat amount",
            "format": "double",
            "example": 50
          },
          "totalLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TotalLine"
            },
            "description": "Total lines. SubTotal, Vat and Total. Only lines valid for display in the current context are returned.",
            "nullable": true
          },
          "invoiceTemplateId": {
            "type": "string",
            "description": "Template id to use for design.",
            "format": "uuid",
            "nullable": true
          },
          "guid": {
            "type": "string",
            "description": "The guid of the voucher",
            "format": "uuid"
          },
          "timeStamp": {
            "type": "string",
            "description": "Timestamp of version. To avoid concurrency issues.",
            "nullable": true,
            "example": "00000000020A5EA8"
          },
          "createdAt": {
            "type": "string",
            "description": "Time of creation",
            "format": "date-time",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "description": "Time of last update",
            "format": "date-time",
            "nullable": true
          },
          "deletedAt": {
            "type": "string",
            "description": "Time of deletion. Null unless the object is deleted.",
            "format": "date-time",
            "nullable": true
          },
          "hasGeneratedAnyVouchers": {
            "type": "boolean",
            "description": "OBSOLETE: Use Status instead. Equivalent of Status == Invoiced.\r\nIs true if any vouchers has been generated based on this trade offer.",
            "readOnly": true,
            "deprecated": true
          },
          "contactGuid": {
            "type": "string",
            "description": "Dinero contact guid.",
            "format": "uuid"
          },
          "status": {
            "type": "string",
            "description": "Status of the trade offer.\r\nPossible values are Draft, Invoiced, CustomerAccepted, CustomerDeclined, UserAccepted, UserDeclined",
            "nullable": true,
            "example": "Invoiced"
          },
          "mailOutStatus": {
            "type": "string",
            "description": "The mailout can have following status:\r\nNotSent, Sent or SeenByCustomer, Failed.\r\nSeenByCustomer, means the user has clicked on the link in the mailout and viewed the sales voucher.\r\nAny type of mailout (email, reminder, pre-reminder, e-invoice), will change the status from NotSent to Sent.",
            "nullable": true,
            "example": "Sent"
          },
          "latestMailOutType": {
            "type": "string",
            "description": "The mailout category can have following values:\r\nEinvoice, ElectronicInvoiceReminder, Inkasso, Mailout, OrderConfirmation, PreReminder, Reminder, TradeOffer, None",
            "nullable": true,
            "example": "einvoice"
          },
          "generatedVouchers": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "List of IDs of vouchers generated from the trade offer.",
            "nullable": true
          },
          "history": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TradeOfferHistoryReadModel"
            },
            "description": "List of trade offer changes.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represent a trade offer"
      },
      "TradeOfferReadModelDineroCollection": {
        "required": [
          "pagination"
        ],
        "type": "object",
        "properties": {
          "collection": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TradeOfferReadModel"
            },
            "description": "Collection containing the result of the request.",
            "nullable": true
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationDetails"
          }
        },
        "additionalProperties": false
      },
      "TradeOfferUpdateModel": {
        "required": [
          "contactGuid",
          "productLines",
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "The currency used on the voucher. Defaults to DKK if null. Dinero will assign days date currency rate for the given currency. Currencies are given in format: DKK, EUR, USD etc...",
            "nullable": true,
            "example": "DKK"
          },
          "language": {
            "type": "string",
            "description": "The language to be used in the voucher. Available languages are 'da-DK' and 'en-GB'. Defaults to 'da-DK'.",
            "nullable": true,
            "example": "en-GB"
          },
          "externalReference": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "Your external id\r\nThis can be used for ID'ing in external apps/services e.g. a web shop.\r\nThe maximum length is 128 characters",
            "nullable": true,
            "example": "Fx. WebshopSpecialId: 42"
          },
          "description": {
            "type": "string",
            "description": "User supplied description of the voucher e.g. 'Custom Invoice description'. Defaults to document type e.g. 'Invoice', 'Offer', 'Creditnote' using the selected language.",
            "nullable": true,
            "example": "Description of document type. Fx.: invoice, credit note or offer"
          },
          "comment": {
            "type": "string",
            "description": "User supplied comment on the voucher",
            "nullable": true,
            "example": "Here is a comment"
          },
          "date": {
            "type": "string",
            "description": "The date of the creation/issuing. This should be in the format YYYY-MM-DD e.g. 2015-12-02. Defaults to today.",
            "nullable": true,
            "example": "2022-06-01"
          },
          "productLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TradeOfferLineCreateModel"
            },
            "description": "User supplied invoice lines. Minimum one."
          },
          "address": {
            "type": "string",
            "description": "Contact address (linebreaks are allowed '\\n'). When null is specified the address defaults to the contacts address.",
            "nullable": true,
            "example": "Test Road 3 2300 Copenhagen S Denmark"
          },
          "guid": {
            "type": "string",
            "description": "Optional guid for the object. If not set the system will create a guid returned in the response.",
            "format": "uuid",
            "nullable": true,
            "example": "3a315ad3-ddcc-419d-9fc5-219280ae4816"
          },
          "showLinesInclVat": {
            "type": "boolean",
            "description": "If your user (or your system) prefers to provide the line amounts incl. VAT, then this property should be set to true. All voucher lines will be assumed to have amounts incl VAT.\r\nIf your lines are excl VAT, you do not need to set this property. It will defaults to false.",
            "nullable": true,
            "example": false
          },
          "invoiceTemplateId": {
            "type": "string",
            "description": "Template id to use for design. If null, the default one will be used.",
            "format": "uuid",
            "nullable": true
          },
          "contactGuid": {
            "type": "string",
            "description": "Dinero contact guid.",
            "format": "uuid"
          },
          "timestamp": {
            "minLength": 1,
            "type": "string",
            "description": "Version of the tradeoffer"
          }
        },
        "additionalProperties": false,
        "description": "Model for creating a trade offer"
      },
      "TrustPilotValidationResponse": {
        "required": [
          "shouldAddTrustPilotEmail"
        ],
        "type": "object",
        "properties": {
          "shouldAddTrustPilotEmail": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "UnsubscribeFromWebhookModel": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdatedResponseModel": {
        "required": [
          "guid"
        ],
        "type": "object",
        "properties": {
          "guid": {
            "type": "string",
            "description": "The id of the object",
            "format": "uuid"
          },
          "timeStamp": {
            "type": "string",
            "description": "Timestamp of version. To avoid concurrency issues.",
            "nullable": true,
            "example": "00000000020A5EA8"
          }
        },
        "additionalProperties": false,
        "description": "The response of a succesfull update"
      },
      "VatTypeReadModel": {
        "required": [
          "vatRate"
        ],
        "type": "object",
        "properties": {
          "vatCode": {
            "type": "string",
            "description": "The short hand VAT code.",
            "nullable": true,
            "example": "I25"
          },
          "name": {
            "type": "string",
            "description": "The descriptive name for the VAT code.",
            "nullable": true,
            "example": "Dansk købsmoms"
          },
          "vatRate": {
            "type": "number",
            "description": "The VAT types rate.",
            "format": "double",
            "example": 0.25
          }
        },
        "additionalProperties": false,
        "description": "Represents a VAT type"
      },
      "VoucherBookedSource": {
        "enum": [
          "Unkown",
          "Manuel",
          "Automatic"
        ],
        "type": "string"
      },
      "VoucherMailoutReadModel": {
        "required": [
          "ccToSender",
          "date",
          "downloadCount",
          "id",
          "isSmsMessage",
          "printCount"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Mailout id",
            "format": "int32"
          },
          "date": {
            "type": "string",
            "description": "Sent date",
            "format": "date-time"
          },
          "seenAt": {
            "type": "string",
            "description": "First time the mailout was seen",
            "format": "date-time",
            "nullable": true
          },
          "sender": {
            "type": "string",
            "description": "Email of the sender",
            "nullable": true
          },
          "receiver": {
            "type": "string",
            "description": "Email(s) of the receiver",
            "nullable": true
          },
          "subject": {
            "type": "string",
            "description": "Mailout subject",
            "nullable": true
          },
          "message": {
            "type": "string",
            "description": "Mailout message",
            "nullable": true
          },
          "downloadCount": {
            "type": "integer",
            "description": "Number of times the mailout was downloaded",
            "format": "int32"
          },
          "printCount": {
            "type": "integer",
            "description": "Number of times the mailout was printed",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "description": "Possible values are None, Einvoice, ElectronicInvoiceReminder, TradeOffer, OrderConfirmation, Mailout, Inkasso, PreReminder, ManualMailout, ManualTradeOfferMailout and Reminder",
            "nullable": true,
            "example": "Mailout"
          },
          "status": {
            "type": "string",
            "description": "Possible values are Pending, Sent, SeenByCustomer, Failed, and ManuallySent",
            "nullable": true,
            "example": "Sent"
          },
          "latestEvent": {
            "type": "string",
            "description": "Possible values for type TradeOffer, OrderConfirmation, Mailout, Inkasso, PreReminder and Reminder are Download, Print, WebView, SoftBounce, HardBounce, Rejected, Spam, Sent, Invalid, Queued, Scheduled and Failed\r\n            \r\nPossible values for type Einvoice, ElectronicInvoiceReminder are SentToDispatching, SentToProvider, SentToCustomer, InvalidDocument, IncompleteDocument, UnknownError, EndpointNotFound, AlreadyDispatched and TemporaryError",
            "nullable": true,
            "example": "Spam"
          },
          "isSmsMessage": {
            "type": "boolean",
            "description": "Indicates if this object is an sms"
          },
          "ccToSender": {
            "type": "boolean",
            "description": "Indicates if copy of email is sent to sender"
          }
        },
        "additionalProperties": false
      },
      "VoucherStateFilter": {
        "enum": [
          "All",
          "Active",
          "Deleted"
        ],
        "type": "string"
      }
    },
    "securitySchemes": {
      "OAuth2": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://connect.visma.com/connect/authorize",
            "tokenUrl": "https://connect.visma.com/connect/token",
            "scopes": {
              "dineropublicapi:read": "Access read operations",
              "dineropublicapi:write": "Access write operations"
            }
          }
        }
      }
    }
  }
}